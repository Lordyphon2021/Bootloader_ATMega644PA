
BootloaderProto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000208  00800100  0000fa7e  00000b12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a7e  0000f000  0000f000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006d  00800308  00800308  00000d1a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000206a  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a17  00000000  00000000  00002e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c01  00000000  00000000  000038a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  000044a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000796  00000000  00000000  000046b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001150  00000000  00000000  00004e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00005f9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000f000 <__vectors>:
    f000:	0c 94 3e 78 	jmp	0xf07c	; 0xf07c <__ctors_end>
    f004:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f008:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f00c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f010:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f014:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f018:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f01c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f020:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f024:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f028:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f02c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f030:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f034:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f038:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f03c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f040:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f044:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f048:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f04c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f050:	0c 94 15 7b 	jmp	0xf62a	; 0xf62a <__vector_20>
    f054:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f058:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f05c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f060:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f064:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f068:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f06c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f070:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f074:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f078:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>

0000f07c <__ctors_end>:
    f07c:	11 24       	eor	r1, r1
    f07e:	1f be       	out	0x3f, r1	; 63
    f080:	cf ef       	ldi	r28, 0xFF	; 255
    f082:	d0 e1       	ldi	r29, 0x10	; 16
    f084:	de bf       	out	0x3e, r29	; 62
    f086:	cd bf       	out	0x3d, r28	; 61

0000f088 <__do_copy_data>:
    f088:	13 e0       	ldi	r17, 0x03	; 3
    f08a:	a0 e0       	ldi	r26, 0x00	; 0
    f08c:	b1 e0       	ldi	r27, 0x01	; 1
    f08e:	ee e7       	ldi	r30, 0x7E	; 126
    f090:	fa ef       	ldi	r31, 0xFA	; 250
    f092:	02 c0       	rjmp	.+4      	; 0xf098 <__do_copy_data+0x10>
    f094:	05 90       	lpm	r0, Z+
    f096:	0d 92       	st	X+, r0
    f098:	a8 30       	cpi	r26, 0x08	; 8
    f09a:	b1 07       	cpc	r27, r17
    f09c:	d9 f7       	brne	.-10     	; 0xf094 <__do_copy_data+0xc>

0000f09e <__do_clear_bss>:
    f09e:	23 e0       	ldi	r18, 0x03	; 3
    f0a0:	a8 e0       	ldi	r26, 0x08	; 8
    f0a2:	b3 e0       	ldi	r27, 0x03	; 3
    f0a4:	01 c0       	rjmp	.+2      	; 0xf0a8 <.do_clear_bss_start>

0000f0a6 <.do_clear_bss_loop>:
    f0a6:	1d 92       	st	X+, r1

0000f0a8 <.do_clear_bss_start>:
    f0a8:	a5 37       	cpi	r26, 0x75	; 117
    f0aa:	b2 07       	cpc	r27, r18
    f0ac:	e1 f7       	brne	.-8      	; 0xf0a6 <.do_clear_bss_loop>
    f0ae:	0e 94 16 7a 	call	0xf42c	; 0xf42c <main>
    f0b2:	0c 94 3d 7d 	jmp	0xfa7a	; 0xfa7a <_exit>

0000f0b6 <__bad_interrupt>:
    f0b6:	0c 94 00 78 	jmp	0xf000	; 0xf000 <__vectors>

0000f0ba <LCD_Action>:
void watchdogSetup(void){
    cli(); // disable all interrupts
    asm("WDR");
    WDTCSR |= (1<<WDCE) | (1<<WDE);
    WDTCSR = (1<<WDIE) | (1<<WDE) | (1<<WDP1)| (1<<WDP2); 
    sei();
    f0ba:	98 b1       	in	r25, 0x08	; 8
    f0bc:	9f 70       	andi	r25, 0x0F	; 15
    f0be:	28 2f       	mov	r18, r24
    f0c0:	20 7f       	andi	r18, 0xF0	; 240
    f0c2:	92 2b       	or	r25, r18
    f0c4:	98 b9       	out	0x08, r25	; 8
    f0c6:	42 98       	cbi	0x08, 2	; 8
    f0c8:	43 9a       	sbi	0x08, 3	; 8
    f0ca:	36 e0       	ldi	r19, 0x06	; 6
    f0cc:	3a 95       	dec	r19
    f0ce:	f1 f7       	brne	.-4      	; 0xf0cc <LCD_Action+0x12>
    f0d0:	00 c0       	rjmp	.+0      	; 0xf0d2 <LCD_Action+0x18>
    f0d2:	43 98       	cbi	0x08, 3	; 8
    f0d4:	9d e0       	ldi	r25, 0x0D	; 13
    f0d6:	9a 95       	dec	r25
    f0d8:	f1 f7       	brne	.-4      	; 0xf0d6 <LCD_Action+0x1c>
    f0da:	00 00       	nop
    f0dc:	28 b1       	in	r18, 0x08	; 8
    f0de:	2f 70       	andi	r18, 0x0F	; 15
    f0e0:	30 e1       	ldi	r19, 0x10	; 16
    f0e2:	83 9f       	mul	r24, r19
    f0e4:	c0 01       	movw	r24, r0
    f0e6:	11 24       	eor	r1, r1
    f0e8:	82 2b       	or	r24, r18
    f0ea:	88 b9       	out	0x08, r24	; 8
    f0ec:	43 9a       	sbi	0x08, 3	; 8
    f0ee:	86 e0       	ldi	r24, 0x06	; 6
    f0f0:	8a 95       	dec	r24
    f0f2:	f1 f7       	brne	.-4      	; 0xf0f0 <LCD_Action+0x36>
    f0f4:	00 c0       	rjmp	.+0      	; 0xf0f6 <LCD_Action+0x3c>
    f0f6:	43 98       	cbi	0x08, 3	; 8
    f0f8:	8f e0       	ldi	r24, 0x0F	; 15
    f0fa:	97 e2       	ldi	r25, 0x27	; 39
    f0fc:	01 97       	sbiw	r24, 0x01	; 1
    f0fe:	f1 f7       	brne	.-4      	; 0xf0fc <LCD_Action+0x42>
    f100:	00 c0       	rjmp	.+0      	; 0xf102 <LCD_Action+0x48>
    f102:	00 00       	nop
    f104:	08 95       	ret

0000f106 <LCD_Init>:
    f106:	2f e5       	ldi	r18, 0x5F	; 95
    f108:	8a ee       	ldi	r24, 0xEA	; 234
    f10a:	90 e0       	ldi	r25, 0x00	; 0
    f10c:	21 50       	subi	r18, 0x01	; 1
    f10e:	80 40       	sbci	r24, 0x00	; 0
    f110:	90 40       	sbci	r25, 0x00	; 0
    f112:	e1 f7       	brne	.-8      	; 0xf10c <LCD_Init+0x6>
    f114:	00 c0       	rjmp	.+0      	; 0xf116 <LCD_Init+0x10>
    f116:	00 00       	nop
    f118:	82 e0       	ldi	r24, 0x02	; 2
    f11a:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    f11e:	88 e2       	ldi	r24, 0x28	; 40
    f120:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    f124:	8c e0       	ldi	r24, 0x0C	; 12
    f126:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    f12a:	86 e0       	ldi	r24, 0x06	; 6
    f12c:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    f130:	81 e0       	ldi	r24, 0x01	; 1
    f132:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    f136:	8f e0       	ldi	r24, 0x0F	; 15
    f138:	97 e2       	ldi	r25, 0x27	; 39
    f13a:	01 97       	sbiw	r24, 0x01	; 1
    f13c:	f1 f7       	brne	.-4      	; 0xf13a <LCD_Init+0x34>
    f13e:	00 c0       	rjmp	.+0      	; 0xf140 <LCD_Init+0x3a>
    f140:	00 00       	nop
    f142:	08 95       	ret

0000f144 <LCD_Print>:
    f144:	fc 01       	movw	r30, r24
    f146:	90 81       	ld	r25, Z
    f148:	99 23       	and	r25, r25
    f14a:	49 f1       	breq	.+82     	; 0xf19e <LCD_Print+0x5a>
    f14c:	28 b1       	in	r18, 0x08	; 8
    f14e:	2f 70       	andi	r18, 0x0F	; 15
    f150:	90 7f       	andi	r25, 0xF0	; 240
    f152:	92 2b       	or	r25, r18
    f154:	98 b9       	out	0x08, r25	; 8
    f156:	42 9a       	sbi	0x08, 2	; 8
    f158:	43 9a       	sbi	0x08, 3	; 8
    f15a:	82 e4       	ldi	r24, 0x42	; 66
    f15c:	8a 95       	dec	r24
    f15e:	f1 f7       	brne	.-4      	; 0xf15c <LCD_Print+0x18>
    f160:	00 c0       	rjmp	.+0      	; 0xf162 <LCD_Print+0x1e>
    f162:	43 98       	cbi	0x08, 3	; 8
    f164:	95 e8       	ldi	r25, 0x85	; 133
    f166:	9a 95       	dec	r25
    f168:	f1 f7       	brne	.-4      	; 0xf166 <LCD_Print+0x22>
    f16a:	00 00       	nop
    f16c:	48 b1       	in	r20, 0x08	; 8
    f16e:	91 91       	ld	r25, Z+
    f170:	80 e1       	ldi	r24, 0x10	; 16
    f172:	98 9f       	mul	r25, r24
    f174:	90 01       	movw	r18, r0
    f176:	11 24       	eor	r1, r1
    f178:	94 2f       	mov	r25, r20
    f17a:	9f 70       	andi	r25, 0x0F	; 15
    f17c:	29 2b       	or	r18, r25
    f17e:	28 b9       	out	0x08, r18	; 8
    f180:	43 9a       	sbi	0x08, 3	; 8
    f182:	92 e4       	ldi	r25, 0x42	; 66
    f184:	9a 95       	dec	r25
    f186:	f1 f7       	brne	.-4      	; 0xf184 <LCD_Print+0x40>
    f188:	00 c0       	rjmp	.+0      	; 0xf18a <LCD_Print+0x46>
    f18a:	43 98       	cbi	0x08, 3	; 8
    f18c:	89 ef       	ldi	r24, 0xF9	; 249
    f18e:	90 e0       	ldi	r25, 0x00	; 0
    f190:	01 97       	sbiw	r24, 0x01	; 1
    f192:	f1 f7       	brne	.-4      	; 0xf190 <LCD_Print+0x4c>
    f194:	00 c0       	rjmp	.+0      	; 0xf196 <LCD_Print+0x52>
    f196:	00 00       	nop
    f198:	90 81       	ld	r25, Z
    f19a:	91 11       	cpse	r25, r1
    f19c:	d7 cf       	rjmp	.-82     	; 0xf14c <LCD_Print+0x8>
    f19e:	08 95       	ret

0000f1a0 <SPI_MasterInit>:
    f1a0:	8c b5       	in	r24, 0x2c	; 44
    f1a2:	8d 65       	ori	r24, 0x5D	; 93
    f1a4:	8c bd       	out	0x2c, r24	; 44
    f1a6:	8c b5       	in	r24, 0x2c	; 44
    f1a8:	83 60       	ori	r24, 0x03	; 3
    f1aa:	8c bd       	out	0x2c, r24	; 44
    f1ac:	8c b5       	in	r24, 0x2c	; 44
    f1ae:	8f 7d       	andi	r24, 0xDF	; 223
    f1b0:	8c bd       	out	0x2c, r24	; 44
    f1b2:	8c b5       	in	r24, 0x2c	; 44
    f1b4:	8f 77       	andi	r24, 0x7F	; 127
    f1b6:	8c bd       	out	0x2c, r24	; 44
    f1b8:	2c 9a       	sbi	0x05, 4	; 5
    f1ba:	2b 9a       	sbi	0x05, 3	; 5
    f1bc:	08 95       	ret

0000f1be <SPI_SRAM_ByteWrite>:
    f1be:	cf 92       	push	r12
    f1c0:	df 92       	push	r13
    f1c2:	ef 92       	push	r14
    f1c4:	ff 92       	push	r15
    f1c6:	0f 93       	push	r16
    f1c8:	1f 93       	push	r17
    f1ca:	6c 01       	movw	r12, r24
    f1cc:	ee 24       	eor	r14, r14
    f1ce:	ff 24       	eor	r15, r15
    f1d0:	07 2f       	mov	r16, r23
    f1d2:	18 2f       	mov	r17, r24
    f1d4:	29 2f       	mov	r18, r25
    f1d6:	33 27       	eor	r19, r19
    f1d8:	29 98       	cbi	0x05, 1	; 5
    f1da:	52 e0       	ldi	r21, 0x02	; 2
    f1dc:	5e bd       	out	0x2e, r21	; 46
    f1de:	0d b4       	in	r0, 0x2d	; 45
    f1e0:	07 fe       	sbrs	r0, 7
    f1e2:	fd cf       	rjmp	.-6      	; 0xf1de <SPI_SRAM_ByteWrite+0x20>
    f1e4:	ce bc       	out	0x2e, r12	; 46
    f1e6:	0d b4       	in	r0, 0x2d	; 45
    f1e8:	07 fe       	sbrs	r0, 7
    f1ea:	fd cf       	rjmp	.-6      	; 0xf1e6 <SPI_SRAM_ByteWrite+0x28>
    f1ec:	0e bd       	out	0x2e, r16	; 46
    f1ee:	0d b4       	in	r0, 0x2d	; 45
    f1f0:	07 fe       	sbrs	r0, 7
    f1f2:	fd cf       	rjmp	.-6      	; 0xf1ee <SPI_SRAM_ByteWrite+0x30>
    f1f4:	6e bd       	out	0x2e, r22	; 46
    f1f6:	0d b4       	in	r0, 0x2d	; 45
    f1f8:	07 fe       	sbrs	r0, 7
    f1fa:	fd cf       	rjmp	.-6      	; 0xf1f6 <SPI_SRAM_ByteWrite+0x38>
    f1fc:	4e bd       	out	0x2e, r20	; 46
    f1fe:	0d b4       	in	r0, 0x2d	; 45
    f200:	07 fe       	sbrs	r0, 7
    f202:	fd cf       	rjmp	.-6      	; 0xf1fe <SPI_SRAM_ByteWrite+0x40>
    f204:	29 9a       	sbi	0x05, 1	; 5
    f206:	1f 91       	pop	r17
    f208:	0f 91       	pop	r16
    f20a:	ff 90       	pop	r15
    f20c:	ef 90       	pop	r14
    f20e:	df 90       	pop	r13
    f210:	cf 90       	pop	r12
    f212:	08 95       	ret

0000f214 <SPI_SRAM_ByteRead>:
    f214:	cf 92       	push	r12
    f216:	df 92       	push	r13
    f218:	ef 92       	push	r14
    f21a:	ff 92       	push	r15
    f21c:	0f 93       	push	r16
    f21e:	1f 93       	push	r17
    f220:	6c 01       	movw	r12, r24
    f222:	ee 24       	eor	r14, r14
    f224:	ff 24       	eor	r15, r15
    f226:	07 2f       	mov	r16, r23
    f228:	18 2f       	mov	r17, r24
    f22a:	29 2f       	mov	r18, r25
    f22c:	33 27       	eor	r19, r19
    f22e:	29 98       	cbi	0x05, 1	; 5
    f230:	43 e0       	ldi	r20, 0x03	; 3
    f232:	4e bd       	out	0x2e, r20	; 46
    f234:	0d b4       	in	r0, 0x2d	; 45
    f236:	07 fe       	sbrs	r0, 7
    f238:	fd cf       	rjmp	.-6      	; 0xf234 <SPI_SRAM_ByteRead+0x20>
    f23a:	ce bc       	out	0x2e, r12	; 46
    f23c:	0d b4       	in	r0, 0x2d	; 45
    f23e:	07 fe       	sbrs	r0, 7
    f240:	fd cf       	rjmp	.-6      	; 0xf23c <SPI_SRAM_ByteRead+0x28>
    f242:	0e bd       	out	0x2e, r16	; 46
    f244:	0d b4       	in	r0, 0x2d	; 45
    f246:	07 fe       	sbrs	r0, 7
    f248:	fd cf       	rjmp	.-6      	; 0xf244 <SPI_SRAM_ByteRead+0x30>
    f24a:	6e bd       	out	0x2e, r22	; 46
    f24c:	0d b4       	in	r0, 0x2d	; 45
    f24e:	07 fe       	sbrs	r0, 7
    f250:	fd cf       	rjmp	.-6      	; 0xf24c <SPI_SRAM_ByteRead+0x38>
    f252:	8f ef       	ldi	r24, 0xFF	; 255
    f254:	8e bd       	out	0x2e, r24	; 46
    f256:	0d b4       	in	r0, 0x2d	; 45
    f258:	07 fe       	sbrs	r0, 7
    f25a:	fd cf       	rjmp	.-6      	; 0xf256 <SPI_SRAM_ByteRead+0x42>
    f25c:	8e b5       	in	r24, 0x2e	; 46
    f25e:	29 9a       	sbi	0x05, 1	; 5
    f260:	1f 91       	pop	r17
    f262:	0f 91       	pop	r16
    f264:	ff 90       	pop	r15
    f266:	ef 90       	pop	r14
    f268:	df 90       	pop	r13
    f26a:	cf 90       	pop	r12
    f26c:	08 95       	ret

0000f26e <USART_Init>:
    f26e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    f272:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    f276:	e1 ec       	ldi	r30, 0xC1	; 193
    f278:	f0 e0       	ldi	r31, 0x00	; 0
    f27a:	80 81       	ld	r24, Z
    f27c:	88 60       	ori	r24, 0x08	; 8
    f27e:	80 83       	st	Z, r24
    f280:	80 81       	ld	r24, Z
    f282:	80 61       	ori	r24, 0x10	; 16
    f284:	80 83       	st	Z, r24
    f286:	80 81       	ld	r24, Z
    f288:	80 68       	ori	r24, 0x80	; 128
    f28a:	80 83       	st	Z, r24
    f28c:	a0 ec       	ldi	r26, 0xC0	; 192
    f28e:	b0 e0       	ldi	r27, 0x00	; 0
    f290:	8c 91       	ld	r24, X
    f292:	80 68       	ori	r24, 0x80	; 128
    f294:	8c 93       	st	X, r24
    f296:	8e e0       	ldi	r24, 0x0E	; 14
    f298:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    f29c:	80 81       	ld	r24, Z
    f29e:	80 69       	ori	r24, 0x90	; 144
    f2a0:	80 83       	st	Z, r24
    f2a2:	83 b7       	in	r24, 0x33	; 51
    f2a4:	81 7f       	andi	r24, 0xF1	; 241
    f2a6:	83 bf       	out	0x33, r24	; 51
    f2a8:	08 95       	ret

0000f2aa <USART_transmit_string>:
    f2aa:	dc 01       	movw	r26, r24
    f2ac:	80 e0       	ldi	r24, 0x00	; 0
    f2ae:	28 2f       	mov	r18, r24
    f2b0:	30 e0       	ldi	r19, 0x00	; 0
    f2b2:	fd 01       	movw	r30, r26
    f2b4:	01 90       	ld	r0, Z+
    f2b6:	00 20       	and	r0, r0
    f2b8:	e9 f7       	brne	.-6      	; 0xf2b4 <USART_transmit_string+0xa>
    f2ba:	31 97       	sbiw	r30, 0x01	; 1
    f2bc:	ea 1b       	sub	r30, r26
    f2be:	fb 0b       	sbc	r31, r27
    f2c0:	2e 17       	cp	r18, r30
    f2c2:	3f 07       	cpc	r19, r31
    f2c4:	61 f0       	breq	.+24     	; 0xf2de <USART_transmit_string+0x34>
    f2c6:	fd 01       	movw	r30, r26
    f2c8:	e2 0f       	add	r30, r18
    f2ca:	f3 1f       	adc	r31, r19
    f2cc:	20 81       	ld	r18, Z
    f2ce:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
    f2d2:	95 ff       	sbrs	r25, 5
    f2d4:	fc cf       	rjmp	.-8      	; 0xf2ce <USART_transmit_string+0x24>
    f2d6:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    f2da:	8f 5f       	subi	r24, 0xFF	; 255
    f2dc:	e8 cf       	rjmp	.-48     	; 0xf2ae <USART_transmit_string+0x4>
    f2de:	08 95       	ret

0000f2e0 <write_firmware_to_flash>:
    f2e0:	6f 92       	push	r6
    f2e2:	7f 92       	push	r7
    f2e4:	8f 92       	push	r8
    f2e6:	9f 92       	push	r9
    f2e8:	af 92       	push	r10
    f2ea:	bf 92       	push	r11
    f2ec:	cf 92       	push	r12
    f2ee:	df 92       	push	r13
    f2f0:	ef 92       	push	r14
    f2f2:	ff 92       	push	r15
    f2f4:	0f 93       	push	r16
    f2f6:	1f 93       	push	r17
    f2f8:	cf 93       	push	r28
    f2fa:	df 93       	push	r29
    f2fc:	f8 94       	cli
    f2fe:	81 e1       	ldi	r24, 0x11	; 17
    f300:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f0057>
    f304:	e8 95       	spm
    f306:	c1 2c       	mov	r12, r1
    f308:	d1 2c       	mov	r13, r1
    f30a:	76 01       	movw	r14, r12
    f30c:	03 e0       	ldi	r16, 0x03	; 3
    f30e:	d1 e0       	ldi	r29, 0x01	; 1
    f310:	15 e0       	ldi	r17, 0x05	; 5
    f312:	a8 95       	wdr
    f314:	07 b6       	in	r0, 0x37	; 55
    f316:	00 fc       	sbrc	r0, 0
    f318:	fd cf       	rjmp	.-6      	; 0xf314 <write_firmware_to_flash+0x34>
    f31a:	f9 99       	sbic	0x1f, 1	; 31
    f31c:	fe cf       	rjmp	.-4      	; 0xf31a <write_firmware_to_flash+0x3a>
    f31e:	36 01       	movw	r6, r12
    f320:	f6 01       	movw	r30, r12
    f322:	00 93 57 00 	sts	0x0057, r16	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f0057>
    f326:	e8 95       	spm
    f328:	07 b6       	in	r0, 0x37	; 55
    f32a:	00 fc       	sbrc	r0, 0
    f32c:	fd cf       	rjmp	.-6      	; 0xf328 <write_firmware_to_flash+0x48>
    f32e:	46 01       	movw	r8, r12
    f330:	57 01       	movw	r10, r14
    f332:	ff ef       	ldi	r31, 0xFF	; 255
    f334:	9f 1a       	sub	r9, r31
    f336:	af 0a       	sbc	r10, r31
    f338:	bf 0a       	sbc	r11, r31
    f33a:	c7 01       	movw	r24, r14
    f33c:	b6 01       	movw	r22, r12
    f33e:	0e 94 0a 79 	call	0xf214	; 0xf214 <SPI_SRAM_ByteRead>
    f342:	c8 2f       	mov	r28, r24
    f344:	c7 01       	movw	r24, r14
    f346:	b6 01       	movw	r22, r12
    f348:	6f 5f       	subi	r22, 0xFF	; 255
    f34a:	7f 4f       	sbci	r23, 0xFF	; 255
    f34c:	8f 4f       	sbci	r24, 0xFF	; 255
    f34e:	9f 4f       	sbci	r25, 0xFF	; 255
    f350:	0e 94 0a 79 	call	0xf214	; 0xf214 <SPI_SRAM_ByteRead>
    f354:	2c 2f       	mov	r18, r28
    f356:	30 e0       	ldi	r19, 0x00	; 0
    f358:	a9 01       	movw	r20, r18
    f35a:	58 2b       	or	r21, r24
    f35c:	ca 01       	movw	r24, r20
    f35e:	07 b6       	in	r0, 0x37	; 55
    f360:	00 fc       	sbrc	r0, 0
    f362:	fd cf       	rjmp	.-6      	; 0xf35e <write_firmware_to_flash+0x7e>
    f364:	f9 99       	sbic	0x1f, 1	; 31
    f366:	fe cf       	rjmp	.-4      	; 0xf364 <write_firmware_to_flash+0x84>
    f368:	f6 01       	movw	r30, r12
    f36a:	0c 01       	movw	r0, r24
    f36c:	d0 93 57 00 	sts	0x0057, r29	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f0057>
    f370:	e8 95       	spm
    f372:	11 24       	eor	r1, r1
    f374:	f2 e0       	ldi	r31, 0x02	; 2
    f376:	cf 0e       	add	r12, r31
    f378:	d1 1c       	adc	r13, r1
    f37a:	e1 1c       	adc	r14, r1
    f37c:	f1 1c       	adc	r15, r1
    f37e:	8c 14       	cp	r8, r12
    f380:	9d 04       	cpc	r9, r13
    f382:	ae 04       	cpc	r10, r14
    f384:	bf 04       	cpc	r11, r15
    f386:	c9 f6       	brne	.-78     	; 0xf33a <write_firmware_to_flash+0x5a>
    f388:	07 b6       	in	r0, 0x37	; 55
    f38a:	00 fc       	sbrc	r0, 0
    f38c:	fd cf       	rjmp	.-6      	; 0xf388 <write_firmware_to_flash+0xa8>
    f38e:	f9 99       	sbic	0x1f, 1	; 31
    f390:	fe cf       	rjmp	.-4      	; 0xf38e <write_firmware_to_flash+0xae>
    f392:	f3 01       	movw	r30, r6
    f394:	10 93 57 00 	sts	0x0057, r17	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f0057>
    f398:	e8 95       	spm
    f39a:	07 b6       	in	r0, 0x37	; 55
    f39c:	00 fc       	sbrc	r0, 0
    f39e:	fd cf       	rjmp	.-6      	; 0xf39a <write_firmware_to_flash+0xba>
    f3a0:	81 14       	cp	r8, r1
    f3a2:	f0 ef       	ldi	r31, 0xF0	; 240
    f3a4:	9f 06       	cpc	r9, r31
    f3a6:	a1 04       	cpc	r10, r1
    f3a8:	b1 04       	cpc	r11, r1
    f3aa:	19 f0       	breq	.+6      	; 0xf3b2 <write_firmware_to_flash+0xd2>
    f3ac:	75 01       	movw	r14, r10
    f3ae:	64 01       	movw	r12, r8
    f3b0:	b0 cf       	rjmp	.-160    	; 0xf312 <write_firmware_to_flash+0x32>
    f3b2:	81 e1       	ldi	r24, 0x11	; 17
    f3b4:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f0057>
    f3b8:	e8 95       	spm
    f3ba:	2f e7       	ldi	r18, 0x7F	; 127
    f3bc:	4a e1       	ldi	r20, 0x1A	; 26
    f3be:	56 e0       	ldi	r21, 0x06	; 6
    f3c0:	21 50       	subi	r18, 0x01	; 1
    f3c2:	40 40       	sbci	r20, 0x00	; 0
    f3c4:	50 40       	sbci	r21, 0x00	; 0
    f3c6:	e1 f7       	brne	.-8      	; 0xf3c0 <write_firmware_to_flash+0xe0>
    f3c8:	00 c0       	rjmp	.+0      	; 0xf3ca <write_firmware_to_flash+0xea>
    f3ca:	00 00       	nop
    f3cc:	81 e0       	ldi	r24, 0x01	; 1
    f3ce:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    f3d2:	85 e8       	ldi	r24, 0x85	; 133
    f3d4:	8a 95       	dec	r24
    f3d6:	f1 f7       	brne	.-4      	; 0xf3d4 <write_firmware_to_flash+0xf4>
    f3d8:	00 00       	nop
    f3da:	80 e8       	ldi	r24, 0x80	; 128
    f3dc:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    f3e0:	80 e8       	ldi	r24, 0x80	; 128
    f3e2:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    f3e6:	86 e0       	ldi	r24, 0x06	; 6
    f3e8:	91 e0       	ldi	r25, 0x01	; 1
    f3ea:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
    f3ee:	80 ec       	ldi	r24, 0xC0	; 192
    f3f0:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    f3f4:	8b e1       	ldi	r24, 0x1B	; 27
    f3f6:	91 e0       	ldi	r25, 0x01	; 1
    f3f8:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
    f3fc:	9f ef       	ldi	r25, 0xFF	; 255
    f3fe:	e8 e0       	ldi	r30, 0x08	; 8
    f400:	fd e3       	ldi	r31, 0x3D	; 61
    f402:	91 50       	subi	r25, 0x01	; 1
    f404:	e0 40       	sbci	r30, 0x00	; 0
    f406:	f0 40       	sbci	r31, 0x00	; 0
    f408:	e1 f7       	brne	.-8      	; 0xf402 <write_firmware_to_flash+0x122>
    f40a:	00 c0       	rjmp	.+0      	; 0xf40c <write_firmware_to_flash+0x12c>
    f40c:	00 00       	nop
    f40e:	df 91       	pop	r29
    f410:	cf 91       	pop	r28
    f412:	1f 91       	pop	r17
    f414:	0f 91       	pop	r16
    f416:	ff 90       	pop	r15
    f418:	ef 90       	pop	r14
    f41a:	df 90       	pop	r13
    f41c:	cf 90       	pop	r12
    f41e:	bf 90       	pop	r11
    f420:	af 90       	pop	r10
    f422:	9f 90       	pop	r9
    f424:	8f 90       	pop	r8
    f426:	7f 90       	pop	r7
    f428:	6f 90       	pop	r6
    f42a:	08 95       	ret

0000f42c <main>:




void watchdogSetup(void){
    cli(); // disable all interrupts
    f42c:	f8 94       	cli
    asm("WDR");
    f42e:	a8 95       	wdr
    WDTCSR |= (1<<WDCE) | (1<<WDE);
    f430:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    f434:	88 61       	ori	r24, 0x18	; 24
    f436:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    WDTCSR = (1<<WDIE) | (1<<WDE) | (1<<WDP1)| (1<<WDP2); 
    f43a:	8e e4       	ldi	r24, 0x4E	; 78
    f43c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f0060>
    sei();
    f440:	78 94       	sei
    unsigned char temp; 
    
    watchdogSetup();      
           
    //SET ATMEGA PORTS/PINS TO IN- OR OUTPUTS
    PINA = 0x00;
    f442:	10 b8       	out	0x00, r1	; 0
    DDRA = 0x0f;
    f444:	8f e0       	ldi	r24, 0x0F	; 15
    f446:	81 b9       	out	0x01, r24	; 1
    PORTA = 0x00;
    f448:	12 b8       	out	0x02, r1	; 2
    DDRB = 0xbe;
    f44a:	8e eb       	ldi	r24, 0xBE	; 190
    f44c:	84 b9       	out	0x04, r24	; 4
    DDRD = 0x7e;
    f44e:	8e e7       	ldi	r24, 0x7E	; 126
    f450:	8a b9       	out	0x0a, r24	; 10
    PORTD = 0x01; //internal pull-up rx-pin
    f452:	81 e0       	ldi	r24, 0x01	; 1
    f454:	8b b9       	out	0x0b, r24	; 11
    DDRC = 0xfe;
    f456:	8e ef       	ldi	r24, 0xFE	; 254
    f458:	87 b9       	out	0x07, r24	; 7
    PORTB = 0xbf;
    f45a:	8f eb       	ldi	r24, 0xBF	; 191
    f45c:	85 b9       	out	0x05, r24	; 5
    PORTC = 0x00;
    f45e:	18 b8       	out	0x08, r1	; 8
    PORTA = 13;  // set address for record button
    f460:	8d e0       	ldi	r24, 0x0D	; 13
    f462:	82 b9       	out	0x02, r24	; 2
    
    //INIT INTERFACES 
    USART_Init(21);  // UBRR = (F_CPU/(16*BAUD))-1   // initialize with correct baud rate
    f464:	85 e1       	ldi	r24, 0x15	; 21
    f466:	90 e0       	ldi	r25, 0x00	; 0
    f468:	0e 94 37 79 	call	0xf26e	; 0xf26e <USART_Init>
    SPI_MasterInit();
    f46c:	0e 94 d0 78 	call	0xf1a0	; 0xf1a0 <SPI_MasterInit>
    LCD_Init();	                                
    f470:	0e 94 83 78 	call	0xf106	; 0xf106 <LCD_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    f474:	2f e7       	ldi	r18, 0x7F	; 127
    f476:	84 e8       	ldi	r24, 0x84	; 132
    f478:	9e e1       	ldi	r25, 0x1E	; 30
    f47a:	21 50       	subi	r18, 0x01	; 1
    f47c:	80 40       	sbci	r24, 0x00	; 0
    f47e:	90 40       	sbci	r25, 0x00	; 0
    f480:	e1 f7       	brne	.-8      	; 0xf47a <main+0x4e>
    f482:	00 c0       	rjmp	.+0      	; 0xf484 <main+0x58>
    f484:	00 00       	nop
    _delay_ms(500);
    
    //ACTIVATE INTERRUPT
    
    sei();
    f486:	78 94       	sei
    
    
    wdt_reset();
    f488:	a8 95       	wdr
    //LCD_Printpos(0, 0, "updater: "  );
    //LCD_Printpos(1, 0, "press record "  );
    //_delay_ms(1000);
    
    if(rec_button)    //boot section only entered if REC button is pressed during power-up
    f48a:	80 b1       	in	r24, 0x00	; 0
    f48c:	80 71       	andi	r24, 0x10	; 16
    f48e:	80 b9       	out	0x00, r24	; 0
    f490:	88 23       	and	r24, r24
    f492:	09 f4       	brne	.+2      	; 0xf496 <main+0x6a>
    f494:	c2 c0       	rjmp	.+388    	; 0xf61a <main+0x1ee>
    {   
        
        //wdt_reset();
        cli();
    f496:	f8 94       	cli
        // set interrupt vector for boot section
        char sregtemp = SREG;
    f498:	9f b7       	in	r25, 0x3f	; 63
        temp = MCUCR;
    f49a:	85 b7       	in	r24, 0x35	; 53
        MCUCR = temp | (1<<IVCE);
    f49c:	28 2f       	mov	r18, r24
    f49e:	21 60       	ori	r18, 0x01	; 1
    f4a0:	25 bf       	out	0x35, r18	; 53
        MCUCR = temp | (1<<IVSEL);
    f4a2:	82 60       	ori	r24, 0x02	; 2
    f4a4:	85 bf       	out	0x35, r24	; 53
        SREG = sregtemp;
    f4a6:	9f bf       	out	0x3f, r25	; 63
        sei();
    f4a8:	78 94       	sei


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    f4aa:	80 e8       	ldi	r24, 0x80	; 128
    f4ac:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    
    LCD_Print(str);
    f4b0:	80 e3       	ldi	r24, 0x30	; 48
    f4b2:	91 e0       	ldi	r25, 0x01	; 1
    f4b4:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    f4b8:	80 ec       	ldi	r24, 0xC0	; 192
    f4ba:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    
    LCD_Print(str);
    f4be:	84 e4       	ldi	r24, 0x44	; 68
    f4c0:	91 e0       	ldi	r25, 0x01	; 1
    f4c2:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
    f4c6:	2f ef       	ldi	r18, 0xFF	; 255
    f4c8:	88 e0       	ldi	r24, 0x08	; 8
    f4ca:	9d e3       	ldi	r25, 0x3D	; 61
    f4cc:	21 50       	subi	r18, 0x01	; 1
    f4ce:	80 40       	sbci	r24, 0x00	; 0
    f4d0:	90 40       	sbci	r25, 0x00	; 0
    f4d2:	e1 f7       	brne	.-8      	; 0xf4cc <main+0xa0>
    f4d4:	00 c0       	rjmp	.+0      	; 0xf4d6 <main+0xaa>
    f4d6:	00 00       	nop


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    f4d8:	80 e8       	ldi	r24, 0x80	; 128
    f4da:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    
    LCD_Print(str);
    f4de:	86 e5       	ldi	r24, 0x56	; 86
    f4e0:	91 e0       	ldi	r25, 0x01	; 1
    f4e2:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    f4e6:	80 ec       	ldi	r24, 0xC0	; 192
    f4e8:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    
    LCD_Print(str);
    f4ec:	8a e6       	ldi	r24, 0x6A	; 106
    f4ee:	91 e0       	ldi	r25, 0x01	; 1
    f4f0:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
    f4f4:	16 c0       	rjmp	.+44     	; 0xf522 <main+0xf6>
    f4f6:	2f e7       	ldi	r18, 0x7F	; 127
    f4f8:	8a e1       	ldi	r24, 0x1A	; 26
    f4fa:	96 e0       	ldi	r25, 0x06	; 6
    f4fc:	21 50       	subi	r18, 0x01	; 1
    f4fe:	80 40       	sbci	r24, 0x00	; 0
    f500:	90 40       	sbci	r25, 0x00	; 0
    f502:	e1 f7       	brne	.-8      	; 0xf4fc <main+0xd0>
    f504:	00 c0       	rjmp	.+0      	; 0xf506 <main+0xda>
    f506:	00 00       	nop
                LCD_Printpos(0,0, "lordylink          ");
                LCD_Printpos(1,0, "connected          ");
            }
            _delay_ms(100);
            //UPDATE CALL EVALUATION
            if(strcmp(update_array, update_call) == 0)        //if call is correct, response will be sent
    f508:	60 e0       	ldi	r22, 0x00	; 0
    f50a:	71 e0       	ldi	r23, 0x01	; 1
    f50c:	85 e5       	ldi	r24, 0x55	; 85
    f50e:	93 e0       	ldi	r25, 0x03	; 3
    f510:	0e 94 34 7d 	call	0xfa68	; 0xfa68 <strcmp>
    f514:	89 2b       	or	r24, r25
    f516:	c1 f1       	breq	.+112    	; 0xf588 <main+0x15c>
                strcpy(update_array, "     ");                 //overwrite input buffer
                LCD_Printpos(0,0, "updater          ");
                LCD_Printpos(1,0, "enabled          ");
                
            }
            if(flash_flag == 1)
    f518:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <flash_flag>
    f51c:	81 30       	cpi	r24, 0x01	; 1
    f51e:	09 f4       	brne	.+2      	; 0xf522 <main+0xf6>
    f520:	5c c0       	rjmp	.+184    	; 0xf5da <main+0x1ae>
        //wdt_enable(WDTO_30MS);
        //wdt_reset();
        while(1)  //main loop
        {  
            
            wdt_reset();
    f522:	a8 95       	wdr
            if( rec_button )
    f524:	80 b1       	in	r24, 0x00	; 0
    f526:	80 71       	andi	r24, 0x10	; 16
    f528:	80 b9       	out	0x00, r24	; 0
    f52a:	81 11       	cpse	r24, r1
    f52c:	60 c0       	rjmp	.+192    	; 0xf5ee <main+0x1c2>
                
                    

            } 
            //HANDSHAKE CALL EVALUATION
            if(strcmp(handshake_array, handshake_call) == 0)   //if call is correct, response will be sent
    f52e:	67 ef       	ldi	r22, 0xF7	; 247
    f530:	72 e0       	ldi	r23, 0x02	; 2
    f532:	8b e5       	ldi	r24, 0x5B	; 91
    f534:	93 e0       	ldi	r25, 0x03	; 3
    f536:	0e 94 34 7d 	call	0xfa68	; 0xfa68 <strcmp>
    f53a:	89 2b       	or	r24, r25
    f53c:	e1 f6       	brne	.-72     	; 0xf4f6 <main+0xca>
    f53e:	2f ef       	ldi	r18, 0xFF	; 255
    f540:	84 e3       	ldi	r24, 0x34	; 52
    f542:	9c e0       	ldi	r25, 0x0C	; 12
    f544:	21 50       	subi	r18, 0x01	; 1
    f546:	80 40       	sbci	r24, 0x00	; 0
    f548:	90 40       	sbci	r25, 0x00	; 0
    f54a:	e1 f7       	brne	.-8      	; 0xf544 <main+0x118>
    f54c:	00 c0       	rjmp	.+0      	; 0xf54e <main+0x122>
    f54e:	00 00       	nop
            { 
                _delay_ms(200);	                               //give lordylink some time for startup
                USART_transmit_string(handshake_response);
    f550:	81 ef       	ldi	r24, 0xF1	; 241
    f552:	92 e0       	ldi	r25, 0x02	; 2
    f554:	0e 94 55 79 	call	0xf2aa	; 0xf2aa <USART_transmit_string>
                strcpy(handshake_array, "                ");   //delete input buffer            
    f558:	81 e1       	ldi	r24, 0x11	; 17
    f55a:	e5 e4       	ldi	r30, 0x45	; 69
    f55c:	f1 e0       	ldi	r31, 0x01	; 1
    f55e:	ab e5       	ldi	r26, 0x5B	; 91
    f560:	b3 e0       	ldi	r27, 0x03	; 3
    f562:	01 90       	ld	r0, Z+
    f564:	0d 92       	st	X+, r0
    f566:	8a 95       	dec	r24
    f568:	e1 f7       	brne	.-8      	; 0xf562 <main+0x136>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    f56a:	80 e8       	ldi	r24, 0x80	; 128
    f56c:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    
    LCD_Print(str);
    f570:	82 eb       	ldi	r24, 0xB2	; 178
    f572:	91 e0       	ldi	r25, 0x01	; 1
    f574:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    f578:	80 ec       	ldi	r24, 0xC0	; 192
    f57a:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    
    LCD_Print(str);
    f57e:	86 ec       	ldi	r24, 0xC6	; 198
    f580:	91 e0       	ldi	r25, 0x01	; 1
    f582:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
    f586:	b7 cf       	rjmp	.-146    	; 0xf4f6 <main+0xca>
    f588:	2f ef       	ldi	r18, 0xFF	; 255
    f58a:	84 e3       	ldi	r24, 0x34	; 52
    f58c:	9c e0       	ldi	r25, 0x0C	; 12
    f58e:	21 50       	subi	r18, 0x01	; 1
    f590:	80 40       	sbci	r24, 0x00	; 0
    f592:	90 40       	sbci	r25, 0x00	; 0
    f594:	e1 f7       	brne	.-8      	; 0xf58e <main+0x162>
    f596:	00 c0       	rjmp	.+0      	; 0xf598 <main+0x16c>
    f598:	00 00       	nop
            _delay_ms(100);
            //UPDATE CALL EVALUATION
            if(strcmp(update_array, update_call) == 0)        //if call is correct, response will be sent
            {  
                _delay_ms(200);								 
                USART_transmit_string(update_response);
    f59a:	8c ee       	ldi	r24, 0xEC	; 236
    f59c:	92 e0       	ldi	r25, 0x02	; 2
    f59e:	0e 94 55 79 	call	0xf2aa	; 0xf2aa <USART_transmit_string>
                strcpy(update_array, "     ");                 //overwrite input buffer
    f5a2:	86 e0       	ldi	r24, 0x06	; 6
    f5a4:	e0 e5       	ldi	r30, 0x50	; 80
    f5a6:	f1 e0       	ldi	r31, 0x01	; 1
    f5a8:	a5 e5       	ldi	r26, 0x55	; 85
    f5aa:	b3 e0       	ldi	r27, 0x03	; 3
    f5ac:	01 90       	ld	r0, Z+
    f5ae:	0d 92       	st	X+, r0
    f5b0:	8a 95       	dec	r24
    f5b2:	e1 f7       	brne	.-8      	; 0xf5ac <main+0x180>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    f5b4:	80 e8       	ldi	r24, 0x80	; 128
    f5b6:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    
    LCD_Print(str);
    f5ba:	8a ed       	ldi	r24, 0xDA	; 218
    f5bc:	91 e0       	ldi	r25, 0x01	; 1
    f5be:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    f5c2:	80 ec       	ldi	r24, 0xC0	; 192
    f5c4:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    
    LCD_Print(str);
    f5c8:	8c ee       	ldi	r24, 0xEC	; 236
    f5ca:	91 e0       	ldi	r25, 0x01	; 1
    f5cc:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
                strcpy(update_array, "     ");                 //overwrite input buffer
                LCD_Printpos(0,0, "updater          ");
                LCD_Printpos(1,0, "enabled          ");
                
            }
            if(flash_flag == 1)
    f5d0:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <flash_flag>
    f5d4:	81 30       	cpi	r24, 0x01	; 1
    f5d6:	09 f0       	breq	.+2      	; 0xf5da <main+0x1ae>
    f5d8:	a4 cf       	rjmp	.-184    	; 0xf522 <main+0xf6>
            {
                write_firmware_to_flash();                    //flash app section
    f5da:	0e 94 70 79 	call	0xf2e0	; 0xf2e0 <write_firmware_to_flash>
                cli();
    f5de:	f8 94       	cli
                temp = MCUCR;                                 //reset interrupt vector
    f5e0:	85 b7       	in	r24, 0x35	; 53
                MCUCR = temp | (1<<IVCE);
    f5e2:	98 2f       	mov	r25, r24
    f5e4:	91 60       	ori	r25, 0x01	; 1
    f5e6:	95 bf       	out	0x35, r25	; 53
                MCUCR = temp & ~(1<<IVSEL);
    f5e8:	8d 7f       	andi	r24, 0xFD	; 253
    f5ea:	85 bf       	out	0x35, r24	; 53
    f5ec:	ff cf       	rjmp	.-2      	; 0xf5ec <main+0x1c0>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    f5ee:	80 e8       	ldi	r24, 0x80	; 128
    f5f0:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    
    LCD_Print(str);
    f5f4:	80 e8       	ldi	r24, 0x80	; 128
    f5f6:	91 e0       	ldi	r25, 0x01	; 1
    f5f8:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    f5fc:	80 ec       	ldi	r24, 0xC0	; 192
    f5fe:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    
    LCD_Print(str);
    f602:	86 e9       	ldi	r24, 0x96	; 150
    f604:	91 e0       	ldi	r25, 0x01	; 1
    f606:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
                
                LCD_Printpos(0, 0, "exit updater         "  );
                LCD_Printpos(1, 0, "rebooting...               " );
                //_delay_ms(1000);
                
                cli();
    f60a:	f8 94       	cli
                temp = MCUCR;                                 //reset interrupt vector
    f60c:	85 b7       	in	r24, 0x35	; 53
                MCUCR = temp | (1<<IVCE);
    f60e:	98 2f       	mov	r25, r24
    f610:	91 60       	ori	r25, 0x01	; 1
    f612:	95 bf       	out	0x35, r25	; 53
                MCUCR = temp & ~(1<<IVSEL);
    f614:	8d 7f       	andi	r24, 0xFD	; 253
    f616:	85 bf       	out	0x35, r24	; 53
    f618:	ff cf       	rjmp	.-2      	; 0xf618 <main+0x1ec>
        } //end while(1) 
    
    }
    else  // go directly to app section
    { 
        start();
    f61a:	e0 91 08 03 	lds	r30, 0x0308	; 0x800308 <__data_end>
    f61e:	f0 91 09 03 	lds	r31, 0x0309	; 0x800309 <__data_end+0x1>
    f622:	09 95       	icall
    }
} // end main 
    f624:	80 e0       	ldi	r24, 0x00	; 0
    f626:	90 e0       	ldi	r25, 0x00	; 0
    f628:	08 95       	ret

0000f62a <__vector_20>:

//Interrupt Service Routine is in sleep mode unless USART message is received

ISR(USART0_RX_vect)
{
    f62a:	1f 92       	push	r1
    f62c:	0f 92       	push	r0
    f62e:	0f b6       	in	r0, 0x3f	; 63
    f630:	0f 92       	push	r0
    f632:	11 24       	eor	r1, r1
    f634:	ef 92       	push	r14
    f636:	ff 92       	push	r15
    f638:	0f 93       	push	r16
    f63a:	1f 93       	push	r17
    f63c:	2f 93       	push	r18
    f63e:	3f 93       	push	r19
    f640:	4f 93       	push	r20
    f642:	5f 93       	push	r21
    f644:	6f 93       	push	r22
    f646:	7f 93       	push	r23
    f648:	8f 93       	push	r24
    f64a:	9f 93       	push	r25
    f64c:	af 93       	push	r26
    f64e:	bf 93       	push	r27
    f650:	cf 93       	push	r28
    f652:	df 93       	push	r29
    f654:	ef 93       	push	r30
    f656:	ff 93       	push	r31
}


uint8_t USART_receive_byte(void)
{
    while (!(UCSR0A & (1<<RXC0)))
    f658:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
    f65c:	87 ff       	sbrs	r24, 7
    f65e:	fc cf       	rjmp	.-8      	; 0xf658 <__vector_20+0x2e>
    ;   
    
    return UDR0;												
    f660:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>

//Interrupt Service Routine is in sleep mode unless USART message is received

ISR(USART0_RX_vect)
{
    header = USART_receive_byte();  //header will determine, which kind of message is arriving (following if/else paths)
    f664:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <header>
    
    //HANDSHAKE MESSAGE
    
    if (header == usart_handshake_message)// if incoming data is handshake type...
    f668:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <header>
    f66c:	81 32       	cpi	r24, 0x21	; 33
    f66e:	79 f1       	breq	.+94     	; 0xf6ce <__vector_20+0xa4>
    //AFTER HEX-RECORD IS RECEIVED, CHECKSUM WILL BE EVALUATED AND CONFIRMATION MESSAGE ("ok" or "er") WILL BE SENT TO LORDYLINK'S BLOCKING THREAD
    //IF CONFIRMATION IS "ok", LORDYLINK SENDS NEXT RECORD AFTER CONTROLLER HAS WRITTEN DATA SECTION INTO THE SRAM
    //IF CONFIRMATION IS "er", LORDYLINK SENDS CURRENT RECORD AGAIN, EVALUATION STARTS FROM THE TOP
    //IF CONFIRMATION MESSAGE ISN'T RECOGNIZED BY LORDYLINK, CHECKSUM STATUS WILL BE RE-EVALUATED AND CONFIRMATION MESSAGE IS TRANSMITTED AGAIN.
    
    else if(header == usart_hexfile_message) //if message is hexfile....
    f670:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <header>
    f674:	8a 33       	cpi	r24, 0x3A	; 58
    f676:	d1 f1       	breq	.+116    	; 0xf6ec <__vector_20+0xc2>
    
    } // end else if(header == usart_hexfile_message)
    
    //THIS MESSAGE HEADER INDICATES THAT HEXFILE CONFIRMATION MESSAGE WASN'T RECOGNIZED BY LORDYLINK
    
    else if(header == usart_rx_error_hexrecord)            //lordylink didn't "understand" last confirmation	
    f678:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <header>
    f67c:	8f 33       	cpi	r24, 0x3F	; 63
    f67e:	09 f4       	brne	.+2      	; 0xf682 <__vector_20+0x58>
    f680:	d9 c0       	rjmp	.+434    	; 0xf834 <__vector_20+0x20a>
        else                                               // if error => record will be sent again, otherwise SRAM entry is correct
        {
            USART_transmit_string("er");
        }            
    }
    else if(header == usart_request_data_dump)
    f682:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <header>
    f686:	83 37       	cpi	r24, 0x73	; 115
    f688:	09 f4       	brne	.+2      	; 0xf68c <__vector_20+0x62>
    f68a:	4e c1       	rjmp	.+668    	; 0xf928 <__vector_20+0x2fe>
    { 
            sram_address = 0;
            send_sram_flag = 1;
    }
    else if(header == usart_hexfile_send_complete)          //hexfile transfer is complete
    f68c:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <header>
    f690:	87 37       	cpi	r24, 0x77	; 119
    f692:	09 f4       	brne	.+2      	; 0xf696 <__vector_20+0x6c>
    f694:	aa c1       	rjmp	.+852    	; 0xf9ea <__vector_20+0x3c0>
            LCD_Printpos(0,0, "burning flash        ");
            LCD_Printpos(1,0, "don't turn off         ");
            flash_flag = 1; 
    }    
    
    else if (header == usart_update_message)               // if incoming data is an update handshake 
    f696:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <header>
    f69a:	85 37       	cpi	r24, 0x75	; 117
    f69c:	09 f4       	brne	.+2      	; 0xf6a0 <__vector_20+0x76>
    f69e:	d3 c0       	rjmp	.+422    	; 0xf846 <__vector_20+0x21c>
        for(int i = 0; i < 5; ++i)
        {
            update_array[i] = USART_receive_byte();        //read handshake call, if correct: response will be sent from main loop    
        } 
    }
}
    f6a0:	ff 91       	pop	r31
    f6a2:	ef 91       	pop	r30
    f6a4:	df 91       	pop	r29
    f6a6:	cf 91       	pop	r28
    f6a8:	bf 91       	pop	r27
    f6aa:	af 91       	pop	r26
    f6ac:	9f 91       	pop	r25
    f6ae:	8f 91       	pop	r24
    f6b0:	7f 91       	pop	r23
    f6b2:	6f 91       	pop	r22
    f6b4:	5f 91       	pop	r21
    f6b6:	4f 91       	pop	r20
    f6b8:	3f 91       	pop	r19
    f6ba:	2f 91       	pop	r18
    f6bc:	1f 91       	pop	r17
    f6be:	0f 91       	pop	r16
    f6c0:	ff 90       	pop	r15
    f6c2:	ef 90       	pop	r14
    f6c4:	0f 90       	pop	r0
    f6c6:	0f be       	out	0x3f, r0	; 63
    f6c8:	0f 90       	pop	r0
    f6ca:	1f 90       	pop	r1
    f6cc:	18 95       	reti
    f6ce:	eb e5       	ldi	r30, 0x5B	; 91
    f6d0:	f3 e0       	ldi	r31, 0x03	; 3
    f6d2:	2b e6       	ldi	r18, 0x6B	; 107
    f6d4:	33 e0       	ldi	r19, 0x03	; 3
}


uint8_t USART_receive_byte(void)
{
    while (!(UCSR0A & (1<<RXC0)))
    f6d6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
    f6da:	87 ff       	sbrs	r24, 7
    f6dc:	fc cf       	rjmp	.-8      	; 0xf6d6 <__vector_20+0xac>
    ;   
    
    return UDR0;												
    f6de:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    
    if (header == usart_handshake_message)// if incoming data is handshake type...
    {  
        for(uint8_t i = 0; i < 16; ++i)
        {
            handshake_array[i] = USART_receive_byte();  //read handshake call, if correct: response will be sent from main loop    
    f6e2:	81 93       	st	Z+, r24
    
    //HANDSHAKE MESSAGE
    
    if (header == usart_handshake_message)// if incoming data is handshake type...
    {  
        for(uint8_t i = 0; i < 16; ++i)
    f6e4:	2e 17       	cp	r18, r30
    f6e6:	3f 07       	cpc	r19, r31
    f6e8:	b1 f7       	brne	.-20     	; 0xf6d6 <__vector_20+0xac>
    f6ea:	da cf       	rjmp	.-76     	; 0xf6a0 <__vector_20+0x76>
    //IF CONFIRMATION IS "er", LORDYLINK SENDS CURRENT RECORD AGAIN, EVALUATION STARTS FROM THE TOP
    //IF CONFIRMATION MESSAGE ISN'T RECOGNIZED BY LORDYLINK, CHECKSUM STATUS WILL BE RE-EVALUATED AND CONFIRMATION MESSAGE IS TRANSMITTED AGAIN.
    
    else if(header == usart_hexfile_message) //if message is hexfile....
    {  
            ++record_ctr;  //keep track...
    f6ec:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <record_ctr>
    f6f0:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <record_ctr+0x1>
    f6f4:	a0 91 0d 03 	lds	r26, 0x030D	; 0x80030d <record_ctr+0x2>
    f6f8:	b0 91 0e 03 	lds	r27, 0x030E	; 0x80030e <record_ctr+0x3>
    f6fc:	01 96       	adiw	r24, 0x01	; 1
    f6fe:	a1 1d       	adc	r26, r1
    f700:	b1 1d       	adc	r27, r1
    f702:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <record_ctr>
    f706:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <record_ctr+0x1>
    f70a:	a0 93 0d 03 	sts	0x030D, r26	; 0x80030d <record_ctr+0x2>
    f70e:	b0 93 0e 03 	sts	0x030E, r27	; 0x80030e <record_ctr+0x3>
}


uint8_t USART_receive_byte(void)
{
    while (!(UCSR0A & (1<<RXC0)))
    f712:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
    f716:	87 ff       	sbrs	r24, 7
    f718:	fc cf       	rjmp	.-8      	; 0xf712 <__vector_20+0xe8>
    ;   
    
    return UDR0;												
    f71a:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    {  
            ++record_ctr;  //keep track...
            //PARSE INCOMING MESSAGE
    
            uint8_t data_section_size = USART_receive_byte();    //this is the amount of databytes that will be written into the SRAM
            uint8_t hex_record_size = data_section_size + 5;    // add start bytes and checksum to data section length for total size of message
    f71e:	85 e0       	ldi	r24, 0x05	; 5
    f720:	81 0f       	add	r24, r17
        
            hex_buffer_array[0] = data_section_size;            //buffer starts with data_section_size, header ':' will be discarded
    f722:	10 93 15 03 	sts	0x0315, r17	; 0x800315 <hex_buffer_array>
        
            for(int i = 1; i < hex_record_size ; ++i )          // get rest of message data
    f726:	c8 2f       	mov	r28, r24
    f728:	d0 e0       	ldi	r29, 0x00	; 0
    f72a:	82 30       	cpi	r24, 0x02	; 2
    f72c:	88 f0       	brcs	.+34     	; 0xf750 <__vector_20+0x126>
    f72e:	21 e0       	ldi	r18, 0x01	; 1
    f730:	30 e0       	ldi	r19, 0x00	; 0
}


uint8_t USART_receive_byte(void)
{
    while (!(UCSR0A & (1<<RXC0)))
    f732:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
    f736:	87 ff       	sbrs	r24, 7
    f738:	fc cf       	rjmp	.-8      	; 0xf732 <__vector_20+0x108>
    ;   
    
    return UDR0;												
    f73a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
        
            hex_buffer_array[0] = data_section_size;            //buffer starts with data_section_size, header ':' will be discarded
        
            for(int i = 1; i < hex_record_size ; ++i )          // get rest of message data
            {
                hex_buffer_array[ i ] = USART_receive_byte();    
    f73e:	f9 01       	movw	r30, r18
    f740:	eb 5e       	subi	r30, 0xEB	; 235
    f742:	fc 4f       	sbci	r31, 0xFC	; 252
    f744:	80 83       	st	Z, r24
            uint8_t data_section_size = USART_receive_byte();    //this is the amount of databytes that will be written into the SRAM
            uint8_t hex_record_size = data_section_size + 5;    // add start bytes and checksum to data section length for total size of message
        
            hex_buffer_array[0] = data_section_size;            //buffer starts with data_section_size, header ':' will be discarded
        
            for(int i = 1; i < hex_record_size ; ++i )          // get rest of message data
    f746:	2f 5f       	subi	r18, 0xFF	; 255
    f748:	3f 4f       	sbci	r19, 0xFF	; 255
    f74a:	c2 17       	cp	r28, r18
    f74c:	d3 07       	cpc	r29, r19
    f74e:	89 f7       	brne	.-30     	; 0xf732 <__vector_20+0x108>
            {
                hex_buffer_array[ i ] = USART_receive_byte();    
            }                
             
            //TRANSMISSION IS NOW COMPLETED AND STORED IN BUFFER
             switch(animation_ctr)  // display animation
    f750:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <animation_ctr>
    f754:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <animation_ctr+0x1>
    f758:	a0 91 11 03 	lds	r26, 0x0311	; 0x800311 <animation_ctr+0x2>
    f75c:	b0 91 12 03 	lds	r27, 0x0312	; 0x800312 <animation_ctr+0x3>
    f760:	88 3c       	cpi	r24, 0xC8	; 200
    f762:	91 05       	cpc	r25, r1
    f764:	a1 05       	cpc	r26, r1
    f766:	b1 05       	cpc	r27, r1
    f768:	09 f4       	brne	.+2      	; 0xf76c <__vector_20+0x142>
    f76a:	ea c0       	rjmp	.+468    	; 0xf940 <__vector_20+0x316>
    f76c:	08 f4       	brcc	.+2      	; 0xf770 <__vector_20+0x146>
    f76e:	bd c0       	rjmp	.+378    	; 0xf8ea <__vector_20+0x2c0>
    f770:	80 39       	cpi	r24, 0x90	; 144
    f772:	21 e0       	ldi	r18, 0x01	; 1
    f774:	92 07       	cpc	r25, r18
    f776:	a1 05       	cpc	r26, r1
    f778:	b1 05       	cpc	r27, r1
    f77a:	09 f4       	brne	.+2      	; 0xf77e <__vector_20+0x154>
    f77c:	23 c1       	rjmp	.+582    	; 0xf9c4 <__vector_20+0x39a>
    f77e:	84 3f       	cpi	r24, 0xF4	; 244
    f780:	21 e0       	ldi	r18, 0x01	; 1
    f782:	92 07       	cpc	r25, r18
    f784:	a1 05       	cpc	r26, r1
    f786:	b1 05       	cpc	r27, r1
    f788:	09 f4       	brne	.+2      	; 0xf78c <__vector_20+0x162>
    f78a:	fd c0       	rjmp	.+506    	; 0xf986 <__vector_20+0x35c>
    f78c:	8c 32       	cpi	r24, 0x2C	; 44
    f78e:	21 e0       	ldi	r18, 0x01	; 1
    f790:	92 07       	cpc	r25, r18
    f792:	a1 05       	cpc	r26, r1
    f794:	b1 05       	cpc	r27, r1
    f796:	09 f4       	brne	.+2      	; 0xf79a <__vector_20+0x170>
    f798:	e6 c0       	rjmp	.+460    	; 0xf966 <__vector_20+0x33c>
    f79a:	01 96       	adiw	r24, 0x01	; 1
    f79c:	a1 1d       	adc	r26, r1
    f79e:	b1 1d       	adc	r27, r1
                 case 500:
                 animation_ctr = 0;
                 break;
             }//end switch
         
             animation_ctr++;
    f7a0:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <animation_ctr>
    f7a4:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <animation_ctr+0x1>
    f7a8:	a0 93 11 03 	sts	0x0311, r26	; 0x800311 <animation_ctr+0x2>
    f7ac:	b0 93 12 03 	sts	0x0312, r27	; 0x800312 <animation_ctr+0x3>
            //THIS PART CALCULATES CHECKSUM FROM MESSAGE
            //AND COMPARES IT TO THE CHECKSUM IN THE HEX-RECORD
            
            uint16_t vec_sum = 0;                                               //local helper variable for checksum calculation
            uint8_t checksum_from_file = hex_buffer_array[hex_record_size - 1]; //read checksum from file
    f7b0:	9e 01       	movw	r18, r28
    f7b2:	21 50       	subi	r18, 0x01	; 1
    f7b4:	31 09       	sbc	r19, r1
    f7b6:	f9 01       	movw	r30, r18
    f7b8:	eb 5e       	subi	r30, 0xEB	; 235
    f7ba:	fc 4f       	sbci	r31, 0xFC	; 252
    f7bc:	70 81       	ld	r23, Z
        
            for(int i = 0; i < hex_record_size - 1; ++i)                        // accumulate record for checksum calculation
    f7be:	12 16       	cp	r1, r18
    f7c0:	13 06       	cpc	r1, r19
    f7c2:	0c f0       	brlt	.+2      	; 0xf7c6 <__vector_20+0x19c>
    f7c4:	4f c1       	rjmp	.+670    	; 0xfa64 <__vector_20+0x43a>
    f7c6:	80 e0       	ldi	r24, 0x00	; 0
    f7c8:	90 e0       	ldi	r25, 0x00	; 0
    f7ca:	40 e0       	ldi	r20, 0x00	; 0
    f7cc:	50 e0       	ldi	r21, 0x00	; 0
            {                      
                vec_sum += hex_buffer_array[ i ];
    f7ce:	fc 01       	movw	r30, r24
    f7d0:	eb 5e       	subi	r30, 0xEB	; 235
    f7d2:	fc 4f       	sbci	r31, 0xFC	; 252
    f7d4:	60 81       	ld	r22, Z
    f7d6:	46 0f       	add	r20, r22
    f7d8:	51 1d       	adc	r21, r1
            //AND COMPARES IT TO THE CHECKSUM IN THE HEX-RECORD
            
            uint16_t vec_sum = 0;                                               //local helper variable for checksum calculation
            uint8_t checksum_from_file = hex_buffer_array[hex_record_size - 1]; //read checksum from file
        
            for(int i = 0; i < hex_record_size - 1; ++i)                        // accumulate record for checksum calculation
    f7da:	01 96       	adiw	r24, 0x01	; 1
    f7dc:	28 17       	cp	r18, r24
    f7de:	39 07       	cpc	r19, r25
    f7e0:	b1 f7       	brne	.-20     	; 0xf7ce <__vector_20+0x1a4>
    f7e2:	41 95       	neg	r20
                vec_sum += hex_buffer_array[ i ];
            }            
            
            uint8_t checksum_calculated =  ~(vec_sum & 0x00ff ) + 0x01;	        // actual checksum calculation
        
            if(checksum_calculated == checksum_from_file )                      // compare checksums
    f7e4:	74 17       	cp	r23, r20
    f7e6:	e9 f1       	breq	.+122    	; 0xf862 <__vector_20+0x238>
                                                            //to reevaluate checksum via flag variable "checksum_status"
            }//end if(checksum calculated....	
            
            else if( checksum_calculated != checksum_from_file)
            {
                checksum_status = is_error;	                                  // error, same record will be sent again
    f7e8:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <checksum_status>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    f7ec:	80 e8       	ldi	r24, 0x80	; 128
    f7ee:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    
    LCD_Print(str);
    f7f2:	85 e6       	ldi	r24, 0x65	; 101
    f7f4:	92 e0       	ldi	r25, 0x02	; 2
    f7f6:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    f7fa:	80 ec       	ldi	r24, 0xC0	; 192
    f7fc:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    
    LCD_Print(str);
    f800:	8b e7       	ldi	r24, 0x7B	; 123
    f802:	92 e0       	ldi	r25, 0x02	; 2
    f804:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
    f808:	9f e7       	ldi	r25, 0x7F	; 127
    f80a:	2a e1       	ldi	r18, 0x1A	; 26
    f80c:	86 e0       	ldi	r24, 0x06	; 6
    f80e:	91 50       	subi	r25, 0x01	; 1
    f810:	20 40       	sbci	r18, 0x00	; 0
    f812:	80 40       	sbci	r24, 0x00	; 0
    f814:	e1 f7       	brne	.-8      	; 0xf80e <__vector_20+0x1e4>
    f816:	00 c0       	rjmp	.+0      	; 0xf818 <__vector_20+0x1ee>
    f818:	00 00       	nop
                LCD_Printpos(0,0,"checksum error!      ");                    //LCD user feedback
                LCD_Printpos(1,0,"trying again......   ");
                
                _delay_ms(100);
                
                animation_ctr  = 0;
    f81a:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <animation_ctr>
    f81e:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <animation_ctr+0x1>
    f822:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <animation_ctr+0x2>
    f826:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <animation_ctr+0x3>
                USART_transmit_string("er");                                        
    f82a:	81 e9       	ldi	r24, 0x91	; 145
    f82c:	92 e0       	ldi	r25, 0x02	; 2
    f82e:	0e 94 55 79 	call	0xf2aa	; 0xf2aa <USART_transmit_string>
    f832:	36 cf       	rjmp	.-404    	; 0xf6a0 <__vector_20+0x76>
    //THIS MESSAGE HEADER INDICATES THAT HEXFILE CONFIRMATION MESSAGE WASN'T RECOGNIZED BY LORDYLINK
    
    else if(header == usart_rx_error_hexrecord)            //lordylink didn't "understand" last confirmation	
    {                                  
        
        if(checksum_status == is_ok)                       // evaluating last checksum again...
    f834:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <checksum_status>
    f838:	81 11       	cpse	r24, r1
    f83a:	52 c0       	rjmp	.+164    	; 0xf8e0 <__vector_20+0x2b6>
        {
            USART_transmit_string("ok");	    
        }
        else                                               // if error => record will be sent again, otherwise SRAM entry is correct
        {
            USART_transmit_string("er");
    f83c:	81 e9       	ldi	r24, 0x91	; 145
    f83e:	92 e0       	ldi	r25, 0x02	; 2
    f840:	0e 94 55 79 	call	0xf2aa	; 0xf2aa <USART_transmit_string>
    f844:	2d cf       	rjmp	.-422    	; 0xf6a0 <__vector_20+0x76>
    f846:	e5 e5       	ldi	r30, 0x55	; 85
    f848:	f3 e0       	ldi	r31, 0x03	; 3
}


uint8_t USART_receive_byte(void)
{
    while (!(UCSR0A & (1<<RXC0)))
    f84a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
    f84e:	87 ff       	sbrs	r24, 7
    f850:	fc cf       	rjmp	.-8      	; 0xf84a <__vector_20+0x220>
    ;   
    
    return UDR0;												
    f852:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    
    else if (header == usart_update_message)               // if incoming data is an update handshake 
    {  
        for(int i = 0; i < 5; ++i)
        {
            update_array[i] = USART_receive_byte();        //read handshake call, if correct: response will be sent from main loop    
    f856:	81 93       	st	Z+, r24
            flash_flag = 1; 
    }    
    
    else if (header == usart_update_message)               // if incoming data is an update handshake 
    {  
        for(int i = 0; i < 5; ++i)
    f858:	83 e0       	ldi	r24, 0x03	; 3
    f85a:	ea 35       	cpi	r30, 0x5A	; 90
    f85c:	f8 07       	cpc	r31, r24
    f85e:	a9 f7       	brne	.-22     	; 0xf84a <__vector_20+0x220>
    f860:	1f cf       	rjmp	.-450    	; 0xf6a0 <__vector_20+0x76>
            
            uint8_t checksum_calculated =  ~(vec_sum & 0x00ff ) + 0x01;	        // actual checksum calculation
        
            if(checksum_calculated == checksum_from_file )                      // compare checksums
            {	                    
                checksum_status = is_ok;                                        // set boolean flag for error handling
    f862:	81 e0       	ldi	r24, 0x01	; 1
    f864:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <checksum_status>
                
                for(int i = 0; i < data_section_size; ++i)                      //if checksum is ok, write data-section to SRAM
    f868:	11 23       	and	r17, r17
    f86a:	d1 f1       	breq	.+116    	; 0xf8e0 <__vector_20+0x2b6>
    f86c:	e1 2e       	mov	r14, r17
    f86e:	f1 2c       	mov	r15, r1
    f870:	84 e0       	ldi	r24, 0x04	; 4
    f872:	e8 0e       	add	r14, r24
    f874:	f1 1c       	adc	r15, r1
    f876:	04 e0       	ldi	r16, 0x04	; 4
    f878:	10 e0       	ldi	r17, 0x00	; 0
    f87a:	e8 01       	movw	r28, r16
    f87c:	cb 5e       	subi	r28, 0xEB	; 235
    f87e:	dc 4f       	sbci	r29, 0xFC	; 252
                {	 
                    do{
                        SPI_SRAM_ByteWrite(address, hex_buffer_array[ i + 4 ]);	
    f880:	48 81       	ld	r20, Y
    f882:	60 91 6c 03 	lds	r22, 0x036C	; 0x80036c <address>
    f886:	70 91 6d 03 	lds	r23, 0x036D	; 0x80036d <address+0x1>
    f88a:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <address+0x2>
    f88e:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <address+0x3>
    f892:	0e 94 df 78 	call	0xf1be	; 0xf1be <SPI_SRAM_ByteWrite>
                    
                    }while(SPI_SRAM_ByteRead(address) !=  hex_buffer_array[ i + 4 ]);  //additional safety-guard: write to address and read content back. if this doesn't work, sram is probably broken
    f896:	60 91 6c 03 	lds	r22, 0x036C	; 0x80036c <address>
    f89a:	70 91 6d 03 	lds	r23, 0x036D	; 0x80036d <address+0x1>
    f89e:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <address+0x2>
    f8a2:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <address+0x3>
    f8a6:	0e 94 0a 79 	call	0xf214	; 0xf214 <SPI_SRAM_ByteRead>
    f8aa:	98 81       	ld	r25, Y
    f8ac:	89 13       	cpse	r24, r25
    f8ae:	e8 cf       	rjmp	.-48     	; 0xf880 <__vector_20+0x256>
                
                    ++address;	
    f8b0:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <address>
    f8b4:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <address+0x1>
    f8b8:	a0 91 6e 03 	lds	r26, 0x036E	; 0x80036e <address+0x2>
    f8bc:	b0 91 6f 03 	lds	r27, 0x036F	; 0x80036f <address+0x3>
    f8c0:	01 96       	adiw	r24, 0x01	; 1
    f8c2:	a1 1d       	adc	r26, r1
    f8c4:	b1 1d       	adc	r27, r1
    f8c6:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <address>
    f8ca:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <address+0x1>
    f8ce:	a0 93 6e 03 	sts	0x036E, r26	; 0x80036e <address+0x2>
    f8d2:	b0 93 6f 03 	sts	0x036F, r27	; 0x80036f <address+0x3>
    f8d6:	0f 5f       	subi	r16, 0xFF	; 255
    f8d8:	1f 4f       	sbci	r17, 0xFF	; 255
        
            if(checksum_calculated == checksum_from_file )                      // compare checksums
            {	                    
                checksum_status = is_ok;                                        // set boolean flag for error handling
                
                for(int i = 0; i < data_section_size; ++i)                      //if checksum is ok, write data-section to SRAM
    f8da:	e0 16       	cp	r14, r16
    f8dc:	f1 06       	cpc	r15, r17
    f8de:	69 f6       	brne	.-102    	; 0xf87a <__vector_20+0x250>
                    }while(SPI_SRAM_ByteRead(address) !=  hex_buffer_array[ i + 4 ]);  //additional safety-guard: write to address and read content back. if this doesn't work, sram is probably broken
                
                    ++address;	
                        
                }//end for
                USART_transmit_string("ok");                // confirm transmission: lordylink thread blocks until confirmation is either "ok" or "er". checksum "ok" => SRAM will be written, next record will be sent
    f8e0:	82 e6       	ldi	r24, 0x62	; 98
    f8e2:	92 e0       	ldi	r25, 0x02	; 2
    f8e4:	0e 94 55 79 	call	0xf2aa	; 0xf2aa <USART_transmit_string>
    f8e8:	db ce       	rjmp	.-586    	; 0xf6a0 <__vector_20+0x76>
            {
                hex_buffer_array[ i ] = USART_receive_byte();    
            }                
             
            //TRANSMISSION IS NOW COMPLETED AND STORED IN BUFFER
             switch(animation_ctr)  // display animation
    f8ea:	81 30       	cpi	r24, 0x01	; 1
    f8ec:	91 05       	cpc	r25, r1
    f8ee:	a1 05       	cpc	r26, r1
    f8f0:	b1 05       	cpc	r27, r1
    f8f2:	09 f4       	brne	.+2      	; 0xf8f6 <__vector_20+0x2cc>
    f8f4:	4d c0       	rjmp	.+154    	; 0xf990 <__vector_20+0x366>
    f8f6:	84 36       	cpi	r24, 0x64	; 100
    f8f8:	91 05       	cpc	r25, r1
    f8fa:	a1 05       	cpc	r26, r1
    f8fc:	b1 05       	cpc	r27, r1
    f8fe:	09 f0       	breq	.+2      	; 0xf902 <__vector_20+0x2d8>
    f900:	4c cf       	rjmp	.-360    	; 0xf79a <__vector_20+0x170>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    f902:	80 ec       	ldi	r24, 0xC0	; 192
    f904:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    
    LCD_Print(str);
    f908:	8e e1       	ldi	r24, 0x1E	; 30
    f90a:	92 e0       	ldi	r25, 0x02	; 2
    f90c:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
    f910:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <animation_ctr>
    f914:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <animation_ctr+0x1>
    f918:	a0 91 11 03 	lds	r26, 0x0311	; 0x800311 <animation_ctr+0x2>
    f91c:	b0 91 12 03 	lds	r27, 0x0312	; 0x800312 <animation_ctr+0x3>
    f920:	01 96       	adiw	r24, 0x01	; 1
    f922:	a1 1d       	adc	r26, r1
    f924:	b1 1d       	adc	r27, r1
    f926:	3c cf       	rjmp	.-392    	; 0xf7a0 <__vector_20+0x176>
            USART_transmit_string("er");
        }            
    }
    else if(header == usart_request_data_dump)
    { 
            sram_address = 0;
    f928:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <sram_address>
    f92c:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <sram_address+0x1>
    f930:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <sram_address+0x2>
    f934:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <sram_address+0x3>
            send_sram_flag = 1;
    f938:	81 e0       	ldi	r24, 0x01	; 1
    f93a:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <send_sram_flag>
    f93e:	b0 ce       	rjmp	.-672    	; 0xf6a0 <__vector_20+0x76>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    f940:	80 ec       	ldi	r24, 0xC0	; 192
    f942:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    
    LCD_Print(str);
    f946:	8f e2       	ldi	r24, 0x2F	; 47
    f948:	92 e0       	ldi	r25, 0x02	; 2
    f94a:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
    f94e:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <animation_ctr>
    f952:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <animation_ctr+0x1>
    f956:	a0 91 11 03 	lds	r26, 0x0311	; 0x800311 <animation_ctr+0x2>
    f95a:	b0 91 12 03 	lds	r27, 0x0312	; 0x800312 <animation_ctr+0x3>
    f95e:	01 96       	adiw	r24, 0x01	; 1
    f960:	a1 1d       	adc	r26, r1
    f962:	b1 1d       	adc	r27, r1
    f964:	1d cf       	rjmp	.-454    	; 0xf7a0 <__vector_20+0x176>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    f966:	80 ec       	ldi	r24, 0xC0	; 192
    f968:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    
    LCD_Print(str);
    f96c:	80 e4       	ldi	r24, 0x40	; 64
    f96e:	92 e0       	ldi	r25, 0x02	; 2
    f970:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
    f974:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <animation_ctr>
    f978:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <animation_ctr+0x1>
    f97c:	a0 91 11 03 	lds	r26, 0x0311	; 0x800311 <animation_ctr+0x2>
    f980:	b0 91 12 03 	lds	r27, 0x0312	; 0x800312 <animation_ctr+0x3>
    f984:	0a cf       	rjmp	.-492    	; 0xf79a <__vector_20+0x170>
            {
                hex_buffer_array[ i ] = USART_receive_byte();    
            }                
             
            //TRANSMISSION IS NOW COMPLETED AND STORED IN BUFFER
             switch(animation_ctr)  // display animation
    f986:	81 e0       	ldi	r24, 0x01	; 1
    f988:	90 e0       	ldi	r25, 0x00	; 0
    f98a:	a0 e0       	ldi	r26, 0x00	; 0
    f98c:	b0 e0       	ldi	r27, 0x00	; 0
    f98e:	08 cf       	rjmp	.-496    	; 0xf7a0 <__vector_20+0x176>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    f990:	80 e8       	ldi	r24, 0x80	; 128
    f992:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    
    LCD_Print(str);
    f996:	8e ef       	ldi	r24, 0xFE	; 254
    f998:	91 e0       	ldi	r25, 0x01	; 1
    f99a:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    f99e:	80 ec       	ldi	r24, 0xC0	; 192
    f9a0:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    
    LCD_Print(str);
    f9a4:	8d e0       	ldi	r24, 0x0D	; 13
    f9a6:	92 e0       	ldi	r25, 0x02	; 2
    f9a8:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
    f9ac:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <animation_ctr>
    f9b0:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <animation_ctr+0x1>
    f9b4:	a0 91 11 03 	lds	r26, 0x0311	; 0x800311 <animation_ctr+0x2>
    f9b8:	b0 91 12 03 	lds	r27, 0x0312	; 0x800312 <animation_ctr+0x3>
    f9bc:	01 96       	adiw	r24, 0x01	; 1
    f9be:	a1 1d       	adc	r26, r1
    f9c0:	b1 1d       	adc	r27, r1
    f9c2:	ee ce       	rjmp	.-548    	; 0xf7a0 <__vector_20+0x176>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    f9c4:	80 ec       	ldi	r24, 0xC0	; 192
    f9c6:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    
    LCD_Print(str);
    f9ca:	81 e5       	ldi	r24, 0x51	; 81
    f9cc:	92 e0       	ldi	r25, 0x02	; 2
    f9ce:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
    f9d2:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <animation_ctr>
    f9d6:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <animation_ctr+0x1>
    f9da:	a0 91 11 03 	lds	r26, 0x0311	; 0x800311 <animation_ctr+0x2>
    f9de:	b0 91 12 03 	lds	r27, 0x0312	; 0x800312 <animation_ctr+0x3>
    f9e2:	01 96       	adiw	r24, 0x01	; 1
    f9e4:	a1 1d       	adc	r26, r1
    f9e6:	b1 1d       	adc	r27, r1
    f9e8:	db ce       	rjmp	.-586    	; 0xf7a0 <__vector_20+0x176>
    _delay_ms(2);
}

void LCD_Clear()
{
    LCD_Action (0x01);		//Clear LCD
    f9ea:	81 e0       	ldi	r24, 0x01	; 1
    f9ec:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    f9f0:	95 e8       	ldi	r25, 0x85	; 133
    f9f2:	9a 95       	dec	r25
    f9f4:	f1 f7       	brne	.-4      	; 0xf9f2 <__vector_20+0x3c8>
    f9f6:	00 00       	nop
    _delay_us(20);
    LCD_Action (0x80);		//Move to Position Line 1, Position 1
    f9f8:	80 e8       	ldi	r24, 0x80	; 128
    f9fa:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    f9fe:	80 e8       	ldi	r24, 0x80	; 128
    fa00:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    
    LCD_Print(str);
    fa04:	84 e9       	ldi	r24, 0x94	; 148
    fa06:	92 e0       	ldi	r25, 0x02	; 2
    fa08:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    fa0c:	80 ec       	ldi	r24, 0xC0	; 192
    fa0e:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    
    LCD_Print(str);
    fa12:	8a ea       	ldi	r24, 0xAA	; 170
    fa14:	92 e0       	ldi	r25, 0x02	; 2
    fa16:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    fa1a:	2f e7       	ldi	r18, 0x7F	; 127
    fa1c:	89 eb       	ldi	r24, 0xB9	; 185
    fa1e:	9a e2       	ldi	r25, 0x2A	; 42
    fa20:	21 50       	subi	r18, 0x01	; 1
    fa22:	80 40       	sbci	r24, 0x00	; 0
    fa24:	90 40       	sbci	r25, 0x00	; 0
    fa26:	e1 f7       	brne	.-8      	; 0xfa20 <__vector_20+0x3f6>
    fa28:	00 c0       	rjmp	.+0      	; 0xfa2a <__vector_20+0x400>
    fa2a:	00 00       	nop
    _delay_ms(2);
}

void LCD_Clear()
{
    LCD_Action (0x01);		//Clear LCD
    fa2c:	81 e0       	ldi	r24, 0x01	; 1
    fa2e:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    fa32:	25 e8       	ldi	r18, 0x85	; 133
    fa34:	2a 95       	dec	r18
    fa36:	f1 f7       	brne	.-4      	; 0xfa34 <__vector_20+0x40a>
    fa38:	00 00       	nop
    _delay_us(20);
    LCD_Action (0x80);		//Move to Position Line 1, Position 1
    fa3a:	80 e8       	ldi	r24, 0x80	; 128
    fa3c:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    fa40:	80 e8       	ldi	r24, 0x80	; 128
    fa42:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    
    LCD_Print(str);
    fa46:	8e eb       	ldi	r24, 0xBE	; 190
    fa48:	92 e0       	ldi	r25, 0x02	; 2
    fa4a:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    fa4e:	80 ec       	ldi	r24, 0xC0	; 192
    fa50:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    
    LCD_Print(str);
    fa54:	84 ed       	ldi	r24, 0xD4	; 212
    fa56:	92 e0       	ldi	r25, 0x02	; 2
    fa58:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
            _delay_ms(700);
            
            LCD_Clear();
            LCD_Printpos(0,0, "burning flash        ");
            LCD_Printpos(1,0, "don't turn off         ");
            flash_flag = 1; 
    fa5c:	81 e0       	ldi	r24, 0x01	; 1
    fa5e:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <flash_flag>
    fa62:	1e ce       	rjmp	.-964    	; 0xf6a0 <__vector_20+0x76>
            //AND COMPARES IT TO THE CHECKSUM IN THE HEX-RECORD
            
            uint16_t vec_sum = 0;                                               //local helper variable for checksum calculation
            uint8_t checksum_from_file = hex_buffer_array[hex_record_size - 1]; //read checksum from file
        
            for(int i = 0; i < hex_record_size - 1; ++i)                        // accumulate record for checksum calculation
    fa64:	40 e0       	ldi	r20, 0x00	; 0
    fa66:	be ce       	rjmp	.-644    	; 0xf7e4 <__vector_20+0x1ba>

0000fa68 <strcmp>:
    fa68:	fb 01       	movw	r30, r22
    fa6a:	dc 01       	movw	r26, r24
    fa6c:	8d 91       	ld	r24, X+
    fa6e:	01 90       	ld	r0, Z+
    fa70:	80 19       	sub	r24, r0
    fa72:	01 10       	cpse	r0, r1
    fa74:	d9 f3       	breq	.-10     	; 0xfa6c <strcmp+0x4>
    fa76:	99 0b       	sbc	r25, r25
    fa78:	08 95       	ret

0000fa7a <_exit>:
    fa7a:	f8 94       	cli

0000fa7c <__stop_program>:
    fa7c:	ff cf       	rjmp	.-2      	; 0xfa7c <__stop_program>
