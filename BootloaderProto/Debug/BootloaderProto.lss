
BootloaderProto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000180  00800100  0000f95c  000009f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000095c  0000f000  0000f000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006c  00800280  00800280  00000b70  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ba0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d72  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a12  00000000  00000000  000029e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ae5  00000000  00000000  000033f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00003edc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000770  00000000  00000000  000040d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fea  00000000  00000000  00004848  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00005832  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000f000 <__vectors>:
    f000:	0c 94 3e 78 	jmp	0xf07c	; 0xf07c <__ctors_end>
    f004:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f008:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f00c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f010:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f014:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f018:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f01c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f020:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f024:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f028:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f02c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f030:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f034:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f038:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f03c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f040:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f044:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f048:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f04c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f050:	0c 94 c0 7a 	jmp	0xf580	; 0xf580 <__vector_20>
    f054:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f058:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f05c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f060:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f064:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f068:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f06c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f070:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f074:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f078:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>

0000f07c <__ctors_end>:
    f07c:	11 24       	eor	r1, r1
    f07e:	1f be       	out	0x3f, r1	; 63
    f080:	cf ef       	ldi	r28, 0xFF	; 255
    f082:	d0 e1       	ldi	r29, 0x10	; 16
    f084:	de bf       	out	0x3e, r29	; 62
    f086:	cd bf       	out	0x3d, r28	; 61

0000f088 <__do_copy_data>:
    f088:	12 e0       	ldi	r17, 0x02	; 2
    f08a:	a0 e0       	ldi	r26, 0x00	; 0
    f08c:	b1 e0       	ldi	r27, 0x01	; 1
    f08e:	ec e5       	ldi	r30, 0x5C	; 92
    f090:	f9 ef       	ldi	r31, 0xF9	; 249
    f092:	02 c0       	rjmp	.+4      	; 0xf098 <__do_copy_data+0x10>
    f094:	05 90       	lpm	r0, Z+
    f096:	0d 92       	st	X+, r0
    f098:	a0 38       	cpi	r26, 0x80	; 128
    f09a:	b1 07       	cpc	r27, r17
    f09c:	d9 f7       	brne	.-10     	; 0xf094 <__do_copy_data+0xc>

0000f09e <__do_clear_bss>:
    f09e:	22 e0       	ldi	r18, 0x02	; 2
    f0a0:	a0 e8       	ldi	r26, 0x80	; 128
    f0a2:	b2 e0       	ldi	r27, 0x02	; 2
    f0a4:	01 c0       	rjmp	.+2      	; 0xf0a8 <.do_clear_bss_start>

0000f0a6 <.do_clear_bss_loop>:
    f0a6:	1d 92       	st	X+, r1

0000f0a8 <.do_clear_bss_start>:
    f0a8:	ac 3e       	cpi	r26, 0xEC	; 236
    f0aa:	b2 07       	cpc	r27, r18
    f0ac:	e1 f7       	brne	.-8      	; 0xf0a6 <.do_clear_bss_loop>
    f0ae:	0e 94 15 7a 	call	0xf42a	; 0xf42a <main>
    f0b2:	0c 94 ac 7c 	jmp	0xf958	; 0xf958 <_exit>

0000f0b6 <__bad_interrupt>:
    f0b6:	0c 94 00 78 	jmp	0xf000	; 0xf000 <__vectors>

0000f0ba <LCD_Action>:
{
	while (!(UCSR0A & (1<<RXC0)))
	;   
	
	return UDR0;												
}
    f0ba:	98 b1       	in	r25, 0x08	; 8
    f0bc:	9f 70       	andi	r25, 0x0F	; 15
    f0be:	28 2f       	mov	r18, r24
    f0c0:	20 7f       	andi	r18, 0xF0	; 240
    f0c2:	92 2b       	or	r25, r18
    f0c4:	98 b9       	out	0x08, r25	; 8
    f0c6:	42 98       	cbi	0x08, 2	; 8
    f0c8:	43 9a       	sbi	0x08, 3	; 8
    f0ca:	36 e0       	ldi	r19, 0x06	; 6
    f0cc:	3a 95       	dec	r19
    f0ce:	f1 f7       	brne	.-4      	; 0xf0cc <LCD_Action+0x12>
    f0d0:	00 c0       	rjmp	.+0      	; 0xf0d2 <LCD_Action+0x18>
    f0d2:	43 98       	cbi	0x08, 3	; 8
    f0d4:	9d e0       	ldi	r25, 0x0D	; 13
    f0d6:	9a 95       	dec	r25
    f0d8:	f1 f7       	brne	.-4      	; 0xf0d6 <LCD_Action+0x1c>
    f0da:	00 00       	nop
    f0dc:	28 b1       	in	r18, 0x08	; 8
    f0de:	2f 70       	andi	r18, 0x0F	; 15
    f0e0:	30 e1       	ldi	r19, 0x10	; 16
    f0e2:	83 9f       	mul	r24, r19
    f0e4:	c0 01       	movw	r24, r0
    f0e6:	11 24       	eor	r1, r1
    f0e8:	82 2b       	or	r24, r18
    f0ea:	88 b9       	out	0x08, r24	; 8
    f0ec:	43 9a       	sbi	0x08, 3	; 8
    f0ee:	86 e0       	ldi	r24, 0x06	; 6
    f0f0:	8a 95       	dec	r24
    f0f2:	f1 f7       	brne	.-4      	; 0xf0f0 <LCD_Action+0x36>
    f0f4:	00 c0       	rjmp	.+0      	; 0xf0f6 <LCD_Action+0x3c>
    f0f6:	43 98       	cbi	0x08, 3	; 8
    f0f8:	8f e0       	ldi	r24, 0x0F	; 15
    f0fa:	97 e2       	ldi	r25, 0x27	; 39
    f0fc:	01 97       	sbiw	r24, 0x01	; 1
    f0fe:	f1 f7       	brne	.-4      	; 0xf0fc <LCD_Action+0x42>
    f100:	00 c0       	rjmp	.+0      	; 0xf102 <LCD_Action+0x48>
    f102:	00 00       	nop
    f104:	08 95       	ret

0000f106 <LCD_Init>:
    f106:	2f e5       	ldi	r18, 0x5F	; 95
    f108:	8a ee       	ldi	r24, 0xEA	; 234
    f10a:	90 e0       	ldi	r25, 0x00	; 0
    f10c:	21 50       	subi	r18, 0x01	; 1
    f10e:	80 40       	sbci	r24, 0x00	; 0
    f110:	90 40       	sbci	r25, 0x00	; 0
    f112:	e1 f7       	brne	.-8      	; 0xf10c <LCD_Init+0x6>
    f114:	00 c0       	rjmp	.+0      	; 0xf116 <LCD_Init+0x10>
    f116:	00 00       	nop
    f118:	82 e0       	ldi	r24, 0x02	; 2
    f11a:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    f11e:	88 e2       	ldi	r24, 0x28	; 40
    f120:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    f124:	8c e0       	ldi	r24, 0x0C	; 12
    f126:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    f12a:	86 e0       	ldi	r24, 0x06	; 6
    f12c:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    f130:	81 e0       	ldi	r24, 0x01	; 1
    f132:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    f136:	8f e0       	ldi	r24, 0x0F	; 15
    f138:	97 e2       	ldi	r25, 0x27	; 39
    f13a:	01 97       	sbiw	r24, 0x01	; 1
    f13c:	f1 f7       	brne	.-4      	; 0xf13a <LCD_Init+0x34>
    f13e:	00 c0       	rjmp	.+0      	; 0xf140 <LCD_Init+0x3a>
    f140:	00 00       	nop
    f142:	08 95       	ret

0000f144 <LCD_Print>:
    f144:	fc 01       	movw	r30, r24
    f146:	90 81       	ld	r25, Z
    f148:	99 23       	and	r25, r25
    f14a:	49 f1       	breq	.+82     	; 0xf19e <LCD_Print+0x5a>
    f14c:	28 b1       	in	r18, 0x08	; 8
    f14e:	2f 70       	andi	r18, 0x0F	; 15
    f150:	90 7f       	andi	r25, 0xF0	; 240
    f152:	92 2b       	or	r25, r18
    f154:	98 b9       	out	0x08, r25	; 8
    f156:	42 9a       	sbi	0x08, 2	; 8
    f158:	43 9a       	sbi	0x08, 3	; 8
    f15a:	82 e4       	ldi	r24, 0x42	; 66
    f15c:	8a 95       	dec	r24
    f15e:	f1 f7       	brne	.-4      	; 0xf15c <LCD_Print+0x18>
    f160:	00 c0       	rjmp	.+0      	; 0xf162 <LCD_Print+0x1e>
    f162:	43 98       	cbi	0x08, 3	; 8
    f164:	95 e8       	ldi	r25, 0x85	; 133
    f166:	9a 95       	dec	r25
    f168:	f1 f7       	brne	.-4      	; 0xf166 <LCD_Print+0x22>
    f16a:	00 00       	nop
    f16c:	48 b1       	in	r20, 0x08	; 8
    f16e:	91 91       	ld	r25, Z+
    f170:	80 e1       	ldi	r24, 0x10	; 16
    f172:	98 9f       	mul	r25, r24
    f174:	90 01       	movw	r18, r0
    f176:	11 24       	eor	r1, r1
    f178:	94 2f       	mov	r25, r20
    f17a:	9f 70       	andi	r25, 0x0F	; 15
    f17c:	29 2b       	or	r18, r25
    f17e:	28 b9       	out	0x08, r18	; 8
    f180:	43 9a       	sbi	0x08, 3	; 8
    f182:	92 e4       	ldi	r25, 0x42	; 66
    f184:	9a 95       	dec	r25
    f186:	f1 f7       	brne	.-4      	; 0xf184 <LCD_Print+0x40>
    f188:	00 c0       	rjmp	.+0      	; 0xf18a <LCD_Print+0x46>
    f18a:	43 98       	cbi	0x08, 3	; 8
    f18c:	89 ef       	ldi	r24, 0xF9	; 249
    f18e:	90 e0       	ldi	r25, 0x00	; 0
    f190:	01 97       	sbiw	r24, 0x01	; 1
    f192:	f1 f7       	brne	.-4      	; 0xf190 <LCD_Print+0x4c>
    f194:	00 c0       	rjmp	.+0      	; 0xf196 <LCD_Print+0x52>
    f196:	00 00       	nop
    f198:	90 81       	ld	r25, Z
    f19a:	91 11       	cpse	r25, r1
    f19c:	d7 cf       	rjmp	.-82     	; 0xf14c <LCD_Print+0x8>
    f19e:	08 95       	ret

0000f1a0 <SPI_MasterInit>:
    f1a0:	8c b5       	in	r24, 0x2c	; 44
    f1a2:	8d 65       	ori	r24, 0x5D	; 93
    f1a4:	8c bd       	out	0x2c, r24	; 44
    f1a6:	8c b5       	in	r24, 0x2c	; 44
    f1a8:	83 60       	ori	r24, 0x03	; 3
    f1aa:	8c bd       	out	0x2c, r24	; 44
    f1ac:	8c b5       	in	r24, 0x2c	; 44
    f1ae:	8f 7d       	andi	r24, 0xDF	; 223
    f1b0:	8c bd       	out	0x2c, r24	; 44
    f1b2:	8c b5       	in	r24, 0x2c	; 44
    f1b4:	8f 77       	andi	r24, 0x7F	; 127
    f1b6:	8c bd       	out	0x2c, r24	; 44
    f1b8:	2c 9a       	sbi	0x05, 4	; 5
    f1ba:	2b 9a       	sbi	0x05, 3	; 5
    f1bc:	08 95       	ret

0000f1be <SPI_SRAM_ByteWrite>:
    f1be:	cf 92       	push	r12
    f1c0:	df 92       	push	r13
    f1c2:	ef 92       	push	r14
    f1c4:	ff 92       	push	r15
    f1c6:	0f 93       	push	r16
    f1c8:	1f 93       	push	r17
    f1ca:	6c 01       	movw	r12, r24
    f1cc:	ee 24       	eor	r14, r14
    f1ce:	ff 24       	eor	r15, r15
    f1d0:	07 2f       	mov	r16, r23
    f1d2:	18 2f       	mov	r17, r24
    f1d4:	29 2f       	mov	r18, r25
    f1d6:	33 27       	eor	r19, r19
    f1d8:	29 98       	cbi	0x05, 1	; 5
    f1da:	52 e0       	ldi	r21, 0x02	; 2
    f1dc:	5e bd       	out	0x2e, r21	; 46
    f1de:	0d b4       	in	r0, 0x2d	; 45
    f1e0:	07 fe       	sbrs	r0, 7
    f1e2:	fd cf       	rjmp	.-6      	; 0xf1de <SPI_SRAM_ByteWrite+0x20>
    f1e4:	ce bc       	out	0x2e, r12	; 46
    f1e6:	0d b4       	in	r0, 0x2d	; 45
    f1e8:	07 fe       	sbrs	r0, 7
    f1ea:	fd cf       	rjmp	.-6      	; 0xf1e6 <SPI_SRAM_ByteWrite+0x28>
    f1ec:	0e bd       	out	0x2e, r16	; 46
    f1ee:	0d b4       	in	r0, 0x2d	; 45
    f1f0:	07 fe       	sbrs	r0, 7
    f1f2:	fd cf       	rjmp	.-6      	; 0xf1ee <SPI_SRAM_ByteWrite+0x30>
    f1f4:	6e bd       	out	0x2e, r22	; 46
    f1f6:	0d b4       	in	r0, 0x2d	; 45
    f1f8:	07 fe       	sbrs	r0, 7
    f1fa:	fd cf       	rjmp	.-6      	; 0xf1f6 <SPI_SRAM_ByteWrite+0x38>
    f1fc:	4e bd       	out	0x2e, r20	; 46
    f1fe:	0d b4       	in	r0, 0x2d	; 45
    f200:	07 fe       	sbrs	r0, 7
    f202:	fd cf       	rjmp	.-6      	; 0xf1fe <SPI_SRAM_ByteWrite+0x40>
    f204:	29 9a       	sbi	0x05, 1	; 5
    f206:	1f 91       	pop	r17
    f208:	0f 91       	pop	r16
    f20a:	ff 90       	pop	r15
    f20c:	ef 90       	pop	r14
    f20e:	df 90       	pop	r13
    f210:	cf 90       	pop	r12
    f212:	08 95       	ret

0000f214 <SPI_SRAM_ByteRead>:
    f214:	cf 92       	push	r12
    f216:	df 92       	push	r13
    f218:	ef 92       	push	r14
    f21a:	ff 92       	push	r15
    f21c:	0f 93       	push	r16
    f21e:	1f 93       	push	r17
    f220:	6c 01       	movw	r12, r24
    f222:	ee 24       	eor	r14, r14
    f224:	ff 24       	eor	r15, r15
    f226:	07 2f       	mov	r16, r23
    f228:	18 2f       	mov	r17, r24
    f22a:	29 2f       	mov	r18, r25
    f22c:	33 27       	eor	r19, r19
    f22e:	29 98       	cbi	0x05, 1	; 5
    f230:	43 e0       	ldi	r20, 0x03	; 3
    f232:	4e bd       	out	0x2e, r20	; 46
    f234:	0d b4       	in	r0, 0x2d	; 45
    f236:	07 fe       	sbrs	r0, 7
    f238:	fd cf       	rjmp	.-6      	; 0xf234 <SPI_SRAM_ByteRead+0x20>
    f23a:	ce bc       	out	0x2e, r12	; 46
    f23c:	0d b4       	in	r0, 0x2d	; 45
    f23e:	07 fe       	sbrs	r0, 7
    f240:	fd cf       	rjmp	.-6      	; 0xf23c <SPI_SRAM_ByteRead+0x28>
    f242:	0e bd       	out	0x2e, r16	; 46
    f244:	0d b4       	in	r0, 0x2d	; 45
    f246:	07 fe       	sbrs	r0, 7
    f248:	fd cf       	rjmp	.-6      	; 0xf244 <SPI_SRAM_ByteRead+0x30>
    f24a:	6e bd       	out	0x2e, r22	; 46
    f24c:	0d b4       	in	r0, 0x2d	; 45
    f24e:	07 fe       	sbrs	r0, 7
    f250:	fd cf       	rjmp	.-6      	; 0xf24c <SPI_SRAM_ByteRead+0x38>
    f252:	8f ef       	ldi	r24, 0xFF	; 255
    f254:	8e bd       	out	0x2e, r24	; 46
    f256:	0d b4       	in	r0, 0x2d	; 45
    f258:	07 fe       	sbrs	r0, 7
    f25a:	fd cf       	rjmp	.-6      	; 0xf256 <SPI_SRAM_ByteRead+0x42>
    f25c:	8e b5       	in	r24, 0x2e	; 46
    f25e:	29 9a       	sbi	0x05, 1	; 5
    f260:	1f 91       	pop	r17
    f262:	0f 91       	pop	r16
    f264:	ff 90       	pop	r15
    f266:	ef 90       	pop	r14
    f268:	df 90       	pop	r13
    f26a:	cf 90       	pop	r12
    f26c:	08 95       	ret

0000f26e <USART_Init>:
    f26e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    f272:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    f276:	e1 ec       	ldi	r30, 0xC1	; 193
    f278:	f0 e0       	ldi	r31, 0x00	; 0
    f27a:	80 81       	ld	r24, Z
    f27c:	88 60       	ori	r24, 0x08	; 8
    f27e:	80 83       	st	Z, r24
    f280:	80 81       	ld	r24, Z
    f282:	80 61       	ori	r24, 0x10	; 16
    f284:	80 83       	st	Z, r24
    f286:	80 81       	ld	r24, Z
    f288:	80 68       	ori	r24, 0x80	; 128
    f28a:	80 83       	st	Z, r24
    f28c:	a0 ec       	ldi	r26, 0xC0	; 192
    f28e:	b0 e0       	ldi	r27, 0x00	; 0
    f290:	8c 91       	ld	r24, X
    f292:	80 68       	ori	r24, 0x80	; 128
    f294:	8c 93       	st	X, r24
    f296:	8e e0       	ldi	r24, 0x0E	; 14
    f298:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    f29c:	80 81       	ld	r24, Z
    f29e:	80 69       	ori	r24, 0x90	; 144
    f2a0:	80 83       	st	Z, r24
    f2a2:	83 b7       	in	r24, 0x33	; 51
    f2a4:	81 7f       	andi	r24, 0xF1	; 241
    f2a6:	83 bf       	out	0x33, r24	; 51
    f2a8:	08 95       	ret

0000f2aa <USART_transmit_string>:
    f2aa:	dc 01       	movw	r26, r24
    f2ac:	80 e0       	ldi	r24, 0x00	; 0
    f2ae:	28 2f       	mov	r18, r24
    f2b0:	30 e0       	ldi	r19, 0x00	; 0
    f2b2:	fd 01       	movw	r30, r26
    f2b4:	01 90       	ld	r0, Z+
    f2b6:	00 20       	and	r0, r0
    f2b8:	e9 f7       	brne	.-6      	; 0xf2b4 <USART_transmit_string+0xa>
    f2ba:	31 97       	sbiw	r30, 0x01	; 1
    f2bc:	ea 1b       	sub	r30, r26
    f2be:	fb 0b       	sbc	r31, r27
    f2c0:	2e 17       	cp	r18, r30
    f2c2:	3f 07       	cpc	r19, r31
    f2c4:	61 f0       	breq	.+24     	; 0xf2de <USART_transmit_string+0x34>
    f2c6:	fd 01       	movw	r30, r26
    f2c8:	e2 0f       	add	r30, r18
    f2ca:	f3 1f       	adc	r31, r19
    f2cc:	20 81       	ld	r18, Z
    f2ce:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
    f2d2:	95 ff       	sbrs	r25, 5
    f2d4:	fc cf       	rjmp	.-8      	; 0xf2ce <USART_transmit_string+0x24>
    f2d6:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    f2da:	8f 5f       	subi	r24, 0xFF	; 255
    f2dc:	e8 cf       	rjmp	.-48     	; 0xf2ae <USART_transmit_string+0x4>
    f2de:	08 95       	ret

0000f2e0 <write_firmware_to_flash>:
void (*start)( void ) = 0x0000;  //jump to main app


//if all checksums are correct, this is called to copy the firmware from sram to boot section
void write_firmware_to_flash()
{
    f2e0:	6f 92       	push	r6
    f2e2:	7f 92       	push	r7
    f2e4:	8f 92       	push	r8
    f2e6:	9f 92       	push	r9
    f2e8:	af 92       	push	r10
    f2ea:	bf 92       	push	r11
    f2ec:	cf 92       	push	r12
    f2ee:	df 92       	push	r13
    f2f0:	ef 92       	push	r14
    f2f2:	ff 92       	push	r15
    f2f4:	0f 93       	push	r16
    f2f6:	1f 93       	push	r17
    f2f8:	cf 93       	push	r28
    f2fa:	df 93       	push	r29
	
	uint32_t sram_address = 0;
	uint32_t flash_address = 0;
    const uint32_t app_section_eof = 61440; //next address is bootloader-section!!!
	cli();
    f2fc:	f8 94       	cli
	 boot_rww_enable();
    f2fe:	81 e1       	ldi	r24, 0x11	; 17
    f300:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f0057>
    f304:	e8 95       	spm
//if all checksums are correct, this is called to copy the firmware from sram to boot section
void write_firmware_to_flash()
{
	
	uint32_t sram_address = 0;
	uint32_t flash_address = 0;
    f306:	c1 2c       	mov	r12, r1
    f308:	d1 2c       	mov	r13, r1
    f30a:	76 01       	movw	r14, r12
	cli();
	 boot_rww_enable();
     
    while(sram_address < app_section_eof ){  //write complete app section
		
		boot_page_erase_safe(sram_address) ; //AVR-MACROS, not functions
    f30c:	03 e0       	ldi	r16, 0x03	; 3
		
		for(int i = 0; i < 128; ++i){
			uint16_t lsb =  SPI_SRAM_ByteRead(sram_address);  //read 2 bytes from sram
			uint8_t msb =  SPI_SRAM_ByteRead(sram_address + 1 );
			uint16_t data = (msb << 8)  | lsb;      //mask into 16bit int
			boot_page_fill_safe(sram_address, data); //fill boot page
    f30e:	d1 e0       	ldi	r29, 0x01	; 1
			sram_address += 2;
		}
		
		boot_page_write_safe(flash_address);  //write page
    f310:	15 e0       	ldi	r17, 0x05	; 5
	cli();
	 boot_rww_enable();
     
    while(sram_address < app_section_eof ){  //write complete app section
		
		boot_page_erase_safe(sram_address) ; //AVR-MACROS, not functions
    f312:	07 b6       	in	r0, 0x37	; 55
    f314:	00 fc       	sbrc	r0, 0
    f316:	fd cf       	rjmp	.-6      	; 0xf312 <write_firmware_to_flash+0x32>
    f318:	f9 99       	sbic	0x1f, 1	; 31
    f31a:	fe cf       	rjmp	.-4      	; 0xf318 <write_firmware_to_flash+0x38>
    f31c:	36 01       	movw	r6, r12
    f31e:	f6 01       	movw	r30, r12
    f320:	00 93 57 00 	sts	0x0057, r16	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f0057>
    f324:	e8 95       	spm
		boot_spm_busy_wait();  
    f326:	07 b6       	in	r0, 0x37	; 55
    f328:	00 fc       	sbrc	r0, 0
    f32a:	fd cf       	rjmp	.-6      	; 0xf326 <write_firmware_to_flash+0x46>
    f32c:	46 01       	movw	r8, r12
    f32e:	57 01       	movw	r10, r14
    f330:	ff ef       	ldi	r31, 0xFF	; 255
    f332:	9f 1a       	sub	r9, r31
    f334:	af 0a       	sbc	r10, r31
    f336:	bf 0a       	sbc	r11, r31
		
		for(int i = 0; i < 128; ++i){
			uint16_t lsb =  SPI_SRAM_ByteRead(sram_address);  //read 2 bytes from sram
    f338:	c7 01       	movw	r24, r14
    f33a:	b6 01       	movw	r22, r12
    f33c:	0e 94 0a 79 	call	0xf214	; 0xf214 <SPI_SRAM_ByteRead>
    f340:	c8 2f       	mov	r28, r24
			uint8_t msb =  SPI_SRAM_ByteRead(sram_address + 1 );
    f342:	c7 01       	movw	r24, r14
    f344:	b6 01       	movw	r22, r12
    f346:	6f 5f       	subi	r22, 0xFF	; 255
    f348:	7f 4f       	sbci	r23, 0xFF	; 255
    f34a:	8f 4f       	sbci	r24, 0xFF	; 255
    f34c:	9f 4f       	sbci	r25, 0xFF	; 255
    f34e:	0e 94 0a 79 	call	0xf214	; 0xf214 <SPI_SRAM_ByteRead>
			uint16_t data = (msb << 8)  | lsb;      //mask into 16bit int
    f352:	2c 2f       	mov	r18, r28
    f354:	30 e0       	ldi	r19, 0x00	; 0
    f356:	a9 01       	movw	r20, r18
    f358:	58 2b       	or	r21, r24
    f35a:	ca 01       	movw	r24, r20
			boot_page_fill_safe(sram_address, data); //fill boot page
    f35c:	07 b6       	in	r0, 0x37	; 55
    f35e:	00 fc       	sbrc	r0, 0
    f360:	fd cf       	rjmp	.-6      	; 0xf35c <write_firmware_to_flash+0x7c>
    f362:	f9 99       	sbic	0x1f, 1	; 31
    f364:	fe cf       	rjmp	.-4      	; 0xf362 <write_firmware_to_flash+0x82>
    f366:	f6 01       	movw	r30, r12
    f368:	0c 01       	movw	r0, r24
    f36a:	d0 93 57 00 	sts	0x0057, r29	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f0057>
    f36e:	e8 95       	spm
    f370:	11 24       	eor	r1, r1
			sram_address += 2;
    f372:	f2 e0       	ldi	r31, 0x02	; 2
    f374:	cf 0e       	add	r12, r31
    f376:	d1 1c       	adc	r13, r1
    f378:	e1 1c       	adc	r14, r1
    f37a:	f1 1c       	adc	r15, r1
    while(sram_address < app_section_eof ){  //write complete app section
		
		boot_page_erase_safe(sram_address) ; //AVR-MACROS, not functions
		boot_spm_busy_wait();  
		
		for(int i = 0; i < 128; ++i){
    f37c:	8c 14       	cp	r8, r12
    f37e:	9d 04       	cpc	r9, r13
    f380:	ae 04       	cpc	r10, r14
    f382:	bf 04       	cpc	r11, r15
    f384:	c9 f6       	brne	.-78     	; 0xf338 <write_firmware_to_flash+0x58>
			uint16_t data = (msb << 8)  | lsb;      //mask into 16bit int
			boot_page_fill_safe(sram_address, data); //fill boot page
			sram_address += 2;
		}
		
		boot_page_write_safe(flash_address);  //write page
    f386:	07 b6       	in	r0, 0x37	; 55
    f388:	00 fc       	sbrc	r0, 0
    f38a:	fd cf       	rjmp	.-6      	; 0xf386 <write_firmware_to_flash+0xa6>
    f38c:	f9 99       	sbic	0x1f, 1	; 31
    f38e:	fe cf       	rjmp	.-4      	; 0xf38c <write_firmware_to_flash+0xac>
    f390:	f3 01       	movw	r30, r6
    f392:	10 93 57 00 	sts	0x0057, r17	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f0057>
    f396:	e8 95       	spm
		boot_spm_busy_wait();  
    f398:	07 b6       	in	r0, 0x37	; 55
    f39a:	00 fc       	sbrc	r0, 0
    f39c:	fd cf       	rjmp	.-6      	; 0xf398 <write_firmware_to_flash+0xb8>
	uint32_t flash_address = 0;
    const uint32_t app_section_eof = 61440; //next address is bootloader-section!!!
	cli();
	 boot_rww_enable();
     
    while(sram_address < app_section_eof ){  //write complete app section
    f39e:	81 14       	cp	r8, r1
    f3a0:	f0 ef       	ldi	r31, 0xF0	; 240
    f3a2:	9f 06       	cpc	r9, r31
    f3a4:	a1 04       	cpc	r10, r1
    f3a6:	b1 04       	cpc	r11, r1
    f3a8:	19 f0       	breq	.+6      	; 0xf3b0 <write_firmware_to_flash+0xd0>
    f3aa:	75 01       	movw	r14, r10
    f3ac:	64 01       	movw	r12, r8
    f3ae:	b1 cf       	rjmp	.-158    	; 0xf312 <write_firmware_to_flash+0x32>
		boot_spm_busy_wait();  
			
		flash_address += 256;   //go to next page address
	}
	
	boot_rww_enable ();
    f3b0:	81 e1       	ldi	r24, 0x11	; 17
    f3b2:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f0057>
    f3b6:	e8 95       	spm
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    f3b8:	2f e7       	ldi	r18, 0x7F	; 127
    f3ba:	4a e1       	ldi	r20, 0x1A	; 26
    f3bc:	56 e0       	ldi	r21, 0x06	; 6
    f3be:	21 50       	subi	r18, 0x01	; 1
    f3c0:	40 40       	sbci	r20, 0x00	; 0
    f3c2:	50 40       	sbci	r21, 0x00	; 0
    f3c4:	e1 f7       	brne	.-8      	; 0xf3be <write_firmware_to_flash+0xde>
    f3c6:	00 c0       	rjmp	.+0      	; 0xf3c8 <write_firmware_to_flash+0xe8>
    f3c8:	00 00       	nop
	_delay_ms(2);
}

void LCD_Clear()
{
	LCD_Action (0x01);		//Clear LCD
    f3ca:	81 e0       	ldi	r24, 0x01	; 1
    f3cc:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    f3d0:	85 e8       	ldi	r24, 0x85	; 133
    f3d2:	8a 95       	dec	r24
    f3d4:	f1 f7       	brne	.-4      	; 0xf3d2 <write_firmware_to_flash+0xf2>
    f3d6:	00 00       	nop
	_delay_us(20);
	LCD_Action (0x80);		//Move to Position Line 1, Position 1
    f3d8:	80 e8       	ldi	r24, 0x80	; 128
    f3da:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
    f3de:	80 e8       	ldi	r24, 0x80	; 128
    f3e0:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
	
	LCD_Print(str);
    f3e4:	86 e0       	ldi	r24, 0x06	; 6
    f3e6:	91 e0       	ldi	r25, 0x01	; 1
    f3e8:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
    f3ec:	80 ec       	ldi	r24, 0xC0	; 192
    f3ee:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	
	LCD_Print(str);
    f3f2:	85 e1       	ldi	r24, 0x15	; 21
    f3f4:	91 e0       	ldi	r25, 0x01	; 1
    f3f6:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    f3fa:	9f ef       	ldi	r25, 0xFF	; 255
    f3fc:	e8 e0       	ldi	r30, 0x08	; 8
    f3fe:	fd e3       	ldi	r31, 0x3D	; 61
    f400:	91 50       	subi	r25, 0x01	; 1
    f402:	e0 40       	sbci	r30, 0x00	; 0
    f404:	f0 40       	sbci	r31, 0x00	; 0
    f406:	e1 f7       	brne	.-8      	; 0xf400 <write_firmware_to_flash+0x120>
    f408:	00 c0       	rjmp	.+0      	; 0xf40a <write_firmware_to_flash+0x12a>
    f40a:	00 00       	nop
	LCD_Clear();
	LCD_Printpos(0,0, "please restart");
	LCD_Printpos(1,0, "lordyphon      ");
	_delay_ms(1000);
		
}
    f40c:	df 91       	pop	r29
    f40e:	cf 91       	pop	r28
    f410:	1f 91       	pop	r17
    f412:	0f 91       	pop	r16
    f414:	ff 90       	pop	r15
    f416:	ef 90       	pop	r14
    f418:	df 90       	pop	r13
    f41a:	cf 90       	pop	r12
    f41c:	bf 90       	pop	r11
    f41e:	af 90       	pop	r10
    f420:	9f 90       	pop	r9
    f422:	8f 90       	pop	r8
    f424:	7f 90       	pop	r7
    f426:	6f 90       	pop	r6
    f428:	08 95       	ret

0000f42a <main>:
{
	
	unsigned char temp;       
	       
	//SET ATMEGA PORTS/PINS TO IN- OR OUTPUTS
	PINA = 0x00;
    f42a:	10 b8       	out	0x00, r1	; 0
	DDRA = 0x0f;
    f42c:	8f e0       	ldi	r24, 0x0F	; 15
    f42e:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;
    f430:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xbe;
    f432:	8e eb       	ldi	r24, 0xBE	; 190
    f434:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x7e;
    f436:	8e e7       	ldi	r24, 0x7E	; 126
    f438:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x01; //internal pull-up rx-pin
    f43a:	81 e0       	ldi	r24, 0x01	; 1
    f43c:	8b b9       	out	0x0b, r24	; 11
	DDRC = 0xfe;
    f43e:	8e ef       	ldi	r24, 0xFE	; 254
    f440:	87 b9       	out	0x07, r24	; 7
	PORTB = 0xbf;
    f442:	8f eb       	ldi	r24, 0xBF	; 191
    f444:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x00;
    f446:	18 b8       	out	0x08, r1	; 8
	PORTA = 13;  // set address for record button
    f448:	8d e0       	ldi	r24, 0x0D	; 13
    f44a:	82 b9       	out	0x02, r24	; 2
	
	//INIT INTERFACES 
	USART_Init(21);  // UBRR = (F_CPU/(16*BAUD))-1   // initialize with correct baud rate
    f44c:	85 e1       	ldi	r24, 0x15	; 21
    f44e:	90 e0       	ldi	r25, 0x00	; 0
    f450:	0e 94 37 79 	call	0xf26e	; 0xf26e <USART_Init>
	SPI_MasterInit();
    f454:	0e 94 d0 78 	call	0xf1a0	; 0xf1a0 <SPI_MasterInit>
	LCD_Init();									
    f458:	0e 94 83 78 	call	0xf106	; 0xf106 <LCD_Init>
    f45c:	2f e7       	ldi	r18, 0x7F	; 127
    f45e:	84 e8       	ldi	r24, 0x84	; 132
    f460:	9e e1       	ldi	r25, 0x1E	; 30
    f462:	21 50       	subi	r18, 0x01	; 1
    f464:	80 40       	sbci	r24, 0x00	; 0
    f466:	90 40       	sbci	r25, 0x00	; 0
    f468:	e1 f7       	brne	.-8      	; 0xf462 <main+0x38>
    f46a:	00 c0       	rjmp	.+0      	; 0xf46c <main+0x42>
    f46c:	00 00       	nop
	_delay_ms(500);
	
	
	//ACTIVATE INTERRUPT
	
    sei();
    f46e:	78 94       	sei
	
	
	if(rec_button){   //boot section only entered if REC button is pressed during power-up
    f470:	80 b1       	in	r24, 0x00	; 0
    f472:	80 71       	andi	r24, 0x10	; 16
    f474:	80 b9       	out	0x00, r24	; 0
    f476:	88 23       	and	r24, r24
    f478:	09 f4       	brne	.+2      	; 0xf47c <main+0x52>
    f47a:	7a c0       	rjmp	.+244    	; 0xf570 <main+0x146>
		
		// set interrupt vector for boot section
		char sregtemp = SREG;
    f47c:	9f b7       	in	r25, 0x3f	; 63
		temp = MCUCR;
    f47e:	85 b7       	in	r24, 0x35	; 53
		MCUCR = temp | (1<<IVCE);
    f480:	28 2f       	mov	r18, r24
    f482:	21 60       	ori	r18, 0x01	; 1
    f484:	25 bf       	out	0x35, r18	; 53
		MCUCR = temp | (1<<IVSEL);
    f486:	82 60       	ori	r24, 0x02	; 2
    f488:	85 bf       	out	0x35, r24	; 53
		SREG = sregtemp;	
    f48a:	9f bf       	out	0x3f, r25	; 63


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
    f48c:	80 e8       	ldi	r24, 0x80	; 128
    f48e:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
	
	LCD_Print(str);
    f492:	85 e2       	ldi	r24, 0x25	; 37
    f494:	91 e0       	ldi	r25, 0x01	; 1
    f496:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
    f49a:	80 ec       	ldi	r24, 0xC0	; 192
    f49c:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	
	LCD_Print(str);
    f4a0:	89 e3       	ldi	r24, 0x39	; 57
    f4a2:	91 e0       	ldi	r25, 0x01	; 1
    f4a4:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
    f4a8:	11 c0       	rjmp	.+34     	; 0xf4cc <main+0xa2>
    f4aa:	2f e7       	ldi	r18, 0x7F	; 127
    f4ac:	8a e1       	ldi	r24, 0x1A	; 26
    f4ae:	96 e0       	ldi	r25, 0x06	; 6
    f4b0:	21 50       	subi	r18, 0x01	; 1
    f4b2:	80 40       	sbci	r24, 0x00	; 0
    f4b4:	90 40       	sbci	r25, 0x00	; 0
    f4b6:	e1 f7       	brne	.-8      	; 0xf4b0 <main+0x86>
    f4b8:	00 c0       	rjmp	.+0      	; 0xf4ba <main+0x90>
    f4ba:	00 00       	nop
				LCD_Printpos(0,0, "lordylink          ");
				LCD_Printpos(1,0, "connected          ");
			}
            _delay_ms(100);
			//UPDATE CALL EVALUATION
			if(strcmp(update_array, update_call) == 0){  //if call is correct, response will be sent
    f4bc:	60 e0       	ldi	r22, 0x00	; 0
    f4be:	71 e0       	ldi	r23, 0x01	; 1
    f4c0:	8c ec       	ldi	r24, 0xCC	; 204
    f4c2:	92 e0       	ldi	r25, 0x02	; 2
    f4c4:	0e 94 a3 7c 	call	0xf946	; 0xf946 <strcmp>
    f4c8:	89 2b       	or	r24, r25
    f4ca:	69 f1       	breq	.+90     	; 0xf526 <main+0xfc>
		
		while(1)  //main loop
		{
				
			//HANDSHAKE CALL EVALUATION
			if(strcmp(handshake_array, handshake_call) == 0){  //if call is correct, response will be sent
    f4cc:	6e e6       	ldi	r22, 0x6E	; 110
    f4ce:	72 e0       	ldi	r23, 0x02	; 2
    f4d0:	82 ed       	ldi	r24, 0xD2	; 210
    f4d2:	92 e0       	ldi	r25, 0x02	; 2
    f4d4:	0e 94 a3 7c 	call	0xf946	; 0xf946 <strcmp>
    f4d8:	89 2b       	or	r24, r25
    f4da:	39 f7       	brne	.-50     	; 0xf4aa <main+0x80>
    f4dc:	2f ef       	ldi	r18, 0xFF	; 255
    f4de:	84 e3       	ldi	r24, 0x34	; 52
    f4e0:	9c e0       	ldi	r25, 0x0C	; 12
    f4e2:	21 50       	subi	r18, 0x01	; 1
    f4e4:	80 40       	sbci	r24, 0x00	; 0
    f4e6:	90 40       	sbci	r25, 0x00	; 0
    f4e8:	e1 f7       	brne	.-8      	; 0xf4e2 <main+0xb8>
    f4ea:	00 c0       	rjmp	.+0      	; 0xf4ec <main+0xc2>
    f4ec:	00 00       	nop
				_delay_ms(200);								   //give lordylink some time for startup
				USART_transmit_string(handshake_response);
    f4ee:	88 e6       	ldi	r24, 0x68	; 104
    f4f0:	92 e0       	ldi	r25, 0x02	; 2
    f4f2:	0e 94 55 79 	call	0xf2aa	; 0xf2aa <USART_transmit_string>
				strcpy(handshake_array, "                ");   //delete input buffer			
    f4f6:	81 e1       	ldi	r24, 0x11	; 17
    f4f8:	eb e9       	ldi	r30, 0x9B	; 155
    f4fa:	f1 e0       	ldi	r31, 0x01	; 1
    f4fc:	a2 ed       	ldi	r26, 0xD2	; 210
    f4fe:	b2 e0       	ldi	r27, 0x02	; 2
    f500:	01 90       	ld	r0, Z+
    f502:	0d 92       	st	X+, r0
    f504:	8a 95       	dec	r24
    f506:	e1 f7       	brne	.-8      	; 0xf500 <main+0xd6>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
    f508:	80 e8       	ldi	r24, 0x80	; 128
    f50a:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
	
	LCD_Print(str);
    f50e:	8f e4       	ldi	r24, 0x4F	; 79
    f510:	91 e0       	ldi	r25, 0x01	; 1
    f512:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
    f516:	80 ec       	ldi	r24, 0xC0	; 192
    f518:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	
	LCD_Print(str);
    f51c:	83 e6       	ldi	r24, 0x63	; 99
    f51e:	91 e0       	ldi	r25, 0x01	; 1
    f520:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
    f524:	c2 cf       	rjmp	.-124    	; 0xf4aa <main+0x80>
    f526:	2f ef       	ldi	r18, 0xFF	; 255
    f528:	84 e3       	ldi	r24, 0x34	; 52
    f52a:	9c e0       	ldi	r25, 0x0C	; 12
    f52c:	21 50       	subi	r18, 0x01	; 1
    f52e:	80 40       	sbci	r24, 0x00	; 0
    f530:	90 40       	sbci	r25, 0x00	; 0
    f532:	e1 f7       	brne	.-8      	; 0xf52c <main+0x102>
    f534:	00 c0       	rjmp	.+0      	; 0xf536 <main+0x10c>
    f536:	00 00       	nop
			}
            _delay_ms(100);
			//UPDATE CALL EVALUATION
			if(strcmp(update_array, update_call) == 0){  //if call is correct, response will be sent
				_delay_ms(200);								 
				USART_transmit_string(update_response);
    f538:	83 e6       	ldi	r24, 0x63	; 99
    f53a:	92 e0       	ldi	r25, 0x02	; 2
    f53c:	0e 94 55 79 	call	0xf2aa	; 0xf2aa <USART_transmit_string>
				strcpy(update_array, "     ");   //overwrite input buffer
    f540:	86 e0       	ldi	r24, 0x06	; 6
    f542:	e6 ea       	ldi	r30, 0xA6	; 166
    f544:	f1 e0       	ldi	r31, 0x01	; 1
    f546:	ac ec       	ldi	r26, 0xCC	; 204
    f548:	b2 e0       	ldi	r27, 0x02	; 2
    f54a:	01 90       	ld	r0, Z+
    f54c:	0d 92       	st	X+, r0
    f54e:	8a 95       	dec	r24
    f550:	e1 f7       	brne	.-8      	; 0xf54a <main+0x120>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
    f552:	80 e8       	ldi	r24, 0x80	; 128
    f554:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
	
	LCD_Print(str);
    f558:	87 e7       	ldi	r24, 0x77	; 119
    f55a:	91 e0       	ldi	r25, 0x01	; 1
    f55c:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
    f560:	80 ec       	ldi	r24, 0xC0	; 192
    f562:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	
	LCD_Print(str);
    f566:	89 e8       	ldi	r24, 0x89	; 137
    f568:	91 e0       	ldi	r25, 0x01	; 1
    f56a:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
    f56e:	ae cf       	rjmp	.-164    	; 0xf4cc <main+0xa2>
			
		} //end while(1) 
	
    }else{  // go directly to app section
	
	    start();
    f570:	e0 91 80 02 	lds	r30, 0x0280	; 0x800280 <__data_end>
    f574:	f0 91 81 02 	lds	r31, 0x0281	; 0x800281 <__data_end+0x1>
    f578:	09 95       	icall
	
	}

} // end main 
    f57a:	80 e0       	ldi	r24, 0x00	; 0
    f57c:	90 e0       	ldi	r25, 0x00	; 0
    f57e:	08 95       	ret

0000f580 <__vector_20>:

//Interrupt Service Routine is in sleep mode unless USART message is received

ISR(USART0_RX_vect)
{
    f580:	1f 92       	push	r1
    f582:	0f 92       	push	r0
    f584:	0f b6       	in	r0, 0x3f	; 63
    f586:	0f 92       	push	r0
    f588:	11 24       	eor	r1, r1
    f58a:	ef 92       	push	r14
    f58c:	ff 92       	push	r15
    f58e:	0f 93       	push	r16
    f590:	1f 93       	push	r17
    f592:	2f 93       	push	r18
    f594:	3f 93       	push	r19
    f596:	4f 93       	push	r20
    f598:	5f 93       	push	r21
    f59a:	6f 93       	push	r22
    f59c:	7f 93       	push	r23
    f59e:	8f 93       	push	r24
    f5a0:	9f 93       	push	r25
    f5a2:	af 93       	push	r26
    f5a4:	bf 93       	push	r27
    f5a6:	cf 93       	push	r28
    f5a8:	df 93       	push	r29
    f5aa:	ef 93       	push	r30
    f5ac:	ff 93       	push	r31
}


uint8_t USART_receive_byte(void)
{
	while (!(UCSR0A & (1<<RXC0)))
    f5ae:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
    f5b2:	87 ff       	sbrs	r24, 7
    f5b4:	fc cf       	rjmp	.-8      	; 0xf5ae <__vector_20+0x2e>
	;   
	
	return UDR0;												
    f5b6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>

//Interrupt Service Routine is in sleep mode unless USART message is received

ISR(USART0_RX_vect)
{
	header = USART_receive_byte();  //header will determine, which kind of message is arriving (following if/else paths)
    f5ba:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <header>
	
	//HANDSHAKE MESSAGE
	
	if (header == usart_handshake_message){  // if incoming data is of handshake type...
    f5be:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <header>
    f5c2:	81 32       	cpi	r24, 0x21	; 33
    f5c4:	79 f1       	breq	.+94     	; 0xf624 <__vector_20+0xa4>
	//AFTER HEX-RECORD IS RECEIVED, CHECKSUM WILL BE EVALUATED AND CONFIRMATION MESSAGE ("ok" or "er") WILL BE SENT TO LORDYLINK'S BLOCKING THREAD
	//IF CONFIRMATION IS "ok", LORDYLINK SENDS NEXT RECORD AFTER CONTROLLER HAS WRITTEN DATA SECTION INTO THE SRAM
	//IF CONFIRMATION IS "er", LORDYLINK SENDS CURRENT RECORD AGAIN, EVALUATION STARTS FROM THE TOP
	//IF CONFIRMATION MESSAGE ISN'T RECOGNIZED BY LORDYLINK, CHECKSUM STATUS WILL BE RE-EVALUATED AND CONFIRMATION MESSAGE IS TRANSMITTED AGAIN.
	
	else if(header == usart_hexfile_message){   //if message is hexfile....
    f5c6:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <header>
    f5ca:	8a 33       	cpi	r24, 0x3A	; 58
    f5cc:	d1 f1       	breq	.+116    	; 0xf642 <__vector_20+0xc2>
	
    } // end else if(header == usart_hexfile_message)
	
	//THIS MESSAGE HEADER INDICATES THAT HEXFILE CONFIRMATION MESSAGE WASN'T RECOGNIZED BY LORDYLINK
	
	else if(header == usart_rx_error_hexrecord){									//lordylink didn't "understand" last confirmation	
    f5ce:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <header>
    f5d2:	8f 33       	cpi	r24, 0x3F	; 63
    f5d4:	09 f4       	brne	.+2      	; 0xf5d8 <__vector_20+0x58>
    f5d6:	d3 c0       	rjmp	.+422    	; 0xf77e <__vector_20+0x1fe>
			USART_transmit_string("ok");	
			
		else																		// if error => record will be sent again, otherwise SRAM entry is correct
			USART_transmit_string("er");
	}
	else if(header == usart_request_data_dump){
    f5d8:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <header>
    f5dc:	83 37       	cpi	r24, 0x73	; 115
    f5de:	09 f4       	brne	.+2      	; 0xf5e2 <__vector_20+0x62>
    f5e0:	3c c1       	rjmp	.+632    	; 0xf85a <__vector_20+0x2da>
			sram_address = 0;
			send_sram_flag = 1;
		
	}
	
	else if(header == usart_hexfile_send_complete){							//hexfile transfer is complete
    f5e2:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <header>
    f5e6:	87 37       	cpi	r24, 0x77	; 119
    f5e8:	09 f4       	brne	.+2      	; 0xf5ec <__vector_20+0x6c>
    f5ea:	76 c1       	rjmp	.+748    	; 0xf8d8 <__vector_20+0x358>
			LCD_Printpos(0,0, "burning flash       ");
			LCD_Printpos(1,0, "don't turn off       ");
			write_firmware_to_flash();
	}	
	
	else if (header == usart_update_message){  // if incoming data is an update handshake 
    f5ec:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <header>
    f5f0:	85 37       	cpi	r24, 0x75	; 117
    f5f2:	09 f4       	brne	.+2      	; 0xf5f6 <__vector_20+0x76>
    f5f4:	cd c0       	rjmp	.+410    	; 0xf790 <__vector_20+0x210>
		for(int i = 0; i < 5; ++i)
		    update_array[i] = USART_receive_byte();  //read handshake call, if correct: response will be sent from main loop
		
	}
    
}
    f5f6:	ff 91       	pop	r31
    f5f8:	ef 91       	pop	r30
    f5fa:	df 91       	pop	r29
    f5fc:	cf 91       	pop	r28
    f5fe:	bf 91       	pop	r27
    f600:	af 91       	pop	r26
    f602:	9f 91       	pop	r25
    f604:	8f 91       	pop	r24
    f606:	7f 91       	pop	r23
    f608:	6f 91       	pop	r22
    f60a:	5f 91       	pop	r21
    f60c:	4f 91       	pop	r20
    f60e:	3f 91       	pop	r19
    f610:	2f 91       	pop	r18
    f612:	1f 91       	pop	r17
    f614:	0f 91       	pop	r16
    f616:	ff 90       	pop	r15
    f618:	ef 90       	pop	r14
    f61a:	0f 90       	pop	r0
    f61c:	0f be       	out	0x3f, r0	; 63
    f61e:	0f 90       	pop	r0
    f620:	1f 90       	pop	r1
    f622:	18 95       	reti
    f624:	e2 ed       	ldi	r30, 0xD2	; 210
    f626:	f2 e0       	ldi	r31, 0x02	; 2
    f628:	22 ee       	ldi	r18, 0xE2	; 226
    f62a:	32 e0       	ldi	r19, 0x02	; 2
}


uint8_t USART_receive_byte(void)
{
	while (!(UCSR0A & (1<<RXC0)))
    f62c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
    f630:	87 ff       	sbrs	r24, 7
    f632:	fc cf       	rjmp	.-8      	; 0xf62c <__vector_20+0xac>
	;   
	
	return UDR0;												
    f634:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
	
	//HANDSHAKE MESSAGE
	
	if (header == usart_handshake_message){  // if incoming data is of handshake type...
		for(uint8_t i = 0; i < 16; ++i)
			handshake_array[i] = USART_receive_byte();  //read handshake call, if correct: response will be sent from main loop
    f638:	81 93       	st	Z+, r24
	header = USART_receive_byte();  //header will determine, which kind of message is arriving (following if/else paths)
	
	//HANDSHAKE MESSAGE
	
	if (header == usart_handshake_message){  // if incoming data is of handshake type...
		for(uint8_t i = 0; i < 16; ++i)
    f63a:	2e 17       	cp	r18, r30
    f63c:	3f 07       	cpc	r19, r31
    f63e:	b1 f7       	brne	.-20     	; 0xf62c <__vector_20+0xac>
    f640:	da cf       	rjmp	.-76     	; 0xf5f6 <__vector_20+0x76>
	//IF CONFIRMATION IS "ok", LORDYLINK SENDS NEXT RECORD AFTER CONTROLLER HAS WRITTEN DATA SECTION INTO THE SRAM
	//IF CONFIRMATION IS "er", LORDYLINK SENDS CURRENT RECORD AGAIN, EVALUATION STARTS FROM THE TOP
	//IF CONFIRMATION MESSAGE ISN'T RECOGNIZED BY LORDYLINK, CHECKSUM STATUS WILL BE RE-EVALUATED AND CONFIRMATION MESSAGE IS TRANSMITTED AGAIN.
	
	else if(header == usart_hexfile_message){   //if message is hexfile....
		    ++record_ctr;  //keep track...
    f642:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <record_ctr>
    f646:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <record_ctr+0x1>
    f64a:	a0 91 85 02 	lds	r26, 0x0285	; 0x800285 <record_ctr+0x2>
    f64e:	b0 91 86 02 	lds	r27, 0x0286	; 0x800286 <record_ctr+0x3>
    f652:	01 96       	adiw	r24, 0x01	; 1
    f654:	a1 1d       	adc	r26, r1
    f656:	b1 1d       	adc	r27, r1
    f658:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <record_ctr>
    f65c:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <record_ctr+0x1>
    f660:	a0 93 85 02 	sts	0x0285, r26	; 0x800285 <record_ctr+0x2>
    f664:	b0 93 86 02 	sts	0x0286, r27	; 0x800286 <record_ctr+0x3>
}


uint8_t USART_receive_byte(void)
{
	while (!(UCSR0A & (1<<RXC0)))
    f668:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
    f66c:	87 ff       	sbrs	r24, 7
    f66e:	fc cf       	rjmp	.-8      	; 0xf668 <__vector_20+0xe8>
	;   
	
	return UDR0;												
    f670:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
	else if(header == usart_hexfile_message){   //if message is hexfile....
		    ++record_ctr;  //keep track...
			//PARSE INCOMING MESSAGE
		
			uint8_t data_section_size = USART_receive_byte();	//this is the amount of databytes that will be written into the SRAM
			uint8_t hex_record_size = data_section_size + 5;	// add start bytes and checksum to data section length for total size of message
    f674:	85 e0       	ldi	r24, 0x05	; 5
    f676:	81 0f       	add	r24, r17
		
			hex_buffer_array[0] = data_section_size;			//buffer starts with data_section_size, header ':' will be discarded
    f678:	10 93 8c 02 	sts	0x028C, r17	; 0x80028c <hex_buffer_array>
		
			for(int i = 1; i < hex_record_size ; ++i )			// get rest of message data
    f67c:	c8 2f       	mov	r28, r24
    f67e:	d0 e0       	ldi	r29, 0x00	; 0
    f680:	82 30       	cpi	r24, 0x02	; 2
    f682:	88 f0       	brcs	.+34     	; 0xf6a6 <__vector_20+0x126>
    f684:	21 e0       	ldi	r18, 0x01	; 1
    f686:	30 e0       	ldi	r19, 0x00	; 0
}


uint8_t USART_receive_byte(void)
{
	while (!(UCSR0A & (1<<RXC0)))
    f688:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
    f68c:	87 ff       	sbrs	r24, 7
    f68e:	fc cf       	rjmp	.-8      	; 0xf688 <__vector_20+0x108>
	;   
	
	return UDR0;												
    f690:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
			uint8_t hex_record_size = data_section_size + 5;	// add start bytes and checksum to data section length for total size of message
		
			hex_buffer_array[0] = data_section_size;			//buffer starts with data_section_size, header ':' will be discarded
		
			for(int i = 1; i < hex_record_size ; ++i )			// get rest of message data
				hex_buffer_array[ i ] = USART_receive_byte();
    f694:	f9 01       	movw	r30, r18
    f696:	e4 57       	subi	r30, 0x74	; 116
    f698:	fd 4f       	sbci	r31, 0xFD	; 253
    f69a:	80 83       	st	Z, r24
			uint8_t data_section_size = USART_receive_byte();	//this is the amount of databytes that will be written into the SRAM
			uint8_t hex_record_size = data_section_size + 5;	// add start bytes and checksum to data section length for total size of message
		
			hex_buffer_array[0] = data_section_size;			//buffer starts with data_section_size, header ':' will be discarded
		
			for(int i = 1; i < hex_record_size ; ++i )			// get rest of message data
    f69c:	2f 5f       	subi	r18, 0xFF	; 255
    f69e:	3f 4f       	sbci	r19, 0xFF	; 255
    f6a0:	c2 17       	cp	r28, r18
    f6a2:	d3 07       	cpc	r29, r19
    f6a4:	89 f7       	brne	.-30     	; 0xf688 <__vector_20+0x108>
				hex_buffer_array[ i ] = USART_receive_byte();
			
			//TRANSMISSION IS NOW COMPLETED AND STORED IN BUFFER
		     switch(animation_ctr){	// display animation, tells user all is going well
    f6a6:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <animation_ctr>
    f6aa:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <animation_ctr+0x1>
    f6ae:	a0 91 89 02 	lds	r26, 0x0289	; 0x800289 <animation_ctr+0x2>
    f6b2:	b0 91 8a 02 	lds	r27, 0x028A	; 0x80028a <animation_ctr+0x3>
    f6b6:	88 37       	cpi	r24, 0x78	; 120
    f6b8:	91 05       	cpc	r25, r1
    f6ba:	a1 05       	cpc	r26, r1
    f6bc:	b1 05       	cpc	r27, r1
    f6be:	09 f4       	brne	.+2      	; 0xf6c2 <__vector_20+0x142>
    f6c0:	75 c0       	rjmp	.+234    	; 0xf7ac <__vector_20+0x22c>
    f6c2:	08 f4       	brcc	.+2      	; 0xf6c6 <__vector_20+0x146>
    f6c4:	d6 c0       	rjmp	.+428    	; 0xf872 <__vector_20+0x2f2>
    f6c6:	80 3f       	cpi	r24, 0xF0	; 240
    f6c8:	91 05       	cpc	r25, r1
    f6ca:	a1 05       	cpc	r26, r1
    f6cc:	b1 05       	cpc	r27, r1
    f6ce:	09 f4       	brne	.+2      	; 0xf6d2 <__vector_20+0x152>
    f6d0:	f0 c0       	rjmp	.+480    	; 0xf8b2 <__vector_20+0x332>
    f6d2:	88 36       	cpi	r24, 0x68	; 104
    f6d4:	21 e0       	ldi	r18, 0x01	; 1
    f6d6:	92 07       	cpc	r25, r18
    f6d8:	a1 05       	cpc	r26, r1
    f6da:	b1 05       	cpc	r27, r1
    f6dc:	09 f0       	breq	.+2      	; 0xf6e0 <__vector_20+0x160>
    f6de:	75 c0       	rjmp	.+234    	; 0xf7ca <__vector_20+0x24a>
    f6e0:	81 e0       	ldi	r24, 0x01	; 1
    f6e2:	90 e0       	ldi	r25, 0x00	; 0
    f6e4:	a0 e0       	ldi	r26, 0x00	; 0
    f6e6:	b0 e0       	ldi	r27, 0x00	; 0
    		     case 360:
    		     animation_ctr = 0;
    		     break;
		     }//end switch
		 
		     animation_ctr++;
    f6e8:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <animation_ctr>
    f6ec:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <animation_ctr+0x1>
    f6f0:	a0 93 89 02 	sts	0x0289, r26	; 0x800289 <animation_ctr+0x2>
    f6f4:	b0 93 8a 02 	sts	0x028A, r27	; 0x80028a <animation_ctr+0x3>
			//THIS PART CALCULATES CHECKSUM FROM MESSAGE
			//AND COMPARES IT TO THE CHECKSUM IN THE HEX-RECORD
			
			uint16_t vec_sum = 0;												//local helper variable for checksum calculation
			uint8_t checksum_from_file = hex_buffer_array[hex_record_size-1];   //read checksum from file
    f6f8:	9e 01       	movw	r18, r28
    f6fa:	21 50       	subi	r18, 0x01	; 1
    f6fc:	31 09       	sbc	r19, r1
    f6fe:	f9 01       	movw	r30, r18
    f700:	e4 57       	subi	r30, 0x74	; 116
    f702:	fd 4f       	sbci	r31, 0xFD	; 253
    f704:	70 81       	ld	r23, Z
		
			for(int i = 0; i < hex_record_size - 1; ++i){						// accumulate record for checksum calculation
    f706:	12 16       	cp	r1, r18
    f708:	13 06       	cpc	r1, r19
    f70a:	0c f0       	brlt	.+2      	; 0xf70e <__vector_20+0x18e>
    f70c:	1a c1       	rjmp	.+564    	; 0xf942 <__vector_20+0x3c2>
    f70e:	80 e0       	ldi	r24, 0x00	; 0
    f710:	90 e0       	ldi	r25, 0x00	; 0
    f712:	40 e0       	ldi	r20, 0x00	; 0
    f714:	50 e0       	ldi	r21, 0x00	; 0
				vec_sum += hex_buffer_array[ i ];
    f716:	fc 01       	movw	r30, r24
    f718:	e4 57       	subi	r30, 0x74	; 116
    f71a:	fd 4f       	sbci	r31, 0xFD	; 253
    f71c:	60 81       	ld	r22, Z
    f71e:	46 0f       	add	r20, r22
    f720:	51 1d       	adc	r21, r1
			//AND COMPARES IT TO THE CHECKSUM IN THE HEX-RECORD
			
			uint16_t vec_sum = 0;												//local helper variable for checksum calculation
			uint8_t checksum_from_file = hex_buffer_array[hex_record_size-1];   //read checksum from file
		
			for(int i = 0; i < hex_record_size - 1; ++i){						// accumulate record for checksum calculation
    f722:	01 96       	adiw	r24, 0x01	; 1
    f724:	82 17       	cp	r24, r18
    f726:	93 07       	cpc	r25, r19
    f728:	b1 f7       	brne	.-20     	; 0xf716 <__vector_20+0x196>
    f72a:	41 95       	neg	r20
				vec_sum += hex_buffer_array[ i ];
                
            }		    
			uint8_t checksum_calculated =  ~(vec_sum & 0x00ff ) + 0x01;		// actual checksum calculation
		
			if(checksum_calculated == checksum_from_file ){						// compare checksums
    f72c:	74 17       	cp	r23, r20
    f72e:	09 f4       	brne	.+2      	; 0xf732 <__vector_20+0x1b2>
    f730:	50 c0       	rjmp	.+160    	; 0xf7d2 <__vector_20+0x252>
															// "er" => current record will be sent again. if neither "ok" nor "er" is detected by lordylink, rx_error_header will be sent
															//to reevaluate checksum via flag variable "checksum_status"
			}//end if(checksum calculated....	
			
			else if( checksum_calculated != checksum_from_file){
				checksum_status = is_error;											// error, same record will be sent again
    f732:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <checksum_status>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
    f736:	80 e8       	ldi	r24, 0x80	; 128
    f738:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
	
	LCD_Print(str);
    f73c:	86 ef       	ldi	r24, 0xF6	; 246
    f73e:	91 e0       	ldi	r25, 0x01	; 1
    f740:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
    f744:	80 ec       	ldi	r24, 0xC0	; 192
    f746:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	
	LCD_Print(str);
    f74a:	8c e0       	ldi	r24, 0x0C	; 12
    f74c:	92 e0       	ldi	r25, 0x02	; 2
    f74e:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
    f752:	9f e7       	ldi	r25, 0x7F	; 127
    f754:	2a e1       	ldi	r18, 0x1A	; 26
    f756:	86 e0       	ldi	r24, 0x06	; 6
    f758:	91 50       	subi	r25, 0x01	; 1
    f75a:	20 40       	sbci	r18, 0x00	; 0
    f75c:	80 40       	sbci	r24, 0x00	; 0
    f75e:	e1 f7       	brne	.-8      	; 0xf758 <__vector_20+0x1d8>
    f760:	00 c0       	rjmp	.+0      	; 0xf762 <__vector_20+0x1e2>
    f762:	00 00       	nop
				LCD_Printpos(0,0,"checksum error!      ");						//LCD user feedback
				LCD_Printpos(1,0,"trying again......  ");
				
				_delay_ms(100);
				
				animation_ctr  = 0;
    f764:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <animation_ctr>
    f768:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <animation_ctr+0x1>
    f76c:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <animation_ctr+0x2>
    f770:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <animation_ctr+0x3>
				USART_transmit_string("er");										
    f774:	81 e2       	ldi	r24, 0x21	; 33
    f776:	92 e0       	ldi	r25, 0x02	; 2
    f778:	0e 94 55 79 	call	0xf2aa	; 0xf2aa <USART_transmit_string>
    f77c:	3c cf       	rjmp	.-392    	; 0xf5f6 <__vector_20+0x76>
	
	//THIS MESSAGE HEADER INDICATES THAT HEXFILE CONFIRMATION MESSAGE WASN'T RECOGNIZED BY LORDYLINK
	
	else if(header == usart_rx_error_hexrecord){									//lordylink didn't "understand" last confirmation	
		
		if(checksum_status == is_ok)											    // evaluating last checksum again...
    f77e:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <checksum_status>
    f782:	81 11       	cpse	r24, r1
    f784:	65 c0       	rjmp	.+202    	; 0xf850 <__vector_20+0x2d0>
			USART_transmit_string("ok");	
			
		else																		// if error => record will be sent again, otherwise SRAM entry is correct
			USART_transmit_string("er");
    f786:	81 e2       	ldi	r24, 0x21	; 33
    f788:	92 e0       	ldi	r25, 0x02	; 2
    f78a:	0e 94 55 79 	call	0xf2aa	; 0xf2aa <USART_transmit_string>
    f78e:	33 cf       	rjmp	.-410    	; 0xf5f6 <__vector_20+0x76>
    f790:	ec ec       	ldi	r30, 0xCC	; 204
    f792:	f2 e0       	ldi	r31, 0x02	; 2
}


uint8_t USART_receive_byte(void)
{
	while (!(UCSR0A & (1<<RXC0)))
    f794:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
    f798:	87 ff       	sbrs	r24, 7
    f79a:	fc cf       	rjmp	.-8      	; 0xf794 <__vector_20+0x214>
	;   
	
	return UDR0;												
    f79c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
			write_firmware_to_flash();
	}	
	
	else if (header == usart_update_message){  // if incoming data is an update handshake 
		for(int i = 0; i < 5; ++i)
		    update_array[i] = USART_receive_byte();  //read handshake call, if correct: response will be sent from main loop
    f7a0:	81 93       	st	Z+, r24
			LCD_Printpos(1,0, "don't turn off       ");
			write_firmware_to_flash();
	}	
	
	else if (header == usart_update_message){  // if incoming data is an update handshake 
		for(int i = 0; i < 5; ++i)
    f7a2:	82 e0       	ldi	r24, 0x02	; 2
    f7a4:	e1 3d       	cpi	r30, 0xD1	; 209
    f7a6:	f8 07       	cpc	r31, r24
    f7a8:	a9 f7       	brne	.-22     	; 0xf794 <__vector_20+0x214>
    f7aa:	25 cf       	rjmp	.-438    	; 0xf5f6 <__vector_20+0x76>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
    f7ac:	80 ec       	ldi	r24, 0xC0	; 192
    f7ae:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	
	LCD_Print(str);
    f7b2:	80 ed       	ldi	r24, 0xD0	; 208
    f7b4:	91 e0       	ldi	r25, 0x01	; 1
    f7b6:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
    f7ba:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <animation_ctr>
    f7be:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <animation_ctr+0x1>
    f7c2:	a0 91 89 02 	lds	r26, 0x0289	; 0x800289 <animation_ctr+0x2>
    f7c6:	b0 91 8a 02 	lds	r27, 0x028A	; 0x80028a <animation_ctr+0x3>
    f7ca:	01 96       	adiw	r24, 0x01	; 1
    f7cc:	a1 1d       	adc	r26, r1
    f7ce:	b1 1d       	adc	r27, r1
    f7d0:	8b cf       	rjmp	.-234    	; 0xf6e8 <__vector_20+0x168>
                
            }		    
			uint8_t checksum_calculated =  ~(vec_sum & 0x00ff ) + 0x01;		// actual checksum calculation
		
			if(checksum_calculated == checksum_from_file ){						// compare checksums
				checksum_status = is_ok;										// set boolean flag for error handling
    f7d2:	81 e0       	ldi	r24, 0x01	; 1
    f7d4:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <checksum_status>
				
				for(int i = 0; i < data_section_size; ++i){						//if checksum is ok, write data-section to SRAM
    f7d8:	11 23       	and	r17, r17
    f7da:	d1 f1       	breq	.+116    	; 0xf850 <__vector_20+0x2d0>
    f7dc:	e1 2e       	mov	r14, r17
    f7de:	f1 2c       	mov	r15, r1
    f7e0:	84 e0       	ldi	r24, 0x04	; 4
    f7e2:	e8 0e       	add	r14, r24
    f7e4:	f1 1c       	adc	r15, r1
    f7e6:	04 e0       	ldi	r16, 0x04	; 4
    f7e8:	10 e0       	ldi	r17, 0x00	; 0
    f7ea:	e8 01       	movw	r28, r16
    f7ec:	c4 57       	subi	r28, 0x74	; 116
    f7ee:	dd 4f       	sbci	r29, 0xFD	; 253
					
					do{
						SPI_SRAM_ByteWrite(address, hex_buffer_array[ i + 4 ]);	
    f7f0:	48 81       	ld	r20, Y
    f7f2:	60 91 e3 02 	lds	r22, 0x02E3	; 0x8002e3 <address>
    f7f6:	70 91 e4 02 	lds	r23, 0x02E4	; 0x8002e4 <address+0x1>
    f7fa:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <address+0x2>
    f7fe:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <address+0x3>
    f802:	0e 94 df 78 	call	0xf1be	; 0xf1be <SPI_SRAM_ByteWrite>
					
					}while(SPI_SRAM_ByteRead(address) !=  hex_buffer_array[ i + 4 ]);  //additional safety-guard: write to address and read content back. if this doesn't work, sram is probably broken
    f806:	60 91 e3 02 	lds	r22, 0x02E3	; 0x8002e3 <address>
    f80a:	70 91 e4 02 	lds	r23, 0x02E4	; 0x8002e4 <address+0x1>
    f80e:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <address+0x2>
    f812:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <address+0x3>
    f816:	0e 94 0a 79 	call	0xf214	; 0xf214 <SPI_SRAM_ByteRead>
    f81a:	98 81       	ld	r25, Y
    f81c:	89 13       	cpse	r24, r25
    f81e:	e8 cf       	rjmp	.-48     	; 0xf7f0 <__vector_20+0x270>
				
					++address;	
    f820:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <address>
    f824:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <address+0x1>
    f828:	a0 91 e5 02 	lds	r26, 0x02E5	; 0x8002e5 <address+0x2>
    f82c:	b0 91 e6 02 	lds	r27, 0x02E6	; 0x8002e6 <address+0x3>
    f830:	01 96       	adiw	r24, 0x01	; 1
    f832:	a1 1d       	adc	r26, r1
    f834:	b1 1d       	adc	r27, r1
    f836:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <address>
    f83a:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <address+0x1>
    f83e:	a0 93 e5 02 	sts	0x02E5, r26	; 0x8002e5 <address+0x2>
    f842:	b0 93 e6 02 	sts	0x02E6, r27	; 0x8002e6 <address+0x3>
    f846:	0f 5f       	subi	r16, 0xFF	; 255
    f848:	1f 4f       	sbci	r17, 0xFF	; 255
			uint8_t checksum_calculated =  ~(vec_sum & 0x00ff ) + 0x01;		// actual checksum calculation
		
			if(checksum_calculated == checksum_from_file ){						// compare checksums
				checksum_status = is_ok;										// set boolean flag for error handling
				
				for(int i = 0; i < data_section_size; ++i){						//if checksum is ok, write data-section to SRAM
    f84a:	e0 16       	cp	r14, r16
    f84c:	f1 06       	cpc	r15, r17
    f84e:	69 f6       	brne	.-102    	; 0xf7ea <__vector_20+0x26a>
					}while(SPI_SRAM_ByteRead(address) !=  hex_buffer_array[ i + 4 ]);  //additional safety-guard: write to address and read content back. if this doesn't work, sram is probably broken
				
					++address;	
						
				}//end for
				USART_transmit_string("ok");				// confirm transmission: lordylink thread blocks until confirmation is either "ok" or "er". checksum "ok" => SRAM will be written, next record will be sent
    f850:	83 ef       	ldi	r24, 0xF3	; 243
    f852:	91 e0       	ldi	r25, 0x01	; 1
    f854:	0e 94 55 79 	call	0xf2aa	; 0xf2aa <USART_transmit_string>
    f858:	ce ce       	rjmp	.-612    	; 0xf5f6 <__vector_20+0x76>
		else																		// if error => record will be sent again, otherwise SRAM entry is correct
			USART_transmit_string("er");
	}
	else if(header == usart_request_data_dump){
		
			sram_address = 0;
    f85a:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <sram_address>
    f85e:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <sram_address+0x1>
    f862:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <sram_address+0x2>
    f866:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <sram_address+0x3>
			send_sram_flag = 1;
    f86a:	81 e0       	ldi	r24, 0x01	; 1
    f86c:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <send_sram_flag>
    f870:	c2 ce       	rjmp	.-636    	; 0xf5f6 <__vector_20+0x76>
		
			for(int i = 1; i < hex_record_size ; ++i )			// get rest of message data
				hex_buffer_array[ i ] = USART_receive_byte();
			
			//TRANSMISSION IS NOW COMPLETED AND STORED IN BUFFER
		     switch(animation_ctr){	// display animation, tells user all is going well
    f872:	81 30       	cpi	r24, 0x01	; 1
    f874:	91 05       	cpc	r25, r1
    f876:	a1 05       	cpc	r26, r1
    f878:	b1 05       	cpc	r27, r1
    f87a:	09 f0       	breq	.+2      	; 0xf87e <__vector_20+0x2fe>
    f87c:	a6 cf       	rjmp	.-180    	; 0xf7ca <__vector_20+0x24a>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
    f87e:	80 e8       	ldi	r24, 0x80	; 128
    f880:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
	
	LCD_Print(str);
    f884:	8c ea       	ldi	r24, 0xAC	; 172
    f886:	91 e0       	ldi	r25, 0x01	; 1
    f888:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
    f88c:	80 ec       	ldi	r24, 0xC0	; 192
    f88e:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	
	LCD_Print(str);
    f892:	8e eb       	ldi	r24, 0xBE	; 190
    f894:	91 e0       	ldi	r25, 0x01	; 1
    f896:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
    f89a:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <animation_ctr>
    f89e:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <animation_ctr+0x1>
    f8a2:	a0 91 89 02 	lds	r26, 0x0289	; 0x800289 <animation_ctr+0x2>
    f8a6:	b0 91 8a 02 	lds	r27, 0x028A	; 0x80028a <animation_ctr+0x3>
    f8aa:	01 96       	adiw	r24, 0x01	; 1
    f8ac:	a1 1d       	adc	r26, r1
    f8ae:	b1 1d       	adc	r27, r1
    f8b0:	1b cf       	rjmp	.-458    	; 0xf6e8 <__vector_20+0x168>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
    f8b2:	80 ec       	ldi	r24, 0xC0	; 192
    f8b4:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	
	LCD_Print(str);
    f8b8:	82 ee       	ldi	r24, 0xE2	; 226
    f8ba:	91 e0       	ldi	r25, 0x01	; 1
    f8bc:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
    f8c0:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <animation_ctr>
    f8c4:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <animation_ctr+0x1>
    f8c8:	a0 91 89 02 	lds	r26, 0x0289	; 0x800289 <animation_ctr+0x2>
    f8cc:	b0 91 8a 02 	lds	r27, 0x028A	; 0x80028a <animation_ctr+0x3>
    f8d0:	01 96       	adiw	r24, 0x01	; 1
    f8d2:	a1 1d       	adc	r26, r1
    f8d4:	b1 1d       	adc	r27, r1
    f8d6:	08 cf       	rjmp	.-496    	; 0xf6e8 <__vector_20+0x168>
	_delay_ms(2);
}

void LCD_Clear()
{
	LCD_Action (0x01);		//Clear LCD
    f8d8:	81 e0       	ldi	r24, 0x01	; 1
    f8da:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    f8de:	95 e8       	ldi	r25, 0x85	; 133
    f8e0:	9a 95       	dec	r25
    f8e2:	f1 f7       	brne	.-4      	; 0xf8e0 <__vector_20+0x360>
    f8e4:	00 00       	nop
	_delay_us(20);
	LCD_Action (0x80);		//Move to Position Line 1, Position 1
    f8e6:	80 e8       	ldi	r24, 0x80	; 128
    f8e8:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
    f8ec:	80 e8       	ldi	r24, 0x80	; 128
    f8ee:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
	
	LCD_Print(str);
    f8f2:	84 e2       	ldi	r24, 0x24	; 36
    f8f4:	92 e0       	ldi	r25, 0x02	; 2
    f8f6:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    f8fa:	2f e7       	ldi	r18, 0x7F	; 127
    f8fc:	89 eb       	ldi	r24, 0xB9	; 185
    f8fe:	9a e2       	ldi	r25, 0x2A	; 42
    f900:	21 50       	subi	r18, 0x01	; 1
    f902:	80 40       	sbci	r24, 0x00	; 0
    f904:	90 40       	sbci	r25, 0x00	; 0
    f906:	e1 f7       	brne	.-8      	; 0xf900 <__vector_20+0x380>
    f908:	00 c0       	rjmp	.+0      	; 0xf90a <__vector_20+0x38a>
    f90a:	00 00       	nop
	_delay_ms(2);
}

void LCD_Clear()
{
	LCD_Action (0x01);		//Clear LCD
    f90c:	81 e0       	ldi	r24, 0x01	; 1
    f90e:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    f912:	25 e8       	ldi	r18, 0x85	; 133
    f914:	2a 95       	dec	r18
    f916:	f1 f7       	brne	.-4      	; 0xf914 <__vector_20+0x394>
    f918:	00 00       	nop
	_delay_us(20);
	LCD_Action (0x80);		//Move to Position Line 1, Position 1
    f91a:	80 e8       	ldi	r24, 0x80	; 128
    f91c:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
    f920:	80 e8       	ldi	r24, 0x80	; 128
    f922:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
	
	LCD_Print(str);
    f926:	88 e3       	ldi	r24, 0x38	; 56
    f928:	92 e0       	ldi	r25, 0x02	; 2
    f92a:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
    f92e:	80 ec       	ldi	r24, 0xC0	; 192
    f930:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	
	LCD_Print(str);
    f934:	8d e4       	ldi	r24, 0x4D	; 77
    f936:	92 e0       	ldi	r25, 0x02	; 2
    f938:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
			_delay_ms(700);
			
			LCD_Clear();
			LCD_Printpos(0,0, "burning flash       ");
			LCD_Printpos(1,0, "don't turn off       ");
			write_firmware_to_flash();
    f93c:	0e 94 70 79 	call	0xf2e0	; 0xf2e0 <write_firmware_to_flash>
    f940:	5a ce       	rjmp	.-844    	; 0xf5f6 <__vector_20+0x76>
			//AND COMPARES IT TO THE CHECKSUM IN THE HEX-RECORD
			
			uint16_t vec_sum = 0;												//local helper variable for checksum calculation
			uint8_t checksum_from_file = hex_buffer_array[hex_record_size-1];   //read checksum from file
		
			for(int i = 0; i < hex_record_size - 1; ++i){						// accumulate record for checksum calculation
    f942:	40 e0       	ldi	r20, 0x00	; 0
    f944:	f3 ce       	rjmp	.-538    	; 0xf72c <__vector_20+0x1ac>

0000f946 <strcmp>:
    f946:	fb 01       	movw	r30, r22
    f948:	dc 01       	movw	r26, r24
    f94a:	8d 91       	ld	r24, X+
    f94c:	01 90       	ld	r0, Z+
    f94e:	80 19       	sub	r24, r0
    f950:	01 10       	cpse	r0, r1
    f952:	d9 f3       	breq	.-10     	; 0xf94a <strcmp+0x4>
    f954:	99 0b       	sbc	r25, r25
    f956:	08 95       	ret

0000f958 <_exit>:
    f958:	f8 94       	cli

0000f95a <__stop_program>:
    f95a:	ff cf       	rjmp	.-2      	; 0xf95a <__stop_program>
