
BootloaderProto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000192  00800100  0000fa9c  00000b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a9c  0000f000  0000f000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006d  00800292  00800292  00000cc2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cc2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cf4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000219e  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab3  00000000  00000000  00002f72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bf3  00000000  00000000  00003a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  00004618  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a0  00000000  00000000  00004864  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012f1  00000000  00000000  00005004  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000062f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000f000 <__vectors>:
    f000:	0c 94 3e 78 	jmp	0xf07c	; 0xf07c <__ctors_end>
    f004:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f008:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f00c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f010:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f014:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f018:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f01c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f020:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f024:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f028:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f02c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f030:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f034:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f038:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f03c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f040:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f044:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f048:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f04c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f050:	0c 94 25 7b 	jmp	0xf64a	; 0xf64a <__vector_20>
    f054:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f058:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f05c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f060:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f064:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f068:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f06c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f070:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f074:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f078:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>

0000f07c <__ctors_end>:
    f07c:	11 24       	eor	r1, r1
    f07e:	1f be       	out	0x3f, r1	; 63
    f080:	cf ef       	ldi	r28, 0xFF	; 255
    f082:	d0 e1       	ldi	r29, 0x10	; 16
    f084:	de bf       	out	0x3e, r29	; 62
    f086:	cd bf       	out	0x3d, r28	; 61

0000f088 <__do_copy_data>:
    f088:	12 e0       	ldi	r17, 0x02	; 2
    f08a:	a0 e0       	ldi	r26, 0x00	; 0
    f08c:	b1 e0       	ldi	r27, 0x01	; 1
    f08e:	ec e9       	ldi	r30, 0x9C	; 156
    f090:	fa ef       	ldi	r31, 0xFA	; 250
    f092:	02 c0       	rjmp	.+4      	; 0xf098 <__do_copy_data+0x10>
    f094:	05 90       	lpm	r0, Z+
    f096:	0d 92       	st	X+, r0
    f098:	a2 39       	cpi	r26, 0x92	; 146
    f09a:	b1 07       	cpc	r27, r17
    f09c:	d9 f7       	brne	.-10     	; 0xf094 <__do_copy_data+0xc>

0000f09e <__do_clear_bss>:
    f09e:	22 e0       	ldi	r18, 0x02	; 2
    f0a0:	a2 e9       	ldi	r26, 0x92	; 146
    f0a2:	b2 e0       	ldi	r27, 0x02	; 2
    f0a4:	01 c0       	rjmp	.+2      	; 0xf0a8 <.do_clear_bss_start>

0000f0a6 <.do_clear_bss_loop>:
    f0a6:	1d 92       	st	X+, r1

0000f0a8 <.do_clear_bss_start>:
    f0a8:	af 3f       	cpi	r26, 0xFF	; 255
    f0aa:	b2 07       	cpc	r27, r18
    f0ac:	e1 f7       	brne	.-8      	; 0xf0a6 <.do_clear_bss_loop>
    f0ae:	0e 94 7f 7a 	call	0xf4fe	; 0xf4fe <main>
    f0b2:	0c 94 4c 7d 	jmp	0xfa98	; 0xfa98 <_exit>

0000f0b6 <__bad_interrupt>:
    f0b6:	0c 94 00 78 	jmp	0xf000	; 0xf000 <__vectors>

0000f0ba <LCD_Action>:
{
	while (!(UCSR0A & (1<<RXC0)))
	;   
	
	return UDR0;												
}
    f0ba:	98 b1       	in	r25, 0x08	; 8
    f0bc:	9f 70       	andi	r25, 0x0F	; 15
    f0be:	28 2f       	mov	r18, r24
    f0c0:	20 7f       	andi	r18, 0xF0	; 240
    f0c2:	92 2b       	or	r25, r18
    f0c4:	98 b9       	out	0x08, r25	; 8
    f0c6:	42 98       	cbi	0x08, 2	; 8
    f0c8:	43 9a       	sbi	0x08, 3	; 8
    f0ca:	36 e0       	ldi	r19, 0x06	; 6
    f0cc:	3a 95       	dec	r19
    f0ce:	f1 f7       	brne	.-4      	; 0xf0cc <LCD_Action+0x12>
    f0d0:	00 c0       	rjmp	.+0      	; 0xf0d2 <LCD_Action+0x18>
    f0d2:	43 98       	cbi	0x08, 3	; 8
    f0d4:	9d e0       	ldi	r25, 0x0D	; 13
    f0d6:	9a 95       	dec	r25
    f0d8:	f1 f7       	brne	.-4      	; 0xf0d6 <LCD_Action+0x1c>
    f0da:	00 00       	nop
    f0dc:	28 b1       	in	r18, 0x08	; 8
    f0de:	2f 70       	andi	r18, 0x0F	; 15
    f0e0:	30 e1       	ldi	r19, 0x10	; 16
    f0e2:	83 9f       	mul	r24, r19
    f0e4:	c0 01       	movw	r24, r0
    f0e6:	11 24       	eor	r1, r1
    f0e8:	82 2b       	or	r24, r18
    f0ea:	88 b9       	out	0x08, r24	; 8
    f0ec:	43 9a       	sbi	0x08, 3	; 8
    f0ee:	86 e0       	ldi	r24, 0x06	; 6
    f0f0:	8a 95       	dec	r24
    f0f2:	f1 f7       	brne	.-4      	; 0xf0f0 <LCD_Action+0x36>
    f0f4:	00 c0       	rjmp	.+0      	; 0xf0f6 <LCD_Action+0x3c>
    f0f6:	43 98       	cbi	0x08, 3	; 8
    f0f8:	8f e0       	ldi	r24, 0x0F	; 15
    f0fa:	97 e2       	ldi	r25, 0x27	; 39
    f0fc:	01 97       	sbiw	r24, 0x01	; 1
    f0fe:	f1 f7       	brne	.-4      	; 0xf0fc <LCD_Action+0x42>
    f100:	00 c0       	rjmp	.+0      	; 0xf102 <LCD_Action+0x48>
    f102:	00 00       	nop
    f104:	08 95       	ret

0000f106 <LCD_Init>:
    f106:	8f ef       	ldi	r24, 0xFF	; 255
    f108:	87 b9       	out	0x07, r24	; 7
    f10a:	2f e5       	ldi	r18, 0x5F	; 95
    f10c:	8a ee       	ldi	r24, 0xEA	; 234
    f10e:	90 e0       	ldi	r25, 0x00	; 0
    f110:	21 50       	subi	r18, 0x01	; 1
    f112:	80 40       	sbci	r24, 0x00	; 0
    f114:	90 40       	sbci	r25, 0x00	; 0
    f116:	e1 f7       	brne	.-8      	; 0xf110 <LCD_Init+0xa>
    f118:	00 c0       	rjmp	.+0      	; 0xf11a <LCD_Init+0x14>
    f11a:	00 00       	nop
    f11c:	82 e0       	ldi	r24, 0x02	; 2
    f11e:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    f122:	88 e2       	ldi	r24, 0x28	; 40
    f124:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    f128:	8c e0       	ldi	r24, 0x0C	; 12
    f12a:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    f12e:	86 e0       	ldi	r24, 0x06	; 6
    f130:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    f134:	81 e0       	ldi	r24, 0x01	; 1
    f136:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    f13a:	8f e0       	ldi	r24, 0x0F	; 15
    f13c:	97 e2       	ldi	r25, 0x27	; 39
    f13e:	01 97       	sbiw	r24, 0x01	; 1
    f140:	f1 f7       	brne	.-4      	; 0xf13e <LCD_Init+0x38>
    f142:	00 c0       	rjmp	.+0      	; 0xf144 <LCD_Init+0x3e>
    f144:	00 00       	nop
    f146:	08 95       	ret

0000f148 <LCD_Print>:
    f148:	fc 01       	movw	r30, r24
    f14a:	90 81       	ld	r25, Z
    f14c:	99 23       	and	r25, r25
    f14e:	49 f1       	breq	.+82     	; 0xf1a2 <LCD_Print+0x5a>
    f150:	28 b1       	in	r18, 0x08	; 8
    f152:	2f 70       	andi	r18, 0x0F	; 15
    f154:	90 7f       	andi	r25, 0xF0	; 240
    f156:	92 2b       	or	r25, r18
    f158:	98 b9       	out	0x08, r25	; 8
    f15a:	42 9a       	sbi	0x08, 2	; 8
    f15c:	43 9a       	sbi	0x08, 3	; 8
    f15e:	82 e4       	ldi	r24, 0x42	; 66
    f160:	8a 95       	dec	r24
    f162:	f1 f7       	brne	.-4      	; 0xf160 <LCD_Print+0x18>
    f164:	00 c0       	rjmp	.+0      	; 0xf166 <LCD_Print+0x1e>
    f166:	43 98       	cbi	0x08, 3	; 8
    f168:	95 e8       	ldi	r25, 0x85	; 133
    f16a:	9a 95       	dec	r25
    f16c:	f1 f7       	brne	.-4      	; 0xf16a <LCD_Print+0x22>
    f16e:	00 00       	nop
    f170:	48 b1       	in	r20, 0x08	; 8
    f172:	91 91       	ld	r25, Z+
    f174:	80 e1       	ldi	r24, 0x10	; 16
    f176:	98 9f       	mul	r25, r24
    f178:	90 01       	movw	r18, r0
    f17a:	11 24       	eor	r1, r1
    f17c:	94 2f       	mov	r25, r20
    f17e:	9f 70       	andi	r25, 0x0F	; 15
    f180:	29 2b       	or	r18, r25
    f182:	28 b9       	out	0x08, r18	; 8
    f184:	43 9a       	sbi	0x08, 3	; 8
    f186:	92 e4       	ldi	r25, 0x42	; 66
    f188:	9a 95       	dec	r25
    f18a:	f1 f7       	brne	.-4      	; 0xf188 <LCD_Print+0x40>
    f18c:	00 c0       	rjmp	.+0      	; 0xf18e <LCD_Print+0x46>
    f18e:	43 98       	cbi	0x08, 3	; 8
    f190:	89 ef       	ldi	r24, 0xF9	; 249
    f192:	90 e0       	ldi	r25, 0x00	; 0
    f194:	01 97       	sbiw	r24, 0x01	; 1
    f196:	f1 f7       	brne	.-4      	; 0xf194 <LCD_Print+0x4c>
    f198:	00 c0       	rjmp	.+0      	; 0xf19a <LCD_Print+0x52>
    f19a:	00 00       	nop
    f19c:	90 81       	ld	r25, Z
    f19e:	91 11       	cpse	r25, r1
    f1a0:	d7 cf       	rjmp	.-82     	; 0xf150 <LCD_Print+0x8>
    f1a2:	08 95       	ret

0000f1a4 <SPI_MasterInit>:
    f1a4:	8c b5       	in	r24, 0x2c	; 44
    f1a6:	8d 65       	ori	r24, 0x5D	; 93
    f1a8:	8c bd       	out	0x2c, r24	; 44
    f1aa:	8c b5       	in	r24, 0x2c	; 44
    f1ac:	83 60       	ori	r24, 0x03	; 3
    f1ae:	8c bd       	out	0x2c, r24	; 44
    f1b0:	8c b5       	in	r24, 0x2c	; 44
    f1b2:	8f 7d       	andi	r24, 0xDF	; 223
    f1b4:	8c bd       	out	0x2c, r24	; 44
    f1b6:	8c b5       	in	r24, 0x2c	; 44
    f1b8:	8f 77       	andi	r24, 0x7F	; 127
    f1ba:	8c bd       	out	0x2c, r24	; 44
    f1bc:	2c 9a       	sbi	0x05, 4	; 5
    f1be:	2b 9a       	sbi	0x05, 3	; 5
    f1c0:	08 95       	ret

0000f1c2 <SPI_SRAM_ByteWrite>:
    f1c2:	cf 92       	push	r12
    f1c4:	df 92       	push	r13
    f1c6:	ef 92       	push	r14
    f1c8:	ff 92       	push	r15
    f1ca:	0f 93       	push	r16
    f1cc:	1f 93       	push	r17
    f1ce:	6c 01       	movw	r12, r24
    f1d0:	ee 24       	eor	r14, r14
    f1d2:	ff 24       	eor	r15, r15
    f1d4:	07 2f       	mov	r16, r23
    f1d6:	18 2f       	mov	r17, r24
    f1d8:	29 2f       	mov	r18, r25
    f1da:	33 27       	eor	r19, r19
    f1dc:	2b 98       	cbi	0x05, 3	; 5
    f1de:	52 e0       	ldi	r21, 0x02	; 2
    f1e0:	5e bd       	out	0x2e, r21	; 46
    f1e2:	0d b4       	in	r0, 0x2d	; 45
    f1e4:	07 fe       	sbrs	r0, 7
    f1e6:	fd cf       	rjmp	.-6      	; 0xf1e2 <SPI_SRAM_ByteWrite+0x20>
    f1e8:	ce bc       	out	0x2e, r12	; 46
    f1ea:	0d b4       	in	r0, 0x2d	; 45
    f1ec:	07 fe       	sbrs	r0, 7
    f1ee:	fd cf       	rjmp	.-6      	; 0xf1ea <SPI_SRAM_ByteWrite+0x28>
    f1f0:	0e bd       	out	0x2e, r16	; 46
    f1f2:	0d b4       	in	r0, 0x2d	; 45
    f1f4:	07 fe       	sbrs	r0, 7
    f1f6:	fd cf       	rjmp	.-6      	; 0xf1f2 <SPI_SRAM_ByteWrite+0x30>
    f1f8:	6e bd       	out	0x2e, r22	; 46
    f1fa:	0d b4       	in	r0, 0x2d	; 45
    f1fc:	07 fe       	sbrs	r0, 7
    f1fe:	fd cf       	rjmp	.-6      	; 0xf1fa <SPI_SRAM_ByteWrite+0x38>
    f200:	4e bd       	out	0x2e, r20	; 46
    f202:	0d b4       	in	r0, 0x2d	; 45
    f204:	07 fe       	sbrs	r0, 7
    f206:	fd cf       	rjmp	.-6      	; 0xf202 <SPI_SRAM_ByteWrite+0x40>
    f208:	2b 9a       	sbi	0x05, 3	; 5
    f20a:	1f 91       	pop	r17
    f20c:	0f 91       	pop	r16
    f20e:	ff 90       	pop	r15
    f210:	ef 90       	pop	r14
    f212:	df 90       	pop	r13
    f214:	cf 90       	pop	r12
    f216:	08 95       	ret

0000f218 <SPI_SRAM_ByteRead>:
    f218:	cf 92       	push	r12
    f21a:	df 92       	push	r13
    f21c:	ef 92       	push	r14
    f21e:	ff 92       	push	r15
    f220:	0f 93       	push	r16
    f222:	1f 93       	push	r17
    f224:	6c 01       	movw	r12, r24
    f226:	ee 24       	eor	r14, r14
    f228:	ff 24       	eor	r15, r15
    f22a:	07 2f       	mov	r16, r23
    f22c:	18 2f       	mov	r17, r24
    f22e:	29 2f       	mov	r18, r25
    f230:	33 27       	eor	r19, r19
    f232:	2b 98       	cbi	0x05, 3	; 5
    f234:	43 e0       	ldi	r20, 0x03	; 3
    f236:	4e bd       	out	0x2e, r20	; 46
    f238:	0d b4       	in	r0, 0x2d	; 45
    f23a:	07 fe       	sbrs	r0, 7
    f23c:	fd cf       	rjmp	.-6      	; 0xf238 <SPI_SRAM_ByteRead+0x20>
    f23e:	ce bc       	out	0x2e, r12	; 46
    f240:	0d b4       	in	r0, 0x2d	; 45
    f242:	07 fe       	sbrs	r0, 7
    f244:	fd cf       	rjmp	.-6      	; 0xf240 <SPI_SRAM_ByteRead+0x28>
    f246:	0e bd       	out	0x2e, r16	; 46
    f248:	0d b4       	in	r0, 0x2d	; 45
    f24a:	07 fe       	sbrs	r0, 7
    f24c:	fd cf       	rjmp	.-6      	; 0xf248 <SPI_SRAM_ByteRead+0x30>
    f24e:	6e bd       	out	0x2e, r22	; 46
    f250:	0d b4       	in	r0, 0x2d	; 45
    f252:	07 fe       	sbrs	r0, 7
    f254:	fd cf       	rjmp	.-6      	; 0xf250 <SPI_SRAM_ByteRead+0x38>
    f256:	8f ef       	ldi	r24, 0xFF	; 255
    f258:	8e bd       	out	0x2e, r24	; 46
    f25a:	0d b4       	in	r0, 0x2d	; 45
    f25c:	07 fe       	sbrs	r0, 7
    f25e:	fd cf       	rjmp	.-6      	; 0xf25a <SPI_SRAM_ByteRead+0x42>
    f260:	8e b5       	in	r24, 0x2e	; 46
    f262:	2b 9a       	sbi	0x05, 3	; 5
    f264:	1f 91       	pop	r17
    f266:	0f 91       	pop	r16
    f268:	ff 90       	pop	r15
    f26a:	ef 90       	pop	r14
    f26c:	df 90       	pop	r13
    f26e:	cf 90       	pop	r12
    f270:	08 95       	ret

0000f272 <USART_Init>:
    f272:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    f276:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    f27a:	e1 ec       	ldi	r30, 0xC1	; 193
    f27c:	f0 e0       	ldi	r31, 0x00	; 0
    f27e:	80 81       	ld	r24, Z
    f280:	88 60       	ori	r24, 0x08	; 8
    f282:	80 83       	st	Z, r24
    f284:	80 81       	ld	r24, Z
    f286:	80 61       	ori	r24, 0x10	; 16
    f288:	80 83       	st	Z, r24
    f28a:	80 81       	ld	r24, Z
    f28c:	80 68       	ori	r24, 0x80	; 128
    f28e:	80 83       	st	Z, r24
    f290:	a0 ec       	ldi	r26, 0xC0	; 192
    f292:	b0 e0       	ldi	r27, 0x00	; 0
    f294:	8c 91       	ld	r24, X
    f296:	80 68       	ori	r24, 0x80	; 128
    f298:	8c 93       	st	X, r24
    f29a:	8e e0       	ldi	r24, 0x0E	; 14
    f29c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    f2a0:	80 81       	ld	r24, Z
    f2a2:	80 69       	ori	r24, 0x90	; 144
    f2a4:	80 83       	st	Z, r24
    f2a6:	83 b7       	in	r24, 0x33	; 51
    f2a8:	81 7f       	andi	r24, 0xF1	; 241
    f2aa:	83 bf       	out	0x33, r24	; 51
    f2ac:	08 95       	ret

0000f2ae <USART_transmit_string>:
    f2ae:	cf 93       	push	r28
    f2b0:	df 93       	push	r29
    f2b2:	dc 01       	movw	r26, r24
    f2b4:	ec 01       	movw	r28, r24
    f2b6:	20 e0       	ldi	r18, 0x00	; 0
    f2b8:	30 e0       	ldi	r19, 0x00	; 0
    f2ba:	fd 01       	movw	r30, r26
    f2bc:	01 90       	ld	r0, Z+
    f2be:	00 20       	and	r0, r0
    f2c0:	e9 f7       	brne	.-6      	; 0xf2bc <USART_transmit_string+0xe>
    f2c2:	31 97       	sbiw	r30, 0x01	; 1
    f2c4:	ea 1b       	sub	r30, r26
    f2c6:	fb 0b       	sbc	r31, r27
    f2c8:	e2 17       	cp	r30, r18
    f2ca:	f3 07       	cpc	r31, r19
    f2cc:	51 f0       	breq	.+20     	; 0xf2e2 <USART_transmit_string+0x34>
    f2ce:	89 91       	ld	r24, Y+
    f2d0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
    f2d4:	95 ff       	sbrs	r25, 5
    f2d6:	fc cf       	rjmp	.-8      	; 0xf2d0 <USART_transmit_string+0x22>
    f2d8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    f2dc:	2f 5f       	subi	r18, 0xFF	; 255
    f2de:	3f 4f       	sbci	r19, 0xFF	; 255
    f2e0:	ec cf       	rjmp	.-40     	; 0xf2ba <USART_transmit_string+0xc>
    f2e2:	df 91       	pop	r29
    f2e4:	cf 91       	pop	r28
    f2e6:	08 95       	ret

0000f2e8 <flash_content_ok>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    f2e8:	2f e7       	ldi	r18, 0x7F	; 127
    f2ea:	8a e1       	ldi	r24, 0x1A	; 26
    f2ec:	96 e0       	ldi	r25, 0x06	; 6
    f2ee:	21 50       	subi	r18, 0x01	; 1
    f2f0:	80 40       	sbci	r24, 0x00	; 0
    f2f2:	90 40       	sbci	r25, 0x00	; 0
    f2f4:	e1 f7       	brne	.-8      	; 0xf2ee <flash_content_ok+0x6>
    f2f6:	00 c0       	rjmp	.+0      	; 0xf2f8 <flash_content_ok+0x10>
    f2f8:	00 00       	nop
	_delay_ms(2);
}

void LCD_Clear()
{
	LCD_Action (0x01);		//Clear LCD
    f2fa:	81 e0       	ldi	r24, 0x01	; 1
    f2fc:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    f300:	25 e8       	ldi	r18, 0x85	; 133
    f302:	2a 95       	dec	r18
    f304:	f1 f7       	brne	.-4      	; 0xf302 <flash_content_ok+0x1a>
    f306:	00 00       	nop
	_delay_us(20);
	LCD_Action (0x80);		//Move to Position Line 1, Position 1
    f308:	80 e8       	ldi	r24, 0x80	; 128
    f30a:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
    f30e:	80 e8       	ldi	r24, 0x80	; 128
    f310:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
	
	LCD_Print(str);
    f314:	87 e1       	ldi	r24, 0x17	; 23
    f316:	91 e0       	ldi	r25, 0x01	; 1
    f318:	0e 94 a4 78 	call	0xf148	; 0xf148 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
    f31c:	80 ec       	ldi	r24, 0xC0	; 192
    f31e:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	
	LCD_Print(str);
    f322:	88 e2       	ldi	r24, 0x28	; 40
    f324:	91 e0       	ldi	r25, 0x01	; 1
    f326:	0e 94 a4 78 	call	0xf148	; 0xf148 <LCD_Print>
	_delay_ms(100);
	LCD_Clear();
	LCD_Printpos(0,0, "validating flash");
	LCD_Printpos(1,0, "please wait     ");
	
	uint16_t flash_EOF = (byte_ctr >> 1);
    f32a:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <byte_ctr>
    f32e:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <byte_ctr+0x1>
    f332:	a0 91 97 02 	lds	r26, 0x0297	; 0x800297 <byte_ctr+0x2>
    f336:	b0 91 98 02 	lds	r27, 0x0298	; 0x800298 <byte_ctr+0x3>
	}
	*/
	
	return 1;
	
}
    f33a:	81 e0       	ldi	r24, 0x01	; 1
    f33c:	08 95       	ret

0000f33e <write_firmware_to_flash>:

void write_firmware_to_flash(const uint32_t byte_ctr)
{
    f33e:	2f 92       	push	r2
    f340:	3f 92       	push	r3
    f342:	4f 92       	push	r4
    f344:	5f 92       	push	r5
    f346:	6f 92       	push	r6
    f348:	7f 92       	push	r7
    f34a:	8f 92       	push	r8
    f34c:	9f 92       	push	r9
    f34e:	af 92       	push	r10
    f350:	bf 92       	push	r11
    f352:	cf 92       	push	r12
    f354:	df 92       	push	r13
    f356:	ef 92       	push	r14
    f358:	ff 92       	push	r15
    f35a:	0f 93       	push	r16
    f35c:	1f 93       	push	r17
    f35e:	cf 93       	push	r28
    f360:	df 93       	push	r29
	uint32_t flash_EOF = ((byte_ctr >> 1) + 2048);  // => /2, and 2 pages safety
    f362:	2b 01       	movw	r4, r22
    f364:	3c 01       	movw	r6, r24
    f366:	76 94       	lsr	r7
    f368:	67 94       	ror	r6
    f36a:	57 94       	ror	r5
    f36c:	47 94       	ror	r4
    f36e:	28 e0       	ldi	r18, 0x08	; 8
    f370:	52 0e       	add	r5, r18
    f372:	61 1c       	adc	r6, r1
    f374:	71 1c       	adc	r7, r1
	uint32_t sram_address = 0;
	uint32_t flash_address = 0;
	cli();
    f376:	f8 94       	cli
	 boot_rww_enable();
    f378:	81 e1       	ldi	r24, 0x11	; 17
    f37a:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f0057>
    f37e:	e8 95       	spm

void write_firmware_to_flash(const uint32_t byte_ctr)
{
	uint32_t flash_EOF = ((byte_ctr >> 1) + 2048);  // => /2, and 2 pages safety
	uint32_t sram_address = 0;
	uint32_t flash_address = 0;
    f380:	c1 2c       	mov	r12, r1
    f382:	d1 2c       	mov	r13, r1
    f384:	76 01       	movw	r14, r12
	cli();
	 boot_rww_enable();
	
	 while(flash_address < flash_EOF ){
		
		boot_page_erase_safe(sram_address) ;
    f386:	13 e0       	ldi	r17, 0x03	; 3
		
		for(int i = 0; i < 128; ++i){
			uint16_t lsb =  SPI_SRAM_ByteRead(sram_address);
			uint8_t msb =  SPI_SRAM_ByteRead(sram_address + 1 );
			uint16_t data = (msb << 8)  | lsb;
			boot_page_fill_safe(sram_address, data);
    f388:	c1 e0       	ldi	r28, 0x01	; 1
			sram_address += 2;
		}
		
		
			boot_page_write_safe(flash_address);
    f38a:	d5 e0       	ldi	r29, 0x05	; 5
	cli();
	 boot_rww_enable();
	
	 while(flash_address < flash_EOF ){
		
		boot_page_erase_safe(sram_address) ;
    f38c:	07 b6       	in	r0, 0x37	; 55
    f38e:	00 fc       	sbrc	r0, 0
    f390:	fd cf       	rjmp	.-6      	; 0xf38c <write_firmware_to_flash+0x4e>
    f392:	f9 99       	sbic	0x1f, 1	; 31
    f394:	fe cf       	rjmp	.-4      	; 0xf392 <write_firmware_to_flash+0x54>
    f396:	16 01       	movw	r2, r12
    f398:	f6 01       	movw	r30, r12
    f39a:	10 93 57 00 	sts	0x0057, r17	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f0057>
    f39e:	e8 95       	spm
		boot_spm_busy_wait();  
    f3a0:	07 b6       	in	r0, 0x37	; 55
    f3a2:	00 fc       	sbrc	r0, 0
    f3a4:	fd cf       	rjmp	.-6      	; 0xf3a0 <write_firmware_to_flash+0x62>
    f3a6:	46 01       	movw	r8, r12
    f3a8:	57 01       	movw	r10, r14
    f3aa:	ff ef       	ldi	r31, 0xFF	; 255
    f3ac:	9f 1a       	sub	r9, r31
    f3ae:	af 0a       	sbc	r10, r31
    f3b0:	bf 0a       	sbc	r11, r31
		
		for(int i = 0; i < 128; ++i){
			uint16_t lsb =  SPI_SRAM_ByteRead(sram_address);
    f3b2:	c7 01       	movw	r24, r14
    f3b4:	b6 01       	movw	r22, r12
    f3b6:	0e 94 0c 79 	call	0xf218	; 0xf218 <SPI_SRAM_ByteRead>
    f3ba:	08 2f       	mov	r16, r24
			uint8_t msb =  SPI_SRAM_ByteRead(sram_address + 1 );
    f3bc:	c7 01       	movw	r24, r14
    f3be:	b6 01       	movw	r22, r12
    f3c0:	6f 5f       	subi	r22, 0xFF	; 255
    f3c2:	7f 4f       	sbci	r23, 0xFF	; 255
    f3c4:	8f 4f       	sbci	r24, 0xFF	; 255
    f3c6:	9f 4f       	sbci	r25, 0xFF	; 255
    f3c8:	0e 94 0c 79 	call	0xf218	; 0xf218 <SPI_SRAM_ByteRead>
			uint16_t data = (msb << 8)  | lsb;
    f3cc:	20 2f       	mov	r18, r16
    f3ce:	30 e0       	ldi	r19, 0x00	; 0
    f3d0:	a9 01       	movw	r20, r18
    f3d2:	58 2b       	or	r21, r24
    f3d4:	ca 01       	movw	r24, r20
			boot_page_fill_safe(sram_address, data);
    f3d6:	07 b6       	in	r0, 0x37	; 55
    f3d8:	00 fc       	sbrc	r0, 0
    f3da:	fd cf       	rjmp	.-6      	; 0xf3d6 <write_firmware_to_flash+0x98>
    f3dc:	f9 99       	sbic	0x1f, 1	; 31
    f3de:	fe cf       	rjmp	.-4      	; 0xf3dc <write_firmware_to_flash+0x9e>
    f3e0:	f6 01       	movw	r30, r12
    f3e2:	0c 01       	movw	r0, r24
    f3e4:	c0 93 57 00 	sts	0x0057, r28	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f0057>
    f3e8:	e8 95       	spm
    f3ea:	11 24       	eor	r1, r1
			sram_address += 2;
    f3ec:	f2 e0       	ldi	r31, 0x02	; 2
    f3ee:	cf 0e       	add	r12, r31
    f3f0:	d1 1c       	adc	r13, r1
    f3f2:	e1 1c       	adc	r14, r1
    f3f4:	f1 1c       	adc	r15, r1
	 while(flash_address < flash_EOF ){
		
		boot_page_erase_safe(sram_address) ;
		boot_spm_busy_wait();  
		
		for(int i = 0; i < 128; ++i){
    f3f6:	8c 14       	cp	r8, r12
    f3f8:	9d 04       	cpc	r9, r13
    f3fa:	ae 04       	cpc	r10, r14
    f3fc:	bf 04       	cpc	r11, r15
    f3fe:	c9 f6       	brne	.-78     	; 0xf3b2 <write_firmware_to_flash+0x74>
			boot_page_fill_safe(sram_address, data);
			sram_address += 2;
		}
		
		
			boot_page_write_safe(flash_address);
    f400:	07 b6       	in	r0, 0x37	; 55
    f402:	00 fc       	sbrc	r0, 0
    f404:	fd cf       	rjmp	.-6      	; 0xf400 <write_firmware_to_flash+0xc2>
    f406:	f9 99       	sbic	0x1f, 1	; 31
    f408:	fe cf       	rjmp	.-4      	; 0xf406 <write_firmware_to_flash+0xc8>
    f40a:	f1 01       	movw	r30, r2
    f40c:	d0 93 57 00 	sts	0x0057, r29	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f0057>
    f410:	e8 95       	spm
			boot_spm_busy_wait();  
    f412:	07 b6       	in	r0, 0x37	; 55
    f414:	00 fc       	sbrc	r0, 0
    f416:	fd cf       	rjmp	.-6      	; 0xf412 <write_firmware_to_flash+0xd4>
	uint32_t sram_address = 0;
	uint32_t flash_address = 0;
	cli();
	 boot_rww_enable();
	
	 while(flash_address < flash_EOF ){
    f418:	84 14       	cp	r8, r4
    f41a:	95 04       	cpc	r9, r5
    f41c:	a6 04       	cpc	r10, r6
    f41e:	b7 04       	cpc	r11, r7
    f420:	18 f4       	brcc	.+6      	; 0xf428 <write_firmware_to_flash+0xea>
    f422:	75 01       	movw	r14, r10
    f424:	64 01       	movw	r12, r8
    f426:	b2 cf       	rjmp	.-156    	; 0xf38c <write_firmware_to_flash+0x4e>
		
			flash_address += 256;
		
	}
	
	if(flash_content_ok()){
    f428:	0e 94 74 79 	call	0xf2e8	; 0xf2e8 <flash_content_ok>
    f42c:	81 11       	cpse	r24, r1
    f42e:	38 c0       	rjmp	.+112    	; 0xf4a0 <write_firmware_to_flash+0x162>
		_delay_ms(1000);
		//start();
		
	}
	else{
		boot_rww_enable ();
    f430:	81 e1       	ldi	r24, 0x11	; 17
    f432:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f0057>
    f436:	e8 95       	spm
	_delay_ms(2);
}

void LCD_Clear()
{
	LCD_Action (0x01);		//Clear LCD
    f438:	81 e0       	ldi	r24, 0x01	; 1
    f43a:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    f43e:	f5 e8       	ldi	r31, 0x85	; 133
    f440:	fa 95       	dec	r31
    f442:	f1 f7       	brne	.-4      	; 0xf440 <write_firmware_to_flash+0x102>
    f444:	00 00       	nop
	_delay_us(20);
	LCD_Action (0x80);		//Move to Position Line 1, Position 1
    f446:	80 e8       	ldi	r24, 0x80	; 128
    f448:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
    f44c:	80 e8       	ldi	r24, 0x80	; 128
    f44e:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
	
	LCD_Print(str);
    f452:	88 e5       	ldi	r24, 0x58	; 88
    f454:	91 e0       	ldi	r25, 0x01	; 1
    f456:	0e 94 a4 78 	call	0xf148	; 0xf148 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
    f45a:	80 ec       	ldi	r24, 0xC0	; 192
    f45c:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	
	LCD_Print(str);
    f460:	84 e6       	ldi	r24, 0x64	; 100
    f462:	91 e0       	ldi	r25, 0x01	; 1
    f464:	0e 94 a4 78 	call	0xf148	; 0xf148 <LCD_Print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    f468:	2f ef       	ldi	r18, 0xFF	; 255
    f46a:	48 e0       	ldi	r20, 0x08	; 8
    f46c:	5d e3       	ldi	r21, 0x3D	; 61
    f46e:	21 50       	subi	r18, 0x01	; 1
    f470:	40 40       	sbci	r20, 0x00	; 0
    f472:	50 40       	sbci	r21, 0x00	; 0
    f474:	e1 f7       	brne	.-8      	; 0xf46e <write_firmware_to_flash+0x130>
    f476:	00 c0       	rjmp	.+0      	; 0xf478 <write_firmware_to_flash+0x13a>
    f478:	00 00       	nop
		_delay_ms(1000);
		
	}
	
 
}
    f47a:	df 91       	pop	r29
    f47c:	cf 91       	pop	r28
    f47e:	1f 91       	pop	r17
    f480:	0f 91       	pop	r16
    f482:	ff 90       	pop	r15
    f484:	ef 90       	pop	r14
    f486:	df 90       	pop	r13
    f488:	cf 90       	pop	r12
    f48a:	bf 90       	pop	r11
    f48c:	af 90       	pop	r10
    f48e:	9f 90       	pop	r9
    f490:	8f 90       	pop	r8
    f492:	7f 90       	pop	r7
    f494:	6f 90       	pop	r6
    f496:	5f 90       	pop	r5
    f498:	4f 90       	pop	r4
    f49a:	3f 90       	pop	r3
    f49c:	2f 90       	pop	r2
    f49e:	08 95       	ret
		
	}
	
	if(flash_content_ok()){
	
		boot_rww_enable ();
    f4a0:	81 e1       	ldi	r24, 0x11	; 17
    f4a2:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f0057>
    f4a6:	e8 95       	spm
    f4a8:	ff e7       	ldi	r31, 0x7F	; 127
    f4aa:	2a e1       	ldi	r18, 0x1A	; 26
    f4ac:	46 e0       	ldi	r20, 0x06	; 6
    f4ae:	f1 50       	subi	r31, 0x01	; 1
    f4b0:	20 40       	sbci	r18, 0x00	; 0
    f4b2:	40 40       	sbci	r20, 0x00	; 0
    f4b4:	e1 f7       	brne	.-8      	; 0xf4ae <write_firmware_to_flash+0x170>
    f4b6:	00 c0       	rjmp	.+0      	; 0xf4b8 <write_firmware_to_flash+0x17a>
    f4b8:	00 00       	nop
	_delay_ms(2);
}

void LCD_Clear()
{
	LCD_Action (0x01);		//Clear LCD
    f4ba:	81 e0       	ldi	r24, 0x01	; 1
    f4bc:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    f4c0:	55 e8       	ldi	r21, 0x85	; 133
    f4c2:	5a 95       	dec	r21
    f4c4:	f1 f7       	brne	.-4      	; 0xf4c2 <write_firmware_to_flash+0x184>
    f4c6:	00 00       	nop
	_delay_us(20);
	LCD_Action (0x80);		//Move to Position Line 1, Position 1
    f4c8:	80 e8       	ldi	r24, 0x80	; 128
    f4ca:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
    f4ce:	80 e8       	ldi	r24, 0x80	; 128
    f4d0:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
	
	LCD_Print(str);
    f4d4:	89 e3       	ldi	r24, 0x39	; 57
    f4d6:	91 e0       	ldi	r25, 0x01	; 1
    f4d8:	0e 94 a4 78 	call	0xf148	; 0xf148 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
    f4dc:	80 ec       	ldi	r24, 0xC0	; 192
    f4de:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	
	LCD_Print(str);
    f4e2:	88 e4       	ldi	r24, 0x48	; 72
    f4e4:	91 e0       	ldi	r25, 0x01	; 1
    f4e6:	0e 94 a4 78 	call	0xf148	; 0xf148 <LCD_Print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    f4ea:	8f ef       	ldi	r24, 0xFF	; 255
    f4ec:	98 e0       	ldi	r25, 0x08	; 8
    f4ee:	ed e3       	ldi	r30, 0x3D	; 61
    f4f0:	81 50       	subi	r24, 0x01	; 1
    f4f2:	90 40       	sbci	r25, 0x00	; 0
    f4f4:	e0 40       	sbci	r30, 0x00	; 0
    f4f6:	e1 f7       	brne	.-8      	; 0xf4f0 <write_firmware_to_flash+0x1b2>
    f4f8:	00 c0       	rjmp	.+0      	; 0xf4fa <write_firmware_to_flash+0x1bc>
    f4fa:	00 00       	nop
    f4fc:	be cf       	rjmp	.-132    	; 0xf47a <write_firmware_to_flash+0x13c>

0000f4fe <main>:
	
	
	
	//SET ATMEGA PORTS/PINS TO IN- OR OUTPUTS
	
	DDRA = 0x0f;
    f4fe:	8f e0       	ldi	r24, 0x0F	; 15
    f500:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;
    f502:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xbf;
    f504:	8f eb       	ldi	r24, 0xBF	; 191
    f506:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xfe;
    f508:	9e ef       	ldi	r25, 0xFE	; 254
    f50a:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x01; //internal pull-up rx-pin
    f50c:	91 e0       	ldi	r25, 0x01	; 1
    f50e:	9b b9       	out	0x0b, r25	; 11
	
	PORTB = 0xbf;
    f510:	85 b9       	out	0x05, r24	; 5
	
	PORTA = 13;  // set address for record button
    f512:	8d e0       	ldi	r24, 0x0D	; 13
    f514:	82 b9       	out	0x02, r24	; 2
	
	//INIT INTERFACES 
	USART_Init(21);  // UBRR = (F_CPU/(16*BAUD))-1 
    f516:	85 e1       	ldi	r24, 0x15	; 21
    f518:	90 e0       	ldi	r25, 0x00	; 0
    f51a:	0e 94 39 79 	call	0xf272	; 0xf272 <USART_Init>
	SPI_MasterInit();
    f51e:	0e 94 d2 78 	call	0xf1a4	; 0xf1a4 <SPI_MasterInit>
	LCD_Init();									
    f522:	0e 94 83 78 	call	0xf106	; 0xf106 <LCD_Init>
    f526:	2f e7       	ldi	r18, 0x7F	; 127
    f528:	84 e8       	ldi	r24, 0x84	; 132
    f52a:	9e e1       	ldi	r25, 0x1E	; 30
    f52c:	21 50       	subi	r18, 0x01	; 1
    f52e:	80 40       	sbci	r24, 0x00	; 0
    f530:	90 40       	sbci	r25, 0x00	; 0
    f532:	e1 f7       	brne	.-8      	; 0xf52c <main+0x2e>
    f534:	00 c0       	rjmp	.+0      	; 0xf536 <main+0x38>
    f536:	00 00       	nop
	_delay_ms(500);
	
	
	//ACTIVATE INTERRUPT
	sei();
    f538:	78 94       	sei
	}
	*/
	
	
	
	if(rec_button){
    f53a:	80 b1       	in	r24, 0x00	; 0
    f53c:	80 71       	andi	r24, 0x10	; 16
    f53e:	80 b9       	out	0x00, r24	; 0
    f540:	88 23       	and	r24, r24
    f542:	09 f4       	brne	.+2      	; 0xf546 <main+0x48>
    f544:	7a c0       	rjmp	.+244    	; 0xf63a <main+0x13c>
		//MAIN LOOP
		
		/* Interrupt Vektoren verbiegen */
		
		char sregtemp = SREG;
    f546:	9f b7       	in	r25, 0x3f	; 63
		temp = MCUCR;
    f548:	85 b7       	in	r24, 0x35	; 53
		MCUCR = temp | (1<<IVCE);
    f54a:	28 2f       	mov	r18, r24
    f54c:	21 60       	ori	r18, 0x01	; 1
    f54e:	25 bf       	out	0x35, r18	; 53
		MCUCR = temp | (1<<IVSEL);
    f550:	82 60       	ori	r24, 0x02	; 2
    f552:	85 bf       	out	0x35, r24	; 53
		SREG = sregtemp;
    f554:	9f bf       	out	0x3f, r25	; 63


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
    f556:	80 e8       	ldi	r24, 0x80	; 128
    f558:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
	
	LCD_Print(str);
    f55c:	8e e6       	ldi	r24, 0x6E	; 110
    f55e:	91 e0       	ldi	r25, 0x01	; 1
    f560:	0e 94 a4 78 	call	0xf148	; 0xf148 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
    f564:	80 ec       	ldi	r24, 0xC0	; 192
    f566:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	
	LCD_Print(str);
    f56a:	80 e8       	ldi	r24, 0x80	; 128
    f56c:	91 e0       	ldi	r25, 0x01	; 1
    f56e:	0e 94 a4 78 	call	0xf148	; 0xf148 <LCD_Print>
    f572:	11 c0       	rjmp	.+34     	; 0xf596 <main+0x98>
    f574:	2f e7       	ldi	r18, 0x7F	; 127
    f576:	8a e1       	ldi	r24, 0x1A	; 26
    f578:	96 e0       	ldi	r25, 0x06	; 6
    f57a:	21 50       	subi	r18, 0x01	; 1
    f57c:	80 40       	sbci	r24, 0x00	; 0
    f57e:	90 40       	sbci	r25, 0x00	; 0
    f580:	e1 f7       	brne	.-8      	; 0xf57a <main+0x7c>
    f582:	00 c0       	rjmp	.+0      	; 0xf584 <main+0x86>
    f584:	00 00       	nop
				
			
			}
			_delay_ms(100);
			//UPDATE CALL EVALUATION
			if(strcmp(update_array, update_call) == 0){  //if call is correct, response will be sent
    f586:	60 e0       	ldi	r22, 0x00	; 0
    f588:	71 e0       	ldi	r23, 0x01	; 1
    f58a:	8f ed       	ldi	r24, 0xDF	; 223
    f58c:	92 e0       	ldi	r25, 0x02	; 2
    f58e:	0e 94 43 7d 	call	0xfa86	; 0xfa86 <strcmp>
    f592:	89 2b       	or	r24, r25
    f594:	69 f1       	breq	.+90     	; 0xf5f0 <main+0xf2>
		while(1)  //main loop
		{
				
			
			//HANDSHAKE CALL EVALUATION
			if(strcmp(handshake_array, handshake_call) == 0){  //if call is correct, response will be sent
    f596:	66 e0       	ldi	r22, 0x06	; 6
    f598:	71 e0       	ldi	r23, 0x01	; 1
    f59a:	85 ee       	ldi	r24, 0xE5	; 229
    f59c:	92 e0       	ldi	r25, 0x02	; 2
    f59e:	0e 94 43 7d 	call	0xfa86	; 0xfa86 <strcmp>
    f5a2:	89 2b       	or	r24, r25
    f5a4:	39 f7       	brne	.-50     	; 0xf574 <main+0x76>
    f5a6:	2f ef       	ldi	r18, 0xFF	; 255
    f5a8:	84 e3       	ldi	r24, 0x34	; 52
    f5aa:	9c e0       	ldi	r25, 0x0C	; 12
    f5ac:	21 50       	subi	r18, 0x01	; 1
    f5ae:	80 40       	sbci	r24, 0x00	; 0
    f5b0:	90 40       	sbci	r25, 0x00	; 0
    f5b2:	e1 f7       	brne	.-8      	; 0xf5ac <main+0xae>
    f5b4:	00 c0       	rjmp	.+0      	; 0xf5b6 <main+0xb8>
    f5b6:	00 00       	nop
				_delay_ms(200);								   //give lordylink some time for startup
				USART_transmit_string(handshake_response);
    f5b8:	8d e8       	ldi	r24, 0x8D	; 141
    f5ba:	92 e0       	ldi	r25, 0x02	; 2
    f5bc:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <USART_transmit_string>
				strcpy(handshake_array, "                ");   //delete input buffer			
    f5c0:	81 e1       	ldi	r24, 0x11	; 17
    f5c2:	e1 ec       	ldi	r30, 0xC1	; 193
    f5c4:	f1 e0       	ldi	r31, 0x01	; 1
    f5c6:	a5 ee       	ldi	r26, 0xE5	; 229
    f5c8:	b2 e0       	ldi	r27, 0x02	; 2
    f5ca:	01 90       	ld	r0, Z+
    f5cc:	0d 92       	st	X+, r0
    f5ce:	8a 95       	dec	r24
    f5d0:	e1 f7       	brne	.-8      	; 0xf5ca <main+0xcc>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
    f5d2:	80 e8       	ldi	r24, 0x80	; 128
    f5d4:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
	
	LCD_Print(str);
    f5d8:	86 e8       	ldi	r24, 0x86	; 134
    f5da:	91 e0       	ldi	r25, 0x01	; 1
    f5dc:	0e 94 a4 78 	call	0xf148	; 0xf148 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
    f5e0:	80 ec       	ldi	r24, 0xC0	; 192
    f5e2:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	
	LCD_Print(str);
    f5e6:	86 e9       	ldi	r24, 0x96	; 150
    f5e8:	91 e0       	ldi	r25, 0x01	; 1
    f5ea:	0e 94 a4 78 	call	0xf148	; 0xf148 <LCD_Print>
    f5ee:	c2 cf       	rjmp	.-124    	; 0xf574 <main+0x76>
    f5f0:	2f ef       	ldi	r18, 0xFF	; 255
    f5f2:	84 e3       	ldi	r24, 0x34	; 52
    f5f4:	9c e0       	ldi	r25, 0x0C	; 12
    f5f6:	21 50       	subi	r18, 0x01	; 1
    f5f8:	80 40       	sbci	r24, 0x00	; 0
    f5fa:	90 40       	sbci	r25, 0x00	; 0
    f5fc:	e1 f7       	brne	.-8      	; 0xf5f6 <main+0xf8>
    f5fe:	00 c0       	rjmp	.+0      	; 0xf600 <main+0x102>
    f600:	00 00       	nop
			}
			_delay_ms(100);
			//UPDATE CALL EVALUATION
			if(strcmp(update_array, update_call) == 0){  //if call is correct, response will be sent
				_delay_ms(200);								 
				USART_transmit_string(update_response);
    f602:	88 e8       	ldi	r24, 0x88	; 136
    f604:	92 e0       	ldi	r25, 0x02	; 2
    f606:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <USART_transmit_string>
				strcpy(update_array, "     ");   //overwrite input buffer
    f60a:	86 e0       	ldi	r24, 0x06	; 6
    f60c:	ec ec       	ldi	r30, 0xCC	; 204
    f60e:	f1 e0       	ldi	r31, 0x01	; 1
    f610:	af ed       	ldi	r26, 0xDF	; 223
    f612:	b2 e0       	ldi	r27, 0x02	; 2
    f614:	01 90       	ld	r0, Z+
    f616:	0d 92       	st	X+, r0
    f618:	8a 95       	dec	r24
    f61a:	e1 f7       	brne	.-8      	; 0xf614 <main+0x116>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
    f61c:	80 e8       	ldi	r24, 0x80	; 128
    f61e:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
	
	LCD_Print(str);
    f622:	86 ea       	ldi	r24, 0xA6	; 166
    f624:	91 e0       	ldi	r25, 0x01	; 1
    f626:	0e 94 a4 78 	call	0xf148	; 0xf148 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
    f62a:	80 ec       	ldi	r24, 0xC0	; 192
    f62c:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	
	LCD_Print(str);
    f630:	84 eb       	ldi	r24, 0xB4	; 180
    f632:	91 e0       	ldi	r25, 0x01	; 1
    f634:	0e 94 a4 78 	call	0xf148	; 0xf148 <LCD_Print>
    f638:	ae cf       	rjmp	.-164    	; 0xf596 <main+0x98>
			
			
		} //end while(1) 
	}else{
		
		start();
    f63a:	e0 91 92 02 	lds	r30, 0x0292	; 0x800292 <__data_end>
    f63e:	f0 91 93 02 	lds	r31, 0x0293	; 0x800293 <__data_end+0x1>
    f642:	09 95       	icall





} // end main 
    f644:	80 e0       	ldi	r24, 0x00	; 0
    f646:	90 e0       	ldi	r25, 0x00	; 0
    f648:	08 95       	ret

0000f64a <__vector_20>:

//Interrupt Service Routine is in sleep mode unless USART message is received

ISR(USART0_RX_vect)
{
    f64a:	1f 92       	push	r1
    f64c:	0f 92       	push	r0
    f64e:	0f b6       	in	r0, 0x3f	; 63
    f650:	0f 92       	push	r0
    f652:	11 24       	eor	r1, r1
    f654:	ef 92       	push	r14
    f656:	ff 92       	push	r15
    f658:	0f 93       	push	r16
    f65a:	1f 93       	push	r17
    f65c:	2f 93       	push	r18
    f65e:	3f 93       	push	r19
    f660:	4f 93       	push	r20
    f662:	5f 93       	push	r21
    f664:	6f 93       	push	r22
    f666:	7f 93       	push	r23
    f668:	8f 93       	push	r24
    f66a:	9f 93       	push	r25
    f66c:	af 93       	push	r26
    f66e:	bf 93       	push	r27
    f670:	cf 93       	push	r28
    f672:	df 93       	push	r29
    f674:	ef 93       	push	r30
    f676:	ff 93       	push	r31
}


uint8_t USART_receive_byte(void)
{
	while (!(UCSR0A & (1<<RXC0)))
    f678:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
    f67c:	87 ff       	sbrs	r24, 7
    f67e:	fc cf       	rjmp	.-8      	; 0xf678 <__vector_20+0x2e>
	;   
	
	return UDR0;												
    f680:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>

//Interrupt Service Routine is in sleep mode unless USART message is received

ISR(USART0_RX_vect)
{
	header = USART_receive_byte();  //header will determine, which kind of message is arriving (following if/else paths)
    f684:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <header>
	
	
	//HANDSHAKE MESSAGE
	
	if (header == usart_handshake_message){  // if incoming data is of handshake type...
    f688:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <header>
    f68c:	81 32       	cpi	r24, 0x21	; 33
    f68e:	09 f4       	brne	.+2      	; 0xf692 <__vector_20+0x48>
    f690:	d6 c0       	rjmp	.+428    	; 0xf83e <__vector_20+0x1f4>
	//AFTER HEX-RECORD IS RECEIVED, CHECKSUM WILL BE EVALUATED AND CONFIRMATION MESSAGE ("ok" or "er") WILL BE SENT TO LORDYLINK'S BLOCKING THREAD
	//IF CONFIRMATION IS "ok", LORDYLINK SENDS NEXT RECORD AFTER CONTROLLER HAS WRITTEN DATA SECTION INTO THE SRAM
	//IF CONFIRMATION IS "er", LORDYLINK SENDS CURRENT RECORD AGAIN, EVALUATION STARTS FROM THE TOP
	//IF CONFIRMATION MESSAGE ISN'T RECOGNIZED BY LORDYLINK, CHECKSUM STATUS WILL BE RE-EVALUATED AND CONFIRMATION MESSAGE IS TRANSMITTED AGAIN.
	
	else if(header == usart_hexfile_message){   //if message is hexfile....
    f692:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <header>
    f696:	8a 33       	cpi	r24, 0x3A	; 58
    f698:	09 f4       	brne	.+2      	; 0xf69c <__vector_20+0x52>
    f69a:	46 c0       	rjmp	.+140    	; 0xf728 <__vector_20+0xde>
			}
	} // end else if(header == usart_hexfile_message)
	
	//THIS MESSAGE HEADER INDICATES THAT HEXFILE CONFIRMATION MESSAGE WASN'T RECOGNIZED BY LORDYLINK
	
	else if(header == usart_rx_error_hexrecord){									//lordylink didn't "understand" last confirmation	
    f69c:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <header>
    f6a0:	8f 33       	cpi	r24, 0x3F	; 63
    f6a2:	09 f4       	brne	.+2      	; 0xf6a6 <__vector_20+0x5c>
    f6a4:	db c0       	rjmp	.+438    	; 0xf85c <__vector_20+0x212>
			USART_transmit_string("ok");	
			
		else																		// if error => record will be sent again, otherwise SRAM will have been correctly written
			USART_transmit_string("er");
	}
	else if(header == usart_request_data_dump){
    f6a6:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <header>
    f6aa:	83 37       	cpi	r24, 0x73	; 115
    f6ac:	09 f4       	brne	.+2      	; 0xf6b0 <__vector_20+0x66>
    f6ae:	4b c1       	rjmp	.+662    	; 0xf946 <__vector_20+0x2fc>
		{
			sram_address = 0;
			send_sram_flag = 1;
		}
	}
	else if(header == usart_clock_hi ){	//clock for sram dump, TODO: block for checksum calc
    f6b0:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <header>
    f6b4:	8b 32       	cpi	r24, 0x2B	; 43
    f6b6:	09 f4       	brne	.+2      	; 0xf6ba <__vector_20+0x70>
    f6b8:	72 c1       	rjmp	.+740    	; 0xf99e <__vector_20+0x354>
		clk = 1;
	}
	else if(header == usart_clock_low){
    f6ba:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <header>
    f6be:	8d 32       	cpi	r24, 0x2D	; 45
    f6c0:	09 f4       	brne	.+2      	; 0xf6c4 <__vector_20+0x7a>
    f6c2:	84 c1       	rjmp	.+776    	; 0xf9cc <__vector_20+0x382>
		clk = 0;
	}
	
	else if(header == usart_hexfile_send_complete){							//hexfile transfer is complete
    f6c4:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <header>
    f6c8:	87 37       	cpi	r24, 0x77	; 119
    f6ca:	09 f4       	brne	.+2      	; 0xf6ce <__vector_20+0x84>
    f6cc:	82 c1       	rjmp	.+772    	; 0xf9d2 <__vector_20+0x388>
			write_firmware_to_flash(byte_ctr);
			
			
		
	}	
	else if(header == usart_reset_address){
    f6ce:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <header>
    f6d2:	87 3a       	cpi	r24, 0xA7	; 167
    f6d4:	09 f4       	brne	.+2      	; 0xf6d8 <__vector_20+0x8e>
    f6d6:	ba c1       	rjmp	.+884    	; 0xfa4c <__vector_20+0x402>
		sram_address = 0;
		byte_ctr = 0;
		checksum_status = is_error;
		
	}
	else if (header == usart_update_message){  // if incoming data is of update handshake type...
    f6d8:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <header>
    f6dc:	85 37       	cpi	r24, 0x75	; 117
    f6de:	69 f4       	brne	.+26     	; 0xf6fa <__vector_20+0xb0>
    f6e0:	ef ed       	ldi	r30, 0xDF	; 223
    f6e2:	f2 e0       	ldi	r31, 0x02	; 2
}


uint8_t USART_receive_byte(void)
{
	while (!(UCSR0A & (1<<RXC0)))
    f6e4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
    f6e8:	87 ff       	sbrs	r24, 7
    f6ea:	fc cf       	rjmp	.-8      	; 0xf6e4 <__vector_20+0x9a>
	;   
	
	return UDR0;												
    f6ec:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
		checksum_status = is_error;
		
	}
	else if (header == usart_update_message){  // if incoming data is of update handshake type...
		for(int i = 0; i < 5; ++i)
		update_array[i] = USART_receive_byte();  //read handshake call, if correct: response will be sent from main application
    f6f0:	81 93       	st	Z+, r24
		byte_ctr = 0;
		checksum_status = is_error;
		
	}
	else if (header == usart_update_message){  // if incoming data is of update handshake type...
		for(int i = 0; i < 5; ++i)
    f6f2:	82 e0       	ldi	r24, 0x02	; 2
    f6f4:	e4 3e       	cpi	r30, 0xE4	; 228
    f6f6:	f8 07       	cpc	r31, r24
    f6f8:	a9 f7       	brne	.-22     	; 0xf6e4 <__vector_20+0x9a>
		update_array[i] = USART_receive_byte();  //read handshake call, if correct: response will be sent from main application
		
	}
	
	
}
    f6fa:	ff 91       	pop	r31
    f6fc:	ef 91       	pop	r30
    f6fe:	df 91       	pop	r29
    f700:	cf 91       	pop	r28
    f702:	bf 91       	pop	r27
    f704:	af 91       	pop	r26
    f706:	9f 91       	pop	r25
    f708:	8f 91       	pop	r24
    f70a:	7f 91       	pop	r23
    f70c:	6f 91       	pop	r22
    f70e:	5f 91       	pop	r21
    f710:	4f 91       	pop	r20
    f712:	3f 91       	pop	r19
    f714:	2f 91       	pop	r18
    f716:	1f 91       	pop	r17
    f718:	0f 91       	pop	r16
    f71a:	ff 90       	pop	r15
    f71c:	ef 90       	pop	r14
    f71e:	0f 90       	pop	r0
    f720:	0f be       	out	0x3f, r0	; 63
    f722:	0f 90       	pop	r0
    f724:	1f 90       	pop	r1
    f726:	18 95       	reti
}


uint8_t USART_receive_byte(void)
{
	while (!(UCSR0A & (1<<RXC0)))
    f728:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
    f72c:	87 ff       	sbrs	r24, 7
    f72e:	fc cf       	rjmp	.-8      	; 0xf728 <__vector_20+0xde>
	;   
	
	return UDR0;												
    f730:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
	else if(header == usart_hexfile_message){   //if message is hexfile....
		
			//PARSE INCOMING MESSAGE
		
			uint8_t data_section_size = USART_receive_byte();						//this is the amount of databytes that will be written into the SRAM
			uint8_t hex_record_size = data_section_size + 5;				// add start bytes and checksum to data section length for total size of message
    f734:	85 e0       	ldi	r24, 0x05	; 5
    f736:	81 0f       	add	r24, r17
		
			hex_buffer_array[0] = data_section_size;						//buffer starts with data_section_size, header ':' will be discarded
    f738:	10 93 9f 02 	sts	0x029F, r17	; 0x80029f <hex_buffer_array>
		
			for(int i = 1; i < hex_record_size ; ++i )						// get rest of message data
    f73c:	c8 2f       	mov	r28, r24
    f73e:	d0 e0       	ldi	r29, 0x00	; 0
    f740:	82 30       	cpi	r24, 0x02	; 2
    f742:	88 f0       	brcs	.+34     	; 0xf766 <__vector_20+0x11c>
    f744:	21 e0       	ldi	r18, 0x01	; 1
    f746:	30 e0       	ldi	r19, 0x00	; 0
}


uint8_t USART_receive_byte(void)
{
	while (!(UCSR0A & (1<<RXC0)))
    f748:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
    f74c:	87 ff       	sbrs	r24, 7
    f74e:	fc cf       	rjmp	.-8      	; 0xf748 <__vector_20+0xfe>
	;   
	
	return UDR0;												
    f750:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
			uint8_t hex_record_size = data_section_size + 5;				// add start bytes and checksum to data section length for total size of message
		
			hex_buffer_array[0] = data_section_size;						//buffer starts with data_section_size, header ':' will be discarded
		
			for(int i = 1; i < hex_record_size ; ++i )						// get rest of message data
				hex_buffer_array[ i ] = USART_receive_byte();
    f754:	f9 01       	movw	r30, r18
    f756:	e1 56       	subi	r30, 0x61	; 97
    f758:	fd 4f       	sbci	r31, 0xFD	; 253
    f75a:	80 83       	st	Z, r24
			uint8_t data_section_size = USART_receive_byte();						//this is the amount of databytes that will be written into the SRAM
			uint8_t hex_record_size = data_section_size + 5;				// add start bytes and checksum to data section length for total size of message
		
			hex_buffer_array[0] = data_section_size;						//buffer starts with data_section_size, header ':' will be discarded
		
			for(int i = 1; i < hex_record_size ; ++i )						// get rest of message data
    f75c:	2f 5f       	subi	r18, 0xFF	; 255
    f75e:	3f 4f       	sbci	r19, 0xFF	; 255
    f760:	c2 17       	cp	r28, r18
    f762:	d3 07       	cpc	r29, r19
    f764:	89 f7       	brne	.-30     	; 0xf748 <__vector_20+0xfe>
			
			
			
			//TRANSMISSION IS NOW COMPLETED AND STORED IN BUFFER
		
			switch(animation_ctr){											// display animation, tells user that all is going well
    f766:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <animation_ctr>
    f76a:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <animation_ctr+0x1>
    f76e:	a0 91 9b 02 	lds	r26, 0x029B	; 0x80029b <animation_ctr+0x2>
    f772:	b0 91 9c 02 	lds	r27, 0x029C	; 0x80029c <animation_ctr+0x3>
    f776:	88 37       	cpi	r24, 0x78	; 120
    f778:	91 05       	cpc	r25, r1
    f77a:	a1 05       	cpc	r26, r1
    f77c:	b1 05       	cpc	r27, r1
    f77e:	09 f4       	brne	.+2      	; 0xf782 <__vector_20+0x138>
    f780:	76 c0       	rjmp	.+236    	; 0xf86e <__vector_20+0x224>
    f782:	08 f4       	brcc	.+2      	; 0xf786 <__vector_20+0x13c>
    f784:	ec c0       	rjmp	.+472    	; 0xf95e <__vector_20+0x314>
    f786:	80 3f       	cpi	r24, 0xF0	; 240
    f788:	91 05       	cpc	r25, r1
    f78a:	a1 05       	cpc	r26, r1
    f78c:	b1 05       	cpc	r27, r1
    f78e:	09 f4       	brne	.+2      	; 0xf792 <__vector_20+0x148>
    f790:	0a c1       	rjmp	.+532    	; 0xf9a6 <__vector_20+0x35c>
    f792:	88 36       	cpi	r24, 0x68	; 104
    f794:	21 e0       	ldi	r18, 0x01	; 1
    f796:	92 07       	cpc	r25, r18
    f798:	a1 05       	cpc	r26, r1
    f79a:	b1 05       	cpc	r27, r1
    f79c:	09 f0       	breq	.+2      	; 0xf7a0 <__vector_20+0x156>
    f79e:	76 c0       	rjmp	.+236    	; 0xf88c <__vector_20+0x242>
    f7a0:	81 e0       	ldi	r24, 0x01	; 1
    f7a2:	90 e0       	ldi	r25, 0x00	; 0
    f7a4:	a0 e0       	ldi	r26, 0x00	; 0
    f7a6:	b0 e0       	ldi	r27, 0x00	; 0
				
				case 360:
					animation_ctr = 0; 
					break;
			}//end switch
			animation_ctr++;
    f7a8:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <animation_ctr>
    f7ac:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <animation_ctr+0x1>
    f7b0:	a0 93 9b 02 	sts	0x029B, r26	; 0x80029b <animation_ctr+0x2>
    f7b4:	b0 93 9c 02 	sts	0x029C, r27	; 0x80029c <animation_ctr+0x3>
			
			//THIS PART CALCULATES CHECKSUM FROM MESSAGE
			//AND COMPARES IT TO THE CHECKSUM IN THE HEX-RECORD
			
			uint16_t vec_sum = 0;												//local helper variable for checksum calculation
			uint8_t checksum_from_file = hex_buffer_array[hex_record_size-1];   //read checksum from file
    f7b8:	9e 01       	movw	r18, r28
    f7ba:	21 50       	subi	r18, 0x01	; 1
    f7bc:	31 09       	sbc	r19, r1
    f7be:	f9 01       	movw	r30, r18
    f7c0:	e1 56       	subi	r30, 0x61	; 97
    f7c2:	fd 4f       	sbci	r31, 0xFD	; 253
    f7c4:	70 81       	ld	r23, Z
		
			for(int i = 0; i < hex_record_size - 1; ++i)						// accumulate record for checksum calculation
    f7c6:	12 16       	cp	r1, r18
    f7c8:	13 06       	cpc	r1, r19
    f7ca:	0c f0       	brlt	.+2      	; 0xf7ce <__vector_20+0x184>
    f7cc:	5a c1       	rjmp	.+692    	; 0xfa82 <__vector_20+0x438>
    f7ce:	80 e0       	ldi	r24, 0x00	; 0
    f7d0:	90 e0       	ldi	r25, 0x00	; 0
    f7d2:	40 e0       	ldi	r20, 0x00	; 0
    f7d4:	50 e0       	ldi	r21, 0x00	; 0
				vec_sum += hex_buffer_array[ i ];
    f7d6:	fc 01       	movw	r30, r24
    f7d8:	e1 56       	subi	r30, 0x61	; 97
    f7da:	fd 4f       	sbci	r31, 0xFD	; 253
    f7dc:	60 81       	ld	r22, Z
    f7de:	46 0f       	add	r20, r22
    f7e0:	51 1d       	adc	r21, r1
			//AND COMPARES IT TO THE CHECKSUM IN THE HEX-RECORD
			
			uint16_t vec_sum = 0;												//local helper variable for checksum calculation
			uint8_t checksum_from_file = hex_buffer_array[hex_record_size-1];   //read checksum from file
		
			for(int i = 0; i < hex_record_size - 1; ++i)						// accumulate record for checksum calculation
    f7e2:	01 96       	adiw	r24, 0x01	; 1
    f7e4:	82 17       	cp	r24, r18
    f7e6:	93 07       	cpc	r25, r19
    f7e8:	b1 f7       	brne	.-20     	; 0xf7d6 <__vector_20+0x18c>
    f7ea:	41 95       	neg	r20
				vec_sum += hex_buffer_array[ i ];
		
			uint8_t checksum_calculated =  ~(vec_sum & 0x00ff ) + 0x01;		// actual checksum calculation
		
			if(checksum_calculated == checksum_from_file){						// compare checksums
    f7ec:	74 17       	cp	r23, r20
    f7ee:	09 f4       	brne	.+2      	; 0xf7f2 <__vector_20+0x1a8>
    f7f0:	51 c0       	rjmp	.+162    	; 0xf894 <__vector_20+0x24a>
																				// "er" => current record will be sent again. if neither "ok" nor "er" is detected by lordylink, rx_error_header will be sent
																				//to reevaluate checksum via flag variable "checksum_is"
			}//end if(checksum calculated....	
			
			else if( checksum_calculated != checksum_from_file){
				checksum_status = is_error;											// error, same record will be sent again
    f7f2:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <checksum_status>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
    f7f6:	80 e8       	ldi	r24, 0x80	; 128
    f7f8:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
	
	LCD_Print(str);
    f7fc:	8c e1       	ldi	r24, 0x1C	; 28
    f7fe:	92 e0       	ldi	r25, 0x02	; 2
    f800:	0e 94 a4 78 	call	0xf148	; 0xf148 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
    f804:	80 ec       	ldi	r24, 0xC0	; 192
    f806:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	
	LCD_Print(str);
    f80a:	82 e3       	ldi	r24, 0x32	; 50
    f80c:	92 e0       	ldi	r25, 0x02	; 2
    f80e:	0e 94 a4 78 	call	0xf148	; 0xf148 <LCD_Print>
    f812:	9f e7       	ldi	r25, 0x7F	; 127
    f814:	2a e1       	ldi	r18, 0x1A	; 26
    f816:	86 e0       	ldi	r24, 0x06	; 6
    f818:	91 50       	subi	r25, 0x01	; 1
    f81a:	20 40       	sbci	r18, 0x00	; 0
    f81c:	80 40       	sbci	r24, 0x00	; 0
    f81e:	e1 f7       	brne	.-8      	; 0xf818 <__vector_20+0x1ce>
    f820:	00 c0       	rjmp	.+0      	; 0xf822 <__vector_20+0x1d8>
    f822:	00 00       	nop
				LCD_Printpos(0,0,"checksum error!      ");						//LCD user feedback
				LCD_Printpos(1,0,"trying again......  ");
				
				_delay_ms(100);
				
				animation_ctr  = 0;
    f824:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <animation_ctr>
    f828:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <animation_ctr+0x1>
    f82c:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <animation_ctr+0x2>
    f830:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <animation_ctr+0x3>
				USART_transmit_string("er");										
    f834:	87 e4       	ldi	r24, 0x47	; 71
    f836:	92 e0       	ldi	r25, 0x02	; 2
    f838:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <USART_transmit_string>
    f83c:	5e cf       	rjmp	.-324    	; 0xf6fa <__vector_20+0xb0>
    f83e:	e5 ee       	ldi	r30, 0xE5	; 229
    f840:	f2 e0       	ldi	r31, 0x02	; 2
    f842:	25 ef       	ldi	r18, 0xF5	; 245
    f844:	32 e0       	ldi	r19, 0x02	; 2
}


uint8_t USART_receive_byte(void)
{
	while (!(UCSR0A & (1<<RXC0)))
    f846:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
    f84a:	87 ff       	sbrs	r24, 7
    f84c:	fc cf       	rjmp	.-8      	; 0xf846 <__vector_20+0x1fc>
	;   
	
	return UDR0;												
    f84e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
	
	//HANDSHAKE MESSAGE
	
	if (header == usart_handshake_message){  // if incoming data is of handshake type...
		for(int i = 0; i < 16; ++i)
			handshake_array[i] = USART_receive_byte();  //read handshake call, if correct: response will be sent from main application
    f852:	81 93       	st	Z+, r24
	
	
	//HANDSHAKE MESSAGE
	
	if (header == usart_handshake_message){  // if incoming data is of handshake type...
		for(int i = 0; i < 16; ++i)
    f854:	2e 17       	cp	r18, r30
    f856:	3f 07       	cpc	r19, r31
    f858:	b1 f7       	brne	.-20     	; 0xf846 <__vector_20+0x1fc>
    f85a:	4f cf       	rjmp	.-354    	; 0xf6fa <__vector_20+0xb0>
	//THIS MESSAGE HEADER INDICATES THAT HEXFILE CONFIRMATION MESSAGE WASN'T RECOGNIZED BY LORDYLINK
	
	else if(header == usart_rx_error_hexrecord){									//lordylink didn't "understand" last confirmation	
		
		
		if(checksum_status == is_ok)											    // evaluating last checksum again...
    f85c:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <checksum_status>
    f860:	81 11       	cpse	r24, r1
    f862:	6c c0       	rjmp	.+216    	; 0xf93c <__vector_20+0x2f2>
			USART_transmit_string("ok");	
			
		else																		// if error => record will be sent again, otherwise SRAM will have been correctly written
			USART_transmit_string("er");
    f864:	87 e4       	ldi	r24, 0x47	; 71
    f866:	92 e0       	ldi	r25, 0x02	; 2
    f868:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <USART_transmit_string>
    f86c:	46 cf       	rjmp	.-372    	; 0xf6fa <__vector_20+0xb0>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
    f86e:	80 ec       	ldi	r24, 0xC0	; 192
    f870:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	
	LCD_Print(str);
    f874:	86 ef       	ldi	r24, 0xF6	; 246
    f876:	91 e0       	ldi	r25, 0x01	; 1
    f878:	0e 94 a4 78 	call	0xf148	; 0xf148 <LCD_Print>
    f87c:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <animation_ctr>
    f880:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <animation_ctr+0x1>
    f884:	a0 91 9b 02 	lds	r26, 0x029B	; 0x80029b <animation_ctr+0x2>
    f888:	b0 91 9c 02 	lds	r27, 0x029C	; 0x80029c <animation_ctr+0x3>
    f88c:	01 96       	adiw	r24, 0x01	; 1
    f88e:	a1 1d       	adc	r26, r1
    f890:	b1 1d       	adc	r27, r1
    f892:	8a cf       	rjmp	.-236    	; 0xf7a8 <__vector_20+0x15e>
				vec_sum += hex_buffer_array[ i ];
		
			uint8_t checksum_calculated =  ~(vec_sum & 0x00ff ) + 0x01;		// actual checksum calculation
		
			if(checksum_calculated == checksum_from_file){						// compare checksums
				checksum_status = is_ok;										// set boolean flag for error handling
    f894:	81 e0       	ldi	r24, 0x01	; 1
    f896:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <checksum_status>
				
				for(int i = 0; i < data_section_size; ++i){						//if checksum is ok, write data-section to SRAM
    f89a:	11 23       	and	r17, r17
    f89c:	09 f4       	brne	.+2      	; 0xf8a0 <__vector_20+0x256>
    f89e:	4e c0       	rjmp	.+156    	; 0xf93c <__vector_20+0x2f2>
    f8a0:	e1 2e       	mov	r14, r17
    f8a2:	f1 2c       	mov	r15, r1
    f8a4:	84 e0       	ldi	r24, 0x04	; 4
    f8a6:	e8 0e       	add	r14, r24
    f8a8:	f1 1c       	adc	r15, r1
    f8aa:	04 e0       	ldi	r16, 0x04	; 4
    f8ac:	10 e0       	ldi	r17, 0x00	; 0
    f8ae:	e8 01       	movw	r28, r16
    f8b0:	c1 56       	subi	r28, 0x61	; 97
    f8b2:	dd 4f       	sbci	r29, 0xFD	; 253
					
					do{
						SPI_SRAM_ByteWrite(address, hex_buffer_array[ i + 4 ]);	
    f8b4:	48 81       	ld	r20, Y
    f8b6:	60 91 f6 02 	lds	r22, 0x02F6	; 0x8002f6 <address>
    f8ba:	70 91 f7 02 	lds	r23, 0x02F7	; 0x8002f7 <address+0x1>
    f8be:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <address+0x2>
    f8c2:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <address+0x3>
    f8c6:	0e 94 e1 78 	call	0xf1c2	; 0xf1c2 <SPI_SRAM_ByteWrite>
					
					}while(SPI_SRAM_ByteRead(address) !=  hex_buffer_array[ i + 4 ]);  //additional safety-guard: write to address and read content back. if this doesn't work, sram is probably broken
    f8ca:	60 91 f6 02 	lds	r22, 0x02F6	; 0x8002f6 <address>
    f8ce:	70 91 f7 02 	lds	r23, 0x02F7	; 0x8002f7 <address+0x1>
    f8d2:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <address+0x2>
    f8d6:	90 91 f9 02 	lds	r25, 0x02F9	; 0x8002f9 <address+0x3>
    f8da:	0e 94 0c 79 	call	0xf218	; 0xf218 <SPI_SRAM_ByteRead>
    f8de:	98 81       	ld	r25, Y
    f8e0:	89 13       	cpse	r24, r25
    f8e2:	e8 cf       	rjmp	.-48     	; 0xf8b4 <__vector_20+0x26a>
				
					++address;	
    f8e4:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <address>
    f8e8:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <address+0x1>
    f8ec:	a0 91 f8 02 	lds	r26, 0x02F8	; 0x8002f8 <address+0x2>
    f8f0:	b0 91 f9 02 	lds	r27, 0x02F9	; 0x8002f9 <address+0x3>
    f8f4:	01 96       	adiw	r24, 0x01	; 1
    f8f6:	a1 1d       	adc	r26, r1
    f8f8:	b1 1d       	adc	r27, r1
    f8fa:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <address>
    f8fe:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <address+0x1>
    f902:	a0 93 f8 02 	sts	0x02F8, r26	; 0x8002f8 <address+0x2>
    f906:	b0 93 f9 02 	sts	0x02F9, r27	; 0x8002f9 <address+0x3>
					++byte_ctr;	
    f90a:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <byte_ctr>
    f90e:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <byte_ctr+0x1>
    f912:	a0 91 97 02 	lds	r26, 0x0297	; 0x800297 <byte_ctr+0x2>
    f916:	b0 91 98 02 	lds	r27, 0x0298	; 0x800298 <byte_ctr+0x3>
    f91a:	01 96       	adiw	r24, 0x01	; 1
    f91c:	a1 1d       	adc	r26, r1
    f91e:	b1 1d       	adc	r27, r1
    f920:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <byte_ctr>
    f924:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <byte_ctr+0x1>
    f928:	a0 93 97 02 	sts	0x0297, r26	; 0x800297 <byte_ctr+0x2>
    f92c:	b0 93 98 02 	sts	0x0298, r27	; 0x800298 <byte_ctr+0x3>
    f930:	0f 5f       	subi	r16, 0xFF	; 255
    f932:	1f 4f       	sbci	r17, 0xFF	; 255
			uint8_t checksum_calculated =  ~(vec_sum & 0x00ff ) + 0x01;		// actual checksum calculation
		
			if(checksum_calculated == checksum_from_file){						// compare checksums
				checksum_status = is_ok;										// set boolean flag for error handling
				
				for(int i = 0; i < data_section_size; ++i){						//if checksum is ok, write data-section to SRAM
    f934:	e0 16       	cp	r14, r16
    f936:	f1 06       	cpc	r15, r17
    f938:	09 f0       	breq	.+2      	; 0xf93c <__vector_20+0x2f2>
    f93a:	b9 cf       	rjmp	.-142    	; 0xf8ae <__vector_20+0x264>
					}while(SPI_SRAM_ByteRead(address) !=  hex_buffer_array[ i + 4 ]);  //additional safety-guard: write to address and read content back. if this doesn't work, sram is probably broken
				
					++address;	
					++byte_ctr;	
				}//end for
				USART_transmit_string("ok");									// confirm transmission: lordylink thread blocks until confirmation is either "ok" or "er". checksum "ok" => SRAM will be written, next record will be sent
    f93c:	89 e1       	ldi	r24, 0x19	; 25
    f93e:	92 e0       	ldi	r25, 0x02	; 2
    f940:	0e 94 57 79 	call	0xf2ae	; 0xf2ae <USART_transmit_string>
    f944:	da ce       	rjmp	.-588    	; 0xf6fa <__vector_20+0xb0>
		else																		// if error => record will be sent again, otherwise SRAM will have been correctly written
			USART_transmit_string("er");
	}
	else if(header == usart_request_data_dump){
		{
			sram_address = 0;
    f946:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <sram_address>
    f94a:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <sram_address+0x1>
    f94e:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <sram_address+0x2>
    f952:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <sram_address+0x3>
			send_sram_flag = 1;
    f956:	81 e0       	ldi	r24, 0x01	; 1
    f958:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <send_sram_flag>
    f95c:	ce ce       	rjmp	.-612    	; 0xf6fa <__vector_20+0xb0>
			
			
			
			//TRANSMISSION IS NOW COMPLETED AND STORED IN BUFFER
		
			switch(animation_ctr){											// display animation, tells user that all is going well
    f95e:	81 30       	cpi	r24, 0x01	; 1
    f960:	91 05       	cpc	r25, r1
    f962:	a1 05       	cpc	r26, r1
    f964:	b1 05       	cpc	r27, r1
    f966:	09 f0       	breq	.+2      	; 0xf96a <__vector_20+0x320>
    f968:	91 cf       	rjmp	.-222    	; 0xf88c <__vector_20+0x242>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
    f96a:	80 e8       	ldi	r24, 0x80	; 128
    f96c:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
	
	LCD_Print(str);
    f970:	82 ed       	ldi	r24, 0xD2	; 210
    f972:	91 e0       	ldi	r25, 0x01	; 1
    f974:	0e 94 a4 78 	call	0xf148	; 0xf148 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
    f978:	80 ec       	ldi	r24, 0xC0	; 192
    f97a:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	
	LCD_Print(str);
    f97e:	84 ee       	ldi	r24, 0xE4	; 228
    f980:	91 e0       	ldi	r25, 0x01	; 1
    f982:	0e 94 a4 78 	call	0xf148	; 0xf148 <LCD_Print>
    f986:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <animation_ctr>
    f98a:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <animation_ctr+0x1>
    f98e:	a0 91 9b 02 	lds	r26, 0x029B	; 0x80029b <animation_ctr+0x2>
    f992:	b0 91 9c 02 	lds	r27, 0x029C	; 0x80029c <animation_ctr+0x3>
    f996:	01 96       	adiw	r24, 0x01	; 1
    f998:	a1 1d       	adc	r26, r1
    f99a:	b1 1d       	adc	r27, r1
    f99c:	05 cf       	rjmp	.-502    	; 0xf7a8 <__vector_20+0x15e>
			sram_address = 0;
			send_sram_flag = 1;
		}
	}
	else if(header == usart_clock_hi ){	//clock for sram dump, TODO: block for checksum calc
		clk = 1;
    f99e:	81 e0       	ldi	r24, 0x01	; 1
    f9a0:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <clk>
    f9a4:	aa ce       	rjmp	.-684    	; 0xf6fa <__vector_20+0xb0>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
    f9a6:	80 ec       	ldi	r24, 0xC0	; 192
    f9a8:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	
	LCD_Print(str);
    f9ac:	88 e0       	ldi	r24, 0x08	; 8
    f9ae:	92 e0       	ldi	r25, 0x02	; 2
    f9b0:	0e 94 a4 78 	call	0xf148	; 0xf148 <LCD_Print>
    f9b4:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <animation_ctr>
    f9b8:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <animation_ctr+0x1>
    f9bc:	a0 91 9b 02 	lds	r26, 0x029B	; 0x80029b <animation_ctr+0x2>
    f9c0:	b0 91 9c 02 	lds	r27, 0x029C	; 0x80029c <animation_ctr+0x3>
    f9c4:	01 96       	adiw	r24, 0x01	; 1
    f9c6:	a1 1d       	adc	r26, r1
    f9c8:	b1 1d       	adc	r27, r1
    f9ca:	ee ce       	rjmp	.-548    	; 0xf7a8 <__vector_20+0x15e>
	}
	else if(header == usart_clock_hi ){	//clock for sram dump, TODO: block for checksum calc
		clk = 1;
	}
	else if(header == usart_clock_low){
		clk = 0;
    f9cc:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <clk>
    f9d0:	94 ce       	rjmp	.-728    	; 0xf6fa <__vector_20+0xb0>
	_delay_ms(2);
}

void LCD_Clear()
{
	LCD_Action (0x01);		//Clear LCD
    f9d2:	81 e0       	ldi	r24, 0x01	; 1
    f9d4:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    f9d8:	95 e8       	ldi	r25, 0x85	; 133
    f9da:	9a 95       	dec	r25
    f9dc:	f1 f7       	brne	.-4      	; 0xf9da <__vector_20+0x390>
    f9de:	00 00       	nop
	_delay_us(20);
	LCD_Action (0x80);		//Move to Position Line 1, Position 1
    f9e0:	80 e8       	ldi	r24, 0x80	; 128
    f9e2:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
    f9e6:	80 e8       	ldi	r24, 0x80	; 128
    f9e8:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
	
	LCD_Print(str);
    f9ec:	8a e4       	ldi	r24, 0x4A	; 74
    f9ee:	92 e0       	ldi	r25, 0x02	; 2
    f9f0:	0e 94 a4 78 	call	0xf148	; 0xf148 <LCD_Print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    f9f4:	2f e7       	ldi	r18, 0x7F	; 127
    f9f6:	89 eb       	ldi	r24, 0xB9	; 185
    f9f8:	9a e2       	ldi	r25, 0x2A	; 42
    f9fa:	21 50       	subi	r18, 0x01	; 1
    f9fc:	80 40       	sbci	r24, 0x00	; 0
    f9fe:	90 40       	sbci	r25, 0x00	; 0
    fa00:	e1 f7       	brne	.-8      	; 0xf9fa <__vector_20+0x3b0>
    fa02:	00 c0       	rjmp	.+0      	; 0xfa04 <__vector_20+0x3ba>
    fa04:	00 00       	nop
	_delay_ms(2);
}

void LCD_Clear()
{
	LCD_Action (0x01);		//Clear LCD
    fa06:	81 e0       	ldi	r24, 0x01	; 1
    fa08:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    fa0c:	25 e8       	ldi	r18, 0x85	; 133
    fa0e:	2a 95       	dec	r18
    fa10:	f1 f7       	brne	.-4      	; 0xfa0e <__vector_20+0x3c4>
    fa12:	00 00       	nop
	_delay_us(20);
	LCD_Action (0x80);		//Move to Position Line 1, Position 1
    fa14:	80 e8       	ldi	r24, 0x80	; 128
    fa16:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
    fa1a:	80 e8       	ldi	r24, 0x80	; 128
    fa1c:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
	
	LCD_Print(str);
    fa20:	8e e5       	ldi	r24, 0x5E	; 94
    fa22:	92 e0       	ldi	r25, 0x02	; 2
    fa24:	0e 94 a4 78 	call	0xf148	; 0xf148 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
	if (row == 0 && pos<16)
		LCD_Action((pos & 0x0F)|0x80);
	else if (row == 1 && pos<16)
		LCD_Action((pos & 0x0F)|0xC0);
    fa28:	80 ec       	ldi	r24, 0xC0	; 192
    fa2a:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	
	LCD_Print(str);
    fa2e:	83 e7       	ldi	r24, 0x73	; 115
    fa30:	92 e0       	ldi	r25, 0x02	; 2
    fa32:	0e 94 a4 78 	call	0xf148	; 0xf148 <LCD_Print>
			_delay_ms(700);
			
			LCD_Clear();
			LCD_Printpos(0,0, "burning flash       ");
			LCD_Printpos(1,0, "don't turn off      ");
			write_firmware_to_flash(byte_ctr);
    fa36:	60 91 95 02 	lds	r22, 0x0295	; 0x800295 <byte_ctr>
    fa3a:	70 91 96 02 	lds	r23, 0x0296	; 0x800296 <byte_ctr+0x1>
    fa3e:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <byte_ctr+0x2>
    fa42:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <byte_ctr+0x3>
    fa46:	0e 94 9f 79 	call	0xf33e	; 0xf33e <write_firmware_to_flash>
    fa4a:	57 ce       	rjmp	.-850    	; 0xf6fa <__vector_20+0xb0>
			
			
		
	}	
	else if(header == usart_reset_address){
		address = 0;
    fa4c:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <address>
    fa50:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <address+0x1>
    fa54:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <address+0x2>
    fa58:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <address+0x3>
		sram_address = 0;
    fa5c:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <sram_address>
    fa60:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <sram_address+0x1>
    fa64:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <sram_address+0x2>
    fa68:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <sram_address+0x3>
		byte_ctr = 0;
    fa6c:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <byte_ctr>
    fa70:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <byte_ctr+0x1>
    fa74:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <byte_ctr+0x2>
    fa78:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <byte_ctr+0x3>
		checksum_status = is_error;
    fa7c:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <checksum_status>
    fa80:	3c ce       	rjmp	.-904    	; 0xf6fa <__vector_20+0xb0>
			//AND COMPARES IT TO THE CHECKSUM IN THE HEX-RECORD
			
			uint16_t vec_sum = 0;												//local helper variable for checksum calculation
			uint8_t checksum_from_file = hex_buffer_array[hex_record_size-1];   //read checksum from file
		
			for(int i = 0; i < hex_record_size - 1; ++i)						// accumulate record for checksum calculation
    fa82:	40 e0       	ldi	r20, 0x00	; 0
    fa84:	b3 ce       	rjmp	.-666    	; 0xf7ec <__vector_20+0x1a2>

0000fa86 <strcmp>:
    fa86:	fb 01       	movw	r30, r22
    fa88:	dc 01       	movw	r26, r24
    fa8a:	8d 91       	ld	r24, X+
    fa8c:	01 90       	ld	r0, Z+
    fa8e:	80 19       	sub	r24, r0
    fa90:	01 10       	cpse	r0, r1
    fa92:	d9 f3       	breq	.-10     	; 0xfa8a <strcmp+0x4>
    fa94:	99 0b       	sbc	r25, r25
    fa96:	08 95       	ret

0000fa98 <_exit>:
    fa98:	f8 94       	cli

0000fa9a <__stop_program>:
    fa9a:	ff cf       	rjmp	.-2      	; 0xfa9a <__stop_program>
