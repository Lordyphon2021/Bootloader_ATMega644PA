
BootloaderProto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b6  00800100  0000f9f6  00000a8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009f6  0000f000  0000f000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006d  008002b6  008002b6  00000c40  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e3a  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a17  00000000  00000000  00002b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b34  00000000  00000000  00003591  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  000040c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000077b  00000000  00000000  000042c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001050  00000000  00000000  00004a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00005a8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000f000 <__vectors>:
    f000:	0c 94 3e 78 	jmp	0xf07c	; 0xf07c <__ctors_end>
    f004:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f008:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f00c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f010:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f014:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f018:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f01c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f020:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f024:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f028:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f02c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f030:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f034:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f038:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f03c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f040:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f044:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f048:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f04c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f050:	0c 94 d8 7a 	jmp	0xf5b0	; 0xf5b0 <__vector_20>
    f054:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f058:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f05c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f060:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f064:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f068:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f06c:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f070:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f074:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>
    f078:	0c 94 5b 78 	jmp	0xf0b6	; 0xf0b6 <__bad_interrupt>

0000f07c <__ctors_end>:
    f07c:	11 24       	eor	r1, r1
    f07e:	1f be       	out	0x3f, r1	; 63
    f080:	cf ef       	ldi	r28, 0xFF	; 255
    f082:	d0 e1       	ldi	r29, 0x10	; 16
    f084:	de bf       	out	0x3e, r29	; 62
    f086:	cd bf       	out	0x3d, r28	; 61

0000f088 <__do_copy_data>:
    f088:	12 e0       	ldi	r17, 0x02	; 2
    f08a:	a0 e0       	ldi	r26, 0x00	; 0
    f08c:	b1 e0       	ldi	r27, 0x01	; 1
    f08e:	e6 ef       	ldi	r30, 0xF6	; 246
    f090:	f9 ef       	ldi	r31, 0xF9	; 249
    f092:	02 c0       	rjmp	.+4      	; 0xf098 <__do_copy_data+0x10>
    f094:	05 90       	lpm	r0, Z+
    f096:	0d 92       	st	X+, r0
    f098:	a6 3b       	cpi	r26, 0xB6	; 182
    f09a:	b1 07       	cpc	r27, r17
    f09c:	d9 f7       	brne	.-10     	; 0xf094 <__do_copy_data+0xc>

0000f09e <__do_clear_bss>:
    f09e:	23 e0       	ldi	r18, 0x03	; 3
    f0a0:	a6 eb       	ldi	r26, 0xB6	; 182
    f0a2:	b2 e0       	ldi	r27, 0x02	; 2
    f0a4:	01 c0       	rjmp	.+2      	; 0xf0a8 <.do_clear_bss_start>

0000f0a6 <.do_clear_bss_loop>:
    f0a6:	1d 92       	st	X+, r1

0000f0a8 <.do_clear_bss_start>:
    f0a8:	a3 32       	cpi	r26, 0x23	; 35
    f0aa:	b2 07       	cpc	r27, r18
    f0ac:	e1 f7       	brne	.-8      	; 0xf0a6 <.do_clear_bss_loop>
    f0ae:	0e 94 15 7a 	call	0xf42a	; 0xf42a <main>
    f0b2:	0c 94 f9 7c 	jmp	0xf9f2	; 0xf9f2 <_exit>

0000f0b6 <__bad_interrupt>:
    f0b6:	0c 94 00 78 	jmp	0xf000	; 0xf000 <__vectors>

0000f0ba <LCD_Action>:
{
    while (!(UCSR0A & (1<<RXC0)))
    ;   
    
    return UDR0;												
}
    f0ba:	98 b1       	in	r25, 0x08	; 8
    f0bc:	9f 70       	andi	r25, 0x0F	; 15
    f0be:	28 2f       	mov	r18, r24
    f0c0:	20 7f       	andi	r18, 0xF0	; 240
    f0c2:	92 2b       	or	r25, r18
    f0c4:	98 b9       	out	0x08, r25	; 8
    f0c6:	42 98       	cbi	0x08, 2	; 8
    f0c8:	43 9a       	sbi	0x08, 3	; 8
    f0ca:	36 e0       	ldi	r19, 0x06	; 6
    f0cc:	3a 95       	dec	r19
    f0ce:	f1 f7       	brne	.-4      	; 0xf0cc <LCD_Action+0x12>
    f0d0:	00 c0       	rjmp	.+0      	; 0xf0d2 <LCD_Action+0x18>
    f0d2:	43 98       	cbi	0x08, 3	; 8
    f0d4:	9d e0       	ldi	r25, 0x0D	; 13
    f0d6:	9a 95       	dec	r25
    f0d8:	f1 f7       	brne	.-4      	; 0xf0d6 <LCD_Action+0x1c>
    f0da:	00 00       	nop
    f0dc:	28 b1       	in	r18, 0x08	; 8
    f0de:	2f 70       	andi	r18, 0x0F	; 15
    f0e0:	30 e1       	ldi	r19, 0x10	; 16
    f0e2:	83 9f       	mul	r24, r19
    f0e4:	c0 01       	movw	r24, r0
    f0e6:	11 24       	eor	r1, r1
    f0e8:	82 2b       	or	r24, r18
    f0ea:	88 b9       	out	0x08, r24	; 8
    f0ec:	43 9a       	sbi	0x08, 3	; 8
    f0ee:	86 e0       	ldi	r24, 0x06	; 6
    f0f0:	8a 95       	dec	r24
    f0f2:	f1 f7       	brne	.-4      	; 0xf0f0 <LCD_Action+0x36>
    f0f4:	00 c0       	rjmp	.+0      	; 0xf0f6 <LCD_Action+0x3c>
    f0f6:	43 98       	cbi	0x08, 3	; 8
    f0f8:	8f e0       	ldi	r24, 0x0F	; 15
    f0fa:	97 e2       	ldi	r25, 0x27	; 39
    f0fc:	01 97       	sbiw	r24, 0x01	; 1
    f0fe:	f1 f7       	brne	.-4      	; 0xf0fc <LCD_Action+0x42>
    f100:	00 c0       	rjmp	.+0      	; 0xf102 <LCD_Action+0x48>
    f102:	00 00       	nop
    f104:	08 95       	ret

0000f106 <LCD_Init>:
    f106:	2f e5       	ldi	r18, 0x5F	; 95
    f108:	8a ee       	ldi	r24, 0xEA	; 234
    f10a:	90 e0       	ldi	r25, 0x00	; 0
    f10c:	21 50       	subi	r18, 0x01	; 1
    f10e:	80 40       	sbci	r24, 0x00	; 0
    f110:	90 40       	sbci	r25, 0x00	; 0
    f112:	e1 f7       	brne	.-8      	; 0xf10c <LCD_Init+0x6>
    f114:	00 c0       	rjmp	.+0      	; 0xf116 <LCD_Init+0x10>
    f116:	00 00       	nop
    f118:	82 e0       	ldi	r24, 0x02	; 2
    f11a:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    f11e:	88 e2       	ldi	r24, 0x28	; 40
    f120:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    f124:	8c e0       	ldi	r24, 0x0C	; 12
    f126:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    f12a:	86 e0       	ldi	r24, 0x06	; 6
    f12c:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    f130:	81 e0       	ldi	r24, 0x01	; 1
    f132:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    f136:	8f e0       	ldi	r24, 0x0F	; 15
    f138:	97 e2       	ldi	r25, 0x27	; 39
    f13a:	01 97       	sbiw	r24, 0x01	; 1
    f13c:	f1 f7       	brne	.-4      	; 0xf13a <LCD_Init+0x34>
    f13e:	00 c0       	rjmp	.+0      	; 0xf140 <LCD_Init+0x3a>
    f140:	00 00       	nop
    f142:	08 95       	ret

0000f144 <LCD_Print>:
    f144:	fc 01       	movw	r30, r24
    f146:	90 81       	ld	r25, Z
    f148:	99 23       	and	r25, r25
    f14a:	49 f1       	breq	.+82     	; 0xf19e <LCD_Print+0x5a>
    f14c:	28 b1       	in	r18, 0x08	; 8
    f14e:	2f 70       	andi	r18, 0x0F	; 15
    f150:	90 7f       	andi	r25, 0xF0	; 240
    f152:	92 2b       	or	r25, r18
    f154:	98 b9       	out	0x08, r25	; 8
    f156:	42 9a       	sbi	0x08, 2	; 8
    f158:	43 9a       	sbi	0x08, 3	; 8
    f15a:	82 e4       	ldi	r24, 0x42	; 66
    f15c:	8a 95       	dec	r24
    f15e:	f1 f7       	brne	.-4      	; 0xf15c <LCD_Print+0x18>
    f160:	00 c0       	rjmp	.+0      	; 0xf162 <LCD_Print+0x1e>
    f162:	43 98       	cbi	0x08, 3	; 8
    f164:	95 e8       	ldi	r25, 0x85	; 133
    f166:	9a 95       	dec	r25
    f168:	f1 f7       	brne	.-4      	; 0xf166 <LCD_Print+0x22>
    f16a:	00 00       	nop
    f16c:	48 b1       	in	r20, 0x08	; 8
    f16e:	91 91       	ld	r25, Z+
    f170:	80 e1       	ldi	r24, 0x10	; 16
    f172:	98 9f       	mul	r25, r24
    f174:	90 01       	movw	r18, r0
    f176:	11 24       	eor	r1, r1
    f178:	94 2f       	mov	r25, r20
    f17a:	9f 70       	andi	r25, 0x0F	; 15
    f17c:	29 2b       	or	r18, r25
    f17e:	28 b9       	out	0x08, r18	; 8
    f180:	43 9a       	sbi	0x08, 3	; 8
    f182:	92 e4       	ldi	r25, 0x42	; 66
    f184:	9a 95       	dec	r25
    f186:	f1 f7       	brne	.-4      	; 0xf184 <LCD_Print+0x40>
    f188:	00 c0       	rjmp	.+0      	; 0xf18a <LCD_Print+0x46>
    f18a:	43 98       	cbi	0x08, 3	; 8
    f18c:	89 ef       	ldi	r24, 0xF9	; 249
    f18e:	90 e0       	ldi	r25, 0x00	; 0
    f190:	01 97       	sbiw	r24, 0x01	; 1
    f192:	f1 f7       	brne	.-4      	; 0xf190 <LCD_Print+0x4c>
    f194:	00 c0       	rjmp	.+0      	; 0xf196 <LCD_Print+0x52>
    f196:	00 00       	nop
    f198:	90 81       	ld	r25, Z
    f19a:	91 11       	cpse	r25, r1
    f19c:	d7 cf       	rjmp	.-82     	; 0xf14c <LCD_Print+0x8>
    f19e:	08 95       	ret

0000f1a0 <SPI_MasterInit>:
    f1a0:	8c b5       	in	r24, 0x2c	; 44
    f1a2:	8d 65       	ori	r24, 0x5D	; 93
    f1a4:	8c bd       	out	0x2c, r24	; 44
    f1a6:	8c b5       	in	r24, 0x2c	; 44
    f1a8:	83 60       	ori	r24, 0x03	; 3
    f1aa:	8c bd       	out	0x2c, r24	; 44
    f1ac:	8c b5       	in	r24, 0x2c	; 44
    f1ae:	8f 7d       	andi	r24, 0xDF	; 223
    f1b0:	8c bd       	out	0x2c, r24	; 44
    f1b2:	8c b5       	in	r24, 0x2c	; 44
    f1b4:	8f 77       	andi	r24, 0x7F	; 127
    f1b6:	8c bd       	out	0x2c, r24	; 44
    f1b8:	2c 9a       	sbi	0x05, 4	; 5
    f1ba:	2b 9a       	sbi	0x05, 3	; 5
    f1bc:	08 95       	ret

0000f1be <SPI_SRAM_ByteWrite>:
    f1be:	cf 92       	push	r12
    f1c0:	df 92       	push	r13
    f1c2:	ef 92       	push	r14
    f1c4:	ff 92       	push	r15
    f1c6:	0f 93       	push	r16
    f1c8:	1f 93       	push	r17
    f1ca:	6c 01       	movw	r12, r24
    f1cc:	ee 24       	eor	r14, r14
    f1ce:	ff 24       	eor	r15, r15
    f1d0:	07 2f       	mov	r16, r23
    f1d2:	18 2f       	mov	r17, r24
    f1d4:	29 2f       	mov	r18, r25
    f1d6:	33 27       	eor	r19, r19
    f1d8:	29 98       	cbi	0x05, 1	; 5
    f1da:	52 e0       	ldi	r21, 0x02	; 2
    f1dc:	5e bd       	out	0x2e, r21	; 46
    f1de:	0d b4       	in	r0, 0x2d	; 45
    f1e0:	07 fe       	sbrs	r0, 7
    f1e2:	fd cf       	rjmp	.-6      	; 0xf1de <SPI_SRAM_ByteWrite+0x20>
    f1e4:	ce bc       	out	0x2e, r12	; 46
    f1e6:	0d b4       	in	r0, 0x2d	; 45
    f1e8:	07 fe       	sbrs	r0, 7
    f1ea:	fd cf       	rjmp	.-6      	; 0xf1e6 <SPI_SRAM_ByteWrite+0x28>
    f1ec:	0e bd       	out	0x2e, r16	; 46
    f1ee:	0d b4       	in	r0, 0x2d	; 45
    f1f0:	07 fe       	sbrs	r0, 7
    f1f2:	fd cf       	rjmp	.-6      	; 0xf1ee <SPI_SRAM_ByteWrite+0x30>
    f1f4:	6e bd       	out	0x2e, r22	; 46
    f1f6:	0d b4       	in	r0, 0x2d	; 45
    f1f8:	07 fe       	sbrs	r0, 7
    f1fa:	fd cf       	rjmp	.-6      	; 0xf1f6 <SPI_SRAM_ByteWrite+0x38>
    f1fc:	4e bd       	out	0x2e, r20	; 46
    f1fe:	0d b4       	in	r0, 0x2d	; 45
    f200:	07 fe       	sbrs	r0, 7
    f202:	fd cf       	rjmp	.-6      	; 0xf1fe <SPI_SRAM_ByteWrite+0x40>
    f204:	29 9a       	sbi	0x05, 1	; 5
    f206:	1f 91       	pop	r17
    f208:	0f 91       	pop	r16
    f20a:	ff 90       	pop	r15
    f20c:	ef 90       	pop	r14
    f20e:	df 90       	pop	r13
    f210:	cf 90       	pop	r12
    f212:	08 95       	ret

0000f214 <SPI_SRAM_ByteRead>:
    f214:	cf 92       	push	r12
    f216:	df 92       	push	r13
    f218:	ef 92       	push	r14
    f21a:	ff 92       	push	r15
    f21c:	0f 93       	push	r16
    f21e:	1f 93       	push	r17
    f220:	6c 01       	movw	r12, r24
    f222:	ee 24       	eor	r14, r14
    f224:	ff 24       	eor	r15, r15
    f226:	07 2f       	mov	r16, r23
    f228:	18 2f       	mov	r17, r24
    f22a:	29 2f       	mov	r18, r25
    f22c:	33 27       	eor	r19, r19
    f22e:	29 98       	cbi	0x05, 1	; 5
    f230:	43 e0       	ldi	r20, 0x03	; 3
    f232:	4e bd       	out	0x2e, r20	; 46
    f234:	0d b4       	in	r0, 0x2d	; 45
    f236:	07 fe       	sbrs	r0, 7
    f238:	fd cf       	rjmp	.-6      	; 0xf234 <SPI_SRAM_ByteRead+0x20>
    f23a:	ce bc       	out	0x2e, r12	; 46
    f23c:	0d b4       	in	r0, 0x2d	; 45
    f23e:	07 fe       	sbrs	r0, 7
    f240:	fd cf       	rjmp	.-6      	; 0xf23c <SPI_SRAM_ByteRead+0x28>
    f242:	0e bd       	out	0x2e, r16	; 46
    f244:	0d b4       	in	r0, 0x2d	; 45
    f246:	07 fe       	sbrs	r0, 7
    f248:	fd cf       	rjmp	.-6      	; 0xf244 <SPI_SRAM_ByteRead+0x30>
    f24a:	6e bd       	out	0x2e, r22	; 46
    f24c:	0d b4       	in	r0, 0x2d	; 45
    f24e:	07 fe       	sbrs	r0, 7
    f250:	fd cf       	rjmp	.-6      	; 0xf24c <SPI_SRAM_ByteRead+0x38>
    f252:	8f ef       	ldi	r24, 0xFF	; 255
    f254:	8e bd       	out	0x2e, r24	; 46
    f256:	0d b4       	in	r0, 0x2d	; 45
    f258:	07 fe       	sbrs	r0, 7
    f25a:	fd cf       	rjmp	.-6      	; 0xf256 <SPI_SRAM_ByteRead+0x42>
    f25c:	8e b5       	in	r24, 0x2e	; 46
    f25e:	29 9a       	sbi	0x05, 1	; 5
    f260:	1f 91       	pop	r17
    f262:	0f 91       	pop	r16
    f264:	ff 90       	pop	r15
    f266:	ef 90       	pop	r14
    f268:	df 90       	pop	r13
    f26a:	cf 90       	pop	r12
    f26c:	08 95       	ret

0000f26e <USART_Init>:
    f26e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f00c5>
    f272:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f00c4>
    f276:	e1 ec       	ldi	r30, 0xC1	; 193
    f278:	f0 e0       	ldi	r31, 0x00	; 0
    f27a:	80 81       	ld	r24, Z
    f27c:	88 60       	ori	r24, 0x08	; 8
    f27e:	80 83       	st	Z, r24
    f280:	80 81       	ld	r24, Z
    f282:	80 61       	ori	r24, 0x10	; 16
    f284:	80 83       	st	Z, r24
    f286:	80 81       	ld	r24, Z
    f288:	80 68       	ori	r24, 0x80	; 128
    f28a:	80 83       	st	Z, r24
    f28c:	a0 ec       	ldi	r26, 0xC0	; 192
    f28e:	b0 e0       	ldi	r27, 0x00	; 0
    f290:	8c 91       	ld	r24, X
    f292:	80 68       	ori	r24, 0x80	; 128
    f294:	8c 93       	st	X, r24
    f296:	8e e0       	ldi	r24, 0x0E	; 14
    f298:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f00c2>
    f29c:	80 81       	ld	r24, Z
    f29e:	80 69       	ori	r24, 0x90	; 144
    f2a0:	80 83       	st	Z, r24
    f2a2:	83 b7       	in	r24, 0x33	; 51
    f2a4:	81 7f       	andi	r24, 0xF1	; 241
    f2a6:	83 bf       	out	0x33, r24	; 51
    f2a8:	08 95       	ret

0000f2aa <USART_transmit_string>:
    f2aa:	dc 01       	movw	r26, r24
    f2ac:	80 e0       	ldi	r24, 0x00	; 0
    f2ae:	28 2f       	mov	r18, r24
    f2b0:	30 e0       	ldi	r19, 0x00	; 0
    f2b2:	fd 01       	movw	r30, r26
    f2b4:	01 90       	ld	r0, Z+
    f2b6:	00 20       	and	r0, r0
    f2b8:	e9 f7       	brne	.-6      	; 0xf2b4 <USART_transmit_string+0xa>
    f2ba:	31 97       	sbiw	r30, 0x01	; 1
    f2bc:	ea 1b       	sub	r30, r26
    f2be:	fb 0b       	sbc	r31, r27
    f2c0:	2e 17       	cp	r18, r30
    f2c2:	3f 07       	cpc	r19, r31
    f2c4:	61 f0       	breq	.+24     	; 0xf2de <USART_transmit_string+0x34>
    f2c6:	fd 01       	movw	r30, r26
    f2c8:	e2 0f       	add	r30, r18
    f2ca:	f3 1f       	adc	r31, r19
    f2cc:	20 81       	ld	r18, Z
    f2ce:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
    f2d2:	95 ff       	sbrs	r25, 5
    f2d4:	fc cf       	rjmp	.-8      	; 0xf2ce <USART_transmit_string+0x24>
    f2d6:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    f2da:	8f 5f       	subi	r24, 0xFF	; 255
    f2dc:	e8 cf       	rjmp	.-48     	; 0xf2ae <USART_transmit_string+0x4>
    f2de:	08 95       	ret

0000f2e0 <write_firmware_to_flash>:



//if all checksums are correct, this is called to copy the firmware from sram to boot section
void write_firmware_to_flash()
{
    f2e0:	6f 92       	push	r6
    f2e2:	7f 92       	push	r7
    f2e4:	8f 92       	push	r8
    f2e6:	9f 92       	push	r9
    f2e8:	af 92       	push	r10
    f2ea:	bf 92       	push	r11
    f2ec:	cf 92       	push	r12
    f2ee:	df 92       	push	r13
    f2f0:	ef 92       	push	r14
    f2f2:	ff 92       	push	r15
    f2f4:	0f 93       	push	r16
    f2f6:	1f 93       	push	r17
    f2f8:	cf 93       	push	r28
    f2fa:	df 93       	push	r29
    
    uint32_t sram_address = 0;
    uint32_t flash_address = 0;
    const uint32_t app_section_eof = 61440; //next address is bootloader-section!!!
    cli();
    f2fc:	f8 94       	cli
     boot_rww_enable();
    f2fe:	81 e1       	ldi	r24, 0x11	; 17
    f300:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f0057>
    f304:	e8 95       	spm
//if all checksums are correct, this is called to copy the firmware from sram to boot section
void write_firmware_to_flash()
{
    
    uint32_t sram_address = 0;
    uint32_t flash_address = 0;
    f306:	c1 2c       	mov	r12, r1
    f308:	d1 2c       	mov	r13, r1
    f30a:	76 01       	movw	r14, r12
    cli();
     boot_rww_enable();
     
    while(sram_address < app_section_eof ){  //write complete app section
        
        boot_page_erase_safe(sram_address) ; //AVR-MACROS, not functions
    f30c:	03 e0       	ldi	r16, 0x03	; 3
        
        for(int i = 0; i < 128; ++i){
            uint16_t lsb =  SPI_SRAM_ByteRead(sram_address);  //read 2 bytes from sram
            uint8_t msb =  SPI_SRAM_ByteRead(sram_address + 1 );
            uint16_t data = (msb << 8)  | lsb;      //mask into 16bit int
            boot_page_fill_safe(sram_address, data); //fill boot page
    f30e:	d1 e0       	ldi	r29, 0x01	; 1
            sram_address += 2;
        }
        
        boot_page_write_safe(flash_address);  //write page
    f310:	15 e0       	ldi	r17, 0x05	; 5
    cli();
     boot_rww_enable();
     
    while(sram_address < app_section_eof ){  //write complete app section
        
        boot_page_erase_safe(sram_address) ; //AVR-MACROS, not functions
    f312:	07 b6       	in	r0, 0x37	; 55
    f314:	00 fc       	sbrc	r0, 0
    f316:	fd cf       	rjmp	.-6      	; 0xf312 <write_firmware_to_flash+0x32>
    f318:	f9 99       	sbic	0x1f, 1	; 31
    f31a:	fe cf       	rjmp	.-4      	; 0xf318 <write_firmware_to_flash+0x38>
    f31c:	36 01       	movw	r6, r12
    f31e:	f6 01       	movw	r30, r12
    f320:	00 93 57 00 	sts	0x0057, r16	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f0057>
    f324:	e8 95       	spm
        boot_spm_busy_wait();  
    f326:	07 b6       	in	r0, 0x37	; 55
    f328:	00 fc       	sbrc	r0, 0
    f32a:	fd cf       	rjmp	.-6      	; 0xf326 <write_firmware_to_flash+0x46>
    f32c:	46 01       	movw	r8, r12
    f32e:	57 01       	movw	r10, r14
    f330:	ff ef       	ldi	r31, 0xFF	; 255
    f332:	9f 1a       	sub	r9, r31
    f334:	af 0a       	sbc	r10, r31
    f336:	bf 0a       	sbc	r11, r31
        
        for(int i = 0; i < 128; ++i){
            uint16_t lsb =  SPI_SRAM_ByteRead(sram_address);  //read 2 bytes from sram
    f338:	c7 01       	movw	r24, r14
    f33a:	b6 01       	movw	r22, r12
    f33c:	0e 94 0a 79 	call	0xf214	; 0xf214 <SPI_SRAM_ByteRead>
    f340:	c8 2f       	mov	r28, r24
            uint8_t msb =  SPI_SRAM_ByteRead(sram_address + 1 );
    f342:	c7 01       	movw	r24, r14
    f344:	b6 01       	movw	r22, r12
    f346:	6f 5f       	subi	r22, 0xFF	; 255
    f348:	7f 4f       	sbci	r23, 0xFF	; 255
    f34a:	8f 4f       	sbci	r24, 0xFF	; 255
    f34c:	9f 4f       	sbci	r25, 0xFF	; 255
    f34e:	0e 94 0a 79 	call	0xf214	; 0xf214 <SPI_SRAM_ByteRead>
            uint16_t data = (msb << 8)  | lsb;      //mask into 16bit int
    f352:	2c 2f       	mov	r18, r28
    f354:	30 e0       	ldi	r19, 0x00	; 0
    f356:	a9 01       	movw	r20, r18
    f358:	58 2b       	or	r21, r24
    f35a:	ca 01       	movw	r24, r20
            boot_page_fill_safe(sram_address, data); //fill boot page
    f35c:	07 b6       	in	r0, 0x37	; 55
    f35e:	00 fc       	sbrc	r0, 0
    f360:	fd cf       	rjmp	.-6      	; 0xf35c <write_firmware_to_flash+0x7c>
    f362:	f9 99       	sbic	0x1f, 1	; 31
    f364:	fe cf       	rjmp	.-4      	; 0xf362 <write_firmware_to_flash+0x82>
    f366:	f6 01       	movw	r30, r12
    f368:	0c 01       	movw	r0, r24
    f36a:	d0 93 57 00 	sts	0x0057, r29	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f0057>
    f36e:	e8 95       	spm
    f370:	11 24       	eor	r1, r1
            sram_address += 2;
    f372:	f2 e0       	ldi	r31, 0x02	; 2
    f374:	cf 0e       	add	r12, r31
    f376:	d1 1c       	adc	r13, r1
    f378:	e1 1c       	adc	r14, r1
    f37a:	f1 1c       	adc	r15, r1
    while(sram_address < app_section_eof ){  //write complete app section
        
        boot_page_erase_safe(sram_address) ; //AVR-MACROS, not functions
        boot_spm_busy_wait();  
        
        for(int i = 0; i < 128; ++i){
    f37c:	8c 14       	cp	r8, r12
    f37e:	9d 04       	cpc	r9, r13
    f380:	ae 04       	cpc	r10, r14
    f382:	bf 04       	cpc	r11, r15
    f384:	c9 f6       	brne	.-78     	; 0xf338 <write_firmware_to_flash+0x58>
            uint16_t data = (msb << 8)  | lsb;      //mask into 16bit int
            boot_page_fill_safe(sram_address, data); //fill boot page
            sram_address += 2;
        }
        
        boot_page_write_safe(flash_address);  //write page
    f386:	07 b6       	in	r0, 0x37	; 55
    f388:	00 fc       	sbrc	r0, 0
    f38a:	fd cf       	rjmp	.-6      	; 0xf386 <write_firmware_to_flash+0xa6>
    f38c:	f9 99       	sbic	0x1f, 1	; 31
    f38e:	fe cf       	rjmp	.-4      	; 0xf38c <write_firmware_to_flash+0xac>
    f390:	f3 01       	movw	r30, r6
    f392:	10 93 57 00 	sts	0x0057, r17	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f0057>
    f396:	e8 95       	spm
        boot_spm_busy_wait();  
    f398:	07 b6       	in	r0, 0x37	; 55
    f39a:	00 fc       	sbrc	r0, 0
    f39c:	fd cf       	rjmp	.-6      	; 0xf398 <write_firmware_to_flash+0xb8>
    uint32_t flash_address = 0;
    const uint32_t app_section_eof = 61440; //next address is bootloader-section!!!
    cli();
     boot_rww_enable();
     
    while(sram_address < app_section_eof ){  //write complete app section
    f39e:	81 14       	cp	r8, r1
    f3a0:	f0 ef       	ldi	r31, 0xF0	; 240
    f3a2:	9f 06       	cpc	r9, r31
    f3a4:	a1 04       	cpc	r10, r1
    f3a6:	b1 04       	cpc	r11, r1
    f3a8:	19 f0       	breq	.+6      	; 0xf3b0 <write_firmware_to_flash+0xd0>
    f3aa:	75 01       	movw	r14, r10
    f3ac:	64 01       	movw	r12, r8
    f3ae:	b1 cf       	rjmp	.-158    	; 0xf312 <write_firmware_to_flash+0x32>
        boot_spm_busy_wait();  
        
        flash_address += 256;   //go to next page address
    }
    
    boot_rww_enable ();
    f3b0:	81 e1       	ldi	r24, 0x11	; 17
    f3b2:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f0057>
    f3b6:	e8 95       	spm
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    f3b8:	2f e7       	ldi	r18, 0x7F	; 127
    f3ba:	4a e1       	ldi	r20, 0x1A	; 26
    f3bc:	56 e0       	ldi	r21, 0x06	; 6
    f3be:	21 50       	subi	r18, 0x01	; 1
    f3c0:	40 40       	sbci	r20, 0x00	; 0
    f3c2:	50 40       	sbci	r21, 0x00	; 0
    f3c4:	e1 f7       	brne	.-8      	; 0xf3be <write_firmware_to_flash+0xde>
    f3c6:	00 c0       	rjmp	.+0      	; 0xf3c8 <write_firmware_to_flash+0xe8>
    f3c8:	00 00       	nop
    _delay_ms(2);
}

void LCD_Clear()
{
    LCD_Action (0x01);		//Clear LCD
    f3ca:	81 e0       	ldi	r24, 0x01	; 1
    f3cc:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    f3d0:	85 e8       	ldi	r24, 0x85	; 133
    f3d2:	8a 95       	dec	r24
    f3d4:	f1 f7       	brne	.-4      	; 0xf3d2 <write_firmware_to_flash+0xf2>
    f3d6:	00 00       	nop
    _delay_us(20);
    LCD_Action (0x80);		//Move to Position Line 1, Position 1
    f3d8:	80 e8       	ldi	r24, 0x80	; 128
    f3da:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    f3de:	80 e8       	ldi	r24, 0x80	; 128
    f3e0:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    
    LCD_Print(str);
    f3e4:	86 e0       	ldi	r24, 0x06	; 6
    f3e6:	91 e0       	ldi	r25, 0x01	; 1
    f3e8:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    f3ec:	80 ec       	ldi	r24, 0xC0	; 192
    f3ee:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    
    LCD_Print(str);
    f3f2:	80 e1       	ldi	r24, 0x10	; 16
    f3f4:	91 e0       	ldi	r25, 0x01	; 1
    f3f6:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    f3fa:	9f ef       	ldi	r25, 0xFF	; 255
    f3fc:	e8 e0       	ldi	r30, 0x08	; 8
    f3fe:	fd e3       	ldi	r31, 0x3D	; 61
    f400:	91 50       	subi	r25, 0x01	; 1
    f402:	e0 40       	sbci	r30, 0x00	; 0
    f404:	f0 40       	sbci	r31, 0x00	; 0
    f406:	e1 f7       	brne	.-8      	; 0xf400 <write_firmware_to_flash+0x120>
    f408:	00 c0       	rjmp	.+0      	; 0xf40a <write_firmware_to_flash+0x12a>
    f40a:	00 00       	nop
    
    
    

        
}
    f40c:	df 91       	pop	r29
    f40e:	cf 91       	pop	r28
    f410:	1f 91       	pop	r17
    f412:	0f 91       	pop	r16
    f414:	ff 90       	pop	r15
    f416:	ef 90       	pop	r14
    f418:	df 90       	pop	r13
    f41a:	cf 90       	pop	r12
    f41c:	bf 90       	pop	r11
    f41e:	af 90       	pop	r10
    f420:	9f 90       	pop	r9
    f422:	8f 90       	pop	r8
    f424:	7f 90       	pop	r7
    f426:	6f 90       	pop	r6
    f428:	08 95       	ret

0000f42a <main>:
    
    
    unsigned char temp;       
           
    //SET ATMEGA PORTS/PINS TO IN- OR OUTPUTS
    PINA = 0x00;
    f42a:	10 b8       	out	0x00, r1	; 0
    DDRA = 0x0f;
    f42c:	8f e0       	ldi	r24, 0x0F	; 15
    f42e:	81 b9       	out	0x01, r24	; 1
    PORTA = 0x00;
    f430:	12 b8       	out	0x02, r1	; 2
    DDRB = 0xbe;
    f432:	8e eb       	ldi	r24, 0xBE	; 190
    f434:	84 b9       	out	0x04, r24	; 4
    DDRD = 0x7e;
    f436:	8e e7       	ldi	r24, 0x7E	; 126
    f438:	8a b9       	out	0x0a, r24	; 10
    PORTD = 0x01; //internal pull-up rx-pin
    f43a:	81 e0       	ldi	r24, 0x01	; 1
    f43c:	8b b9       	out	0x0b, r24	; 11
    DDRC = 0xfe;
    f43e:	8e ef       	ldi	r24, 0xFE	; 254
    f440:	87 b9       	out	0x07, r24	; 7
    PORTB = 0xbf;
    f442:	8f eb       	ldi	r24, 0xBF	; 191
    f444:	85 b9       	out	0x05, r24	; 5
    PORTC = 0x00;
    f446:	18 b8       	out	0x08, r1	; 8
    PORTA = 13;  // set address for record button
    f448:	8d e0       	ldi	r24, 0x0D	; 13
    f44a:	82 b9       	out	0x02, r24	; 2
    
    //INIT INTERFACES 
    USART_Init(21);  // UBRR = (F_CPU/(16*BAUD))-1   // initialize with correct baud rate
    f44c:	85 e1       	ldi	r24, 0x15	; 21
    f44e:	90 e0       	ldi	r25, 0x00	; 0
    f450:	0e 94 37 79 	call	0xf26e	; 0xf26e <USART_Init>
    SPI_MasterInit();
    f454:	0e 94 d0 78 	call	0xf1a0	; 0xf1a0 <SPI_MasterInit>
    LCD_Init();	                                
    f458:	0e 94 83 78 	call	0xf106	; 0xf106 <LCD_Init>
    f45c:	2f e7       	ldi	r18, 0x7F	; 127
    f45e:	84 e8       	ldi	r24, 0x84	; 132
    f460:	9e e1       	ldi	r25, 0x1E	; 30
    f462:	21 50       	subi	r18, 0x01	; 1
    f464:	80 40       	sbci	r24, 0x00	; 0
    f466:	90 40       	sbci	r25, 0x00	; 0
    f468:	e1 f7       	brne	.-8      	; 0xf462 <main+0x38>
    f46a:	00 c0       	rjmp	.+0      	; 0xf46c <main+0x42>
    f46c:	00 00       	nop
    _delay_ms(500);
    
    
    //ACTIVATE INTERRUPT
    
    sei();
    f46e:	78 94       	sei
    
    
    
    
    if(rec_button){   //boot section only entered if REC button is pressed during power-up
    f470:	80 b1       	in	r24, 0x00	; 0
    f472:	80 71       	andi	r24, 0x10	; 16
    f474:	80 b9       	out	0x00, r24	; 0
    f476:	88 23       	and	r24, r24
    f478:	09 f4       	brne	.+2      	; 0xf47c <main+0x52>
    f47a:	92 c0       	rjmp	.+292    	; 0xf5a0 <main+0x176>
        
        // set interrupt vector for boot section
        char sregtemp = SREG;
    f47c:	9f b7       	in	r25, 0x3f	; 63
        temp = MCUCR;
    f47e:	85 b7       	in	r24, 0x35	; 53
        MCUCR = temp | (1<<IVCE);
    f480:	28 2f       	mov	r18, r24
    f482:	21 60       	ori	r18, 0x01	; 1
    f484:	25 bf       	out	0x35, r18	; 53
        MCUCR = temp | (1<<IVSEL);
    f486:	82 60       	ori	r24, 0x02	; 2
    f488:	85 bf       	out	0x35, r24	; 53
        SREG = sregtemp;	
    f48a:	9f bf       	out	0x3f, r25	; 63


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    f48c:	80 e8       	ldi	r24, 0x80	; 128
    f48e:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    
    LCD_Print(str);
    f492:	80 e2       	ldi	r24, 0x20	; 32
    f494:	91 e0       	ldi	r25, 0x01	; 1
    f496:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    f49a:	80 ec       	ldi	r24, 0xC0	; 192
    f49c:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    
    LCD_Print(str);
    f4a0:	84 e3       	ldi	r24, 0x34	; 52
    f4a2:	91 e0       	ldi	r25, 0x01	; 1
    f4a4:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
    f4a8:	16 c0       	rjmp	.+44     	; 0xf4d6 <main+0xac>
    f4aa:	2f e7       	ldi	r18, 0x7F	; 127
    f4ac:	8a e1       	ldi	r24, 0x1A	; 26
    f4ae:	96 e0       	ldi	r25, 0x06	; 6
    f4b0:	21 50       	subi	r18, 0x01	; 1
    f4b2:	80 40       	sbci	r24, 0x00	; 0
    f4b4:	90 40       	sbci	r25, 0x00	; 0
    f4b6:	e1 f7       	brne	.-8      	; 0xf4b0 <main+0x86>
    f4b8:	00 c0       	rjmp	.+0      	; 0xf4ba <main+0x90>
    f4ba:	00 00       	nop
                LCD_Printpos(0,0, "lordylink          ");
                LCD_Printpos(1,0, "connected          ");
            }
            _delay_ms(100);
            //UPDATE CALL EVALUATION
            if(strcmp(update_array, update_call) == 0){  //if call is correct, response will be sent
    f4bc:	60 e0       	ldi	r22, 0x00	; 0
    f4be:	71 e0       	ldi	r23, 0x01	; 1
    f4c0:	83 e0       	ldi	r24, 0x03	; 3
    f4c2:	93 e0       	ldi	r25, 0x03	; 3
    f4c4:	0e 94 f0 7c 	call	0xf9e0	; 0xf9e0 <strcmp>
    f4c8:	89 2b       	or	r24, r25
    f4ca:	91 f1       	breq	.+100    	; 0xf530 <main+0x106>
                strcpy(update_array, "     ");   //overwrite input buffer
                LCD_Printpos(0,0, "updater          ");
                LCD_Printpos(1,0, "enabled          ");
                
            }
            if(flash_flag == 1)
    f4cc:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <flash_flag>
    f4d0:	81 30       	cpi	r24, 0x01	; 1
    f4d2:	09 f4       	brne	.+2      	; 0xf4d6 <main+0xac>
    f4d4:	56 c0       	rjmp	.+172    	; 0xf582 <main+0x158>
        
        while(1)  //main loop
        {
                
            //HANDSHAKE CALL EVALUATION
            if(strcmp(handshake_array, handshake_call) == 0){  //if call is correct, response will be sent
    f4d6:	64 ea       	ldi	r22, 0xA4	; 164
    f4d8:	72 e0       	ldi	r23, 0x02	; 2
    f4da:	89 e0       	ldi	r24, 0x09	; 9
    f4dc:	93 e0       	ldi	r25, 0x03	; 3
    f4de:	0e 94 f0 7c 	call	0xf9e0	; 0xf9e0 <strcmp>
    f4e2:	89 2b       	or	r24, r25
    f4e4:	11 f7       	brne	.-60     	; 0xf4aa <main+0x80>
    f4e6:	2f ef       	ldi	r18, 0xFF	; 255
    f4e8:	84 e3       	ldi	r24, 0x34	; 52
    f4ea:	9c e0       	ldi	r25, 0x0C	; 12
    f4ec:	21 50       	subi	r18, 0x01	; 1
    f4ee:	80 40       	sbci	r24, 0x00	; 0
    f4f0:	90 40       	sbci	r25, 0x00	; 0
    f4f2:	e1 f7       	brne	.-8      	; 0xf4ec <main+0xc2>
    f4f4:	00 c0       	rjmp	.+0      	; 0xf4f6 <main+0xcc>
    f4f6:	00 00       	nop
                _delay_ms(200);	                               //give lordylink some time for startup
                USART_transmit_string(handshake_response);
    f4f8:	8e e9       	ldi	r24, 0x9E	; 158
    f4fa:	92 e0       	ldi	r25, 0x02	; 2
    f4fc:	0e 94 55 79 	call	0xf2aa	; 0xf2aa <USART_transmit_string>
                strcpy(handshake_array, "                ");   //delete input buffer            
    f500:	81 e1       	ldi	r24, 0x11	; 17
    f502:	e0 eb       	ldi	r30, 0xB0	; 176
    f504:	f1 e0       	ldi	r31, 0x01	; 1
    f506:	a9 e0       	ldi	r26, 0x09	; 9
    f508:	b3 e0       	ldi	r27, 0x03	; 3
    f50a:	01 90       	ld	r0, Z+
    f50c:	0d 92       	st	X+, r0
    f50e:	8a 95       	dec	r24
    f510:	e1 f7       	brne	.-8      	; 0xf50a <main+0xe0>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    f512:	80 e8       	ldi	r24, 0x80	; 128
    f514:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    
    LCD_Print(str);
    f518:	8a e4       	ldi	r24, 0x4A	; 74
    f51a:	91 e0       	ldi	r25, 0x01	; 1
    f51c:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    f520:	80 ec       	ldi	r24, 0xC0	; 192
    f522:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    
    LCD_Print(str);
    f526:	8e e5       	ldi	r24, 0x5E	; 94
    f528:	91 e0       	ldi	r25, 0x01	; 1
    f52a:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
    f52e:	bd cf       	rjmp	.-134    	; 0xf4aa <main+0x80>
    f530:	2f ef       	ldi	r18, 0xFF	; 255
    f532:	84 e3       	ldi	r24, 0x34	; 52
    f534:	9c e0       	ldi	r25, 0x0C	; 12
    f536:	21 50       	subi	r18, 0x01	; 1
    f538:	80 40       	sbci	r24, 0x00	; 0
    f53a:	90 40       	sbci	r25, 0x00	; 0
    f53c:	e1 f7       	brne	.-8      	; 0xf536 <main+0x10c>
    f53e:	00 c0       	rjmp	.+0      	; 0xf540 <main+0x116>
    f540:	00 00       	nop
            }
            _delay_ms(100);
            //UPDATE CALL EVALUATION
            if(strcmp(update_array, update_call) == 0){  //if call is correct, response will be sent
                _delay_ms(200);								 
                USART_transmit_string(update_response);
    f542:	89 e9       	ldi	r24, 0x99	; 153
    f544:	92 e0       	ldi	r25, 0x02	; 2
    f546:	0e 94 55 79 	call	0xf2aa	; 0xf2aa <USART_transmit_string>
                strcpy(update_array, "     ");   //overwrite input buffer
    f54a:	86 e0       	ldi	r24, 0x06	; 6
    f54c:	eb eb       	ldi	r30, 0xBB	; 187
    f54e:	f1 e0       	ldi	r31, 0x01	; 1
    f550:	a3 e0       	ldi	r26, 0x03	; 3
    f552:	b3 e0       	ldi	r27, 0x03	; 3
    f554:	01 90       	ld	r0, Z+
    f556:	0d 92       	st	X+, r0
    f558:	8a 95       	dec	r24
    f55a:	e1 f7       	brne	.-8      	; 0xf554 <main+0x12a>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    f55c:	80 e8       	ldi	r24, 0x80	; 128
    f55e:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    
    LCD_Print(str);
    f562:	82 e7       	ldi	r24, 0x72	; 114
    f564:	91 e0       	ldi	r25, 0x01	; 1
    f566:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    f56a:	80 ec       	ldi	r24, 0xC0	; 192
    f56c:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    
    LCD_Print(str);
    f570:	84 e8       	ldi	r24, 0x84	; 132
    f572:	91 e0       	ldi	r25, 0x01	; 1
    f574:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
                strcpy(update_array, "     ");   //overwrite input buffer
                LCD_Printpos(0,0, "updater          ");
                LCD_Printpos(1,0, "enabled          ");
                
            }
            if(flash_flag == 1)
    f578:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <flash_flag>
    f57c:	81 30       	cpi	r24, 0x01	; 1
    f57e:	09 f0       	breq	.+2      	; 0xf582 <main+0x158>
    f580:	aa cf       	rjmp	.-172    	; 0xf4d6 <main+0xac>
            {
                write_firmware_to_flash();
    f582:	0e 94 70 79 	call	0xf2e0	; 0xf2e0 <write_firmware_to_flash>
                
                
                cli();
    f586:	f8 94       	cli
                temp = MCUCR;
    f588:	85 b7       	in	r24, 0x35	; 53
                MCUCR = temp | (1<<IVCE);
    f58a:	98 2f       	mov	r25, r24
    f58c:	91 60       	ori	r25, 0x01	; 1
    f58e:	95 bf       	out	0x35, r25	; 53
                MCUCR = temp & ~(1<<IVSEL);
    f590:	8d 7f       	andi	r24, 0xFD	; 253
    f592:	85 bf       	out	0x35, r24	; 53
                
                
                start();
    f594:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <__data_end>
    f598:	f0 91 b7 02 	lds	r31, 0x02B7	; 0x8002b7 <__data_end+0x1>
    f59c:	09 95       	icall
    f59e:	9b cf       	rjmp	.-202    	; 0xf4d6 <main+0xac>
            
        } //end while(1) 
    
    }else{  // go directly to app section
    
        start();
    f5a0:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <__data_end>
    f5a4:	f0 91 b7 02 	lds	r31, 0x02B7	; 0x8002b7 <__data_end+0x1>
    f5a8:	09 95       	icall
    
    }
    

} // end main 
    f5aa:	80 e0       	ldi	r24, 0x00	; 0
    f5ac:	90 e0       	ldi	r25, 0x00	; 0
    f5ae:	08 95       	ret

0000f5b0 <__vector_20>:

//Interrupt Service Routine is in sleep mode unless USART message is received

ISR(USART0_RX_vect)
{
    f5b0:	1f 92       	push	r1
    f5b2:	0f 92       	push	r0
    f5b4:	0f b6       	in	r0, 0x3f	; 63
    f5b6:	0f 92       	push	r0
    f5b8:	11 24       	eor	r1, r1
    f5ba:	ef 92       	push	r14
    f5bc:	ff 92       	push	r15
    f5be:	0f 93       	push	r16
    f5c0:	1f 93       	push	r17
    f5c2:	2f 93       	push	r18
    f5c4:	3f 93       	push	r19
    f5c6:	4f 93       	push	r20
    f5c8:	5f 93       	push	r21
    f5ca:	6f 93       	push	r22
    f5cc:	7f 93       	push	r23
    f5ce:	8f 93       	push	r24
    f5d0:	9f 93       	push	r25
    f5d2:	af 93       	push	r26
    f5d4:	bf 93       	push	r27
    f5d6:	cf 93       	push	r28
    f5d8:	df 93       	push	r29
    f5da:	ef 93       	push	r30
    f5dc:	ff 93       	push	r31
}


uint8_t USART_receive_byte(void)
{
    while (!(UCSR0A & (1<<RXC0)))
    f5de:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
    f5e2:	87 ff       	sbrs	r24, 7
    f5e4:	fc cf       	rjmp	.-8      	; 0xf5de <__vector_20+0x2e>
    ;   
    
    return UDR0;												
    f5e6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>

//Interrupt Service Routine is in sleep mode unless USART message is received

ISR(USART0_RX_vect)
{
    header = USART_receive_byte();  //header will determine, which kind of message is arriving (following if/else paths)
    f5ea:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <header>
    
    //HANDSHAKE MESSAGE
    
    if (header == usart_handshake_message){  // if incoming data is of handshake type...
    f5ee:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <header>
    f5f2:	81 32       	cpi	r24, 0x21	; 33
    f5f4:	79 f1       	breq	.+94     	; 0xf654 <__vector_20+0xa4>
    //AFTER HEX-RECORD IS RECEIVED, CHECKSUM WILL BE EVALUATED AND CONFIRMATION MESSAGE ("ok" or "er") WILL BE SENT TO LORDYLINK'S BLOCKING THREAD
    //IF CONFIRMATION IS "ok", LORDYLINK SENDS NEXT RECORD AFTER CONTROLLER HAS WRITTEN DATA SECTION INTO THE SRAM
    //IF CONFIRMATION IS "er", LORDYLINK SENDS CURRENT RECORD AGAIN, EVALUATION STARTS FROM THE TOP
    //IF CONFIRMATION MESSAGE ISN'T RECOGNIZED BY LORDYLINK, CHECKSUM STATUS WILL BE RE-EVALUATED AND CONFIRMATION MESSAGE IS TRANSMITTED AGAIN.
    
    else if(header == usart_hexfile_message){   //if message is hexfile....
    f5f6:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <header>
    f5fa:	8a 33       	cpi	r24, 0x3A	; 58
    f5fc:	d1 f1       	breq	.+116    	; 0xf672 <__vector_20+0xc2>
    
    } // end else if(header == usart_hexfile_message)
    
    //THIS MESSAGE HEADER INDICATES THAT HEXFILE CONFIRMATION MESSAGE WASN'T RECOGNIZED BY LORDYLINK
    
    else if(header == usart_rx_error_hexrecord){                                    //lordylink didn't "understand" last confirmation	
    f5fe:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <header>
    f602:	8f 33       	cpi	r24, 0x3F	; 63
    f604:	09 f4       	brne	.+2      	; 0xf608 <__vector_20+0x58>
    f606:	d9 c0       	rjmp	.+434    	; 0xf7ba <__vector_20+0x20a>
            USART_transmit_string("ok");	
            
        else                                                                        // if error => record will be sent again, otherwise SRAM entry is correct
            USART_transmit_string("er");
    }
    else if(header == usart_request_data_dump){
    f608:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <header>
    f60c:	83 37       	cpi	r24, 0x73	; 115
    f60e:	09 f4       	brne	.+2      	; 0xf612 <__vector_20+0x62>
    f610:	4e c1       	rjmp	.+668    	; 0xf8ae <__vector_20+0x2fe>
            sram_address = 0;
            send_sram_flag = 1;
        
    }
    
    else if(header == usart_hexfile_send_complete){	                            //hexfile transfer is complete
    f612:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <header>
    f616:	87 37       	cpi	r24, 0x77	; 119
    f618:	09 f4       	brne	.+2      	; 0xf61c <__vector_20+0x6c>
    f61a:	aa c1       	rjmp	.+852    	; 0xf970 <__vector_20+0x3c0>
            flash_flag = 1;
            
            //start();
    }    
    
    else if (header == usart_update_message){  // if incoming data is an update handshake 
    f61c:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <header>
    f620:	85 37       	cpi	r24, 0x75	; 117
    f622:	09 f4       	brne	.+2      	; 0xf626 <__vector_20+0x76>
    f624:	d3 c0       	rjmp	.+422    	; 0xf7cc <__vector_20+0x21c>
        for(int i = 0; i < 5; ++i)
            update_array[i] = USART_receive_byte();  //read handshake call, if correct: response will be sent from main loop
    
    }
    
}
    f626:	ff 91       	pop	r31
    f628:	ef 91       	pop	r30
    f62a:	df 91       	pop	r29
    f62c:	cf 91       	pop	r28
    f62e:	bf 91       	pop	r27
    f630:	af 91       	pop	r26
    f632:	9f 91       	pop	r25
    f634:	8f 91       	pop	r24
    f636:	7f 91       	pop	r23
    f638:	6f 91       	pop	r22
    f63a:	5f 91       	pop	r21
    f63c:	4f 91       	pop	r20
    f63e:	3f 91       	pop	r19
    f640:	2f 91       	pop	r18
    f642:	1f 91       	pop	r17
    f644:	0f 91       	pop	r16
    f646:	ff 90       	pop	r15
    f648:	ef 90       	pop	r14
    f64a:	0f 90       	pop	r0
    f64c:	0f be       	out	0x3f, r0	; 63
    f64e:	0f 90       	pop	r0
    f650:	1f 90       	pop	r1
    f652:	18 95       	reti
    f654:	e9 e0       	ldi	r30, 0x09	; 9
    f656:	f3 e0       	ldi	r31, 0x03	; 3
    f658:	29 e1       	ldi	r18, 0x19	; 25
    f65a:	33 e0       	ldi	r19, 0x03	; 3
}


uint8_t USART_receive_byte(void)
{
    while (!(UCSR0A & (1<<RXC0)))
    f65c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
    f660:	87 ff       	sbrs	r24, 7
    f662:	fc cf       	rjmp	.-8      	; 0xf65c <__vector_20+0xac>
    ;   
    
    return UDR0;												
    f664:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    
    //HANDSHAKE MESSAGE
    
    if (header == usart_handshake_message){  // if incoming data is of handshake type...
        for(uint8_t i = 0; i < 16; ++i)
            handshake_array[i] = USART_receive_byte();  //read handshake call, if correct: response will be sent from main loop
    f668:	81 93       	st	Z+, r24
    header = USART_receive_byte();  //header will determine, which kind of message is arriving (following if/else paths)
    
    //HANDSHAKE MESSAGE
    
    if (header == usart_handshake_message){  // if incoming data is of handshake type...
        for(uint8_t i = 0; i < 16; ++i)
    f66a:	2e 17       	cp	r18, r30
    f66c:	3f 07       	cpc	r19, r31
    f66e:	b1 f7       	brne	.-20     	; 0xf65c <__vector_20+0xac>
    f670:	da cf       	rjmp	.-76     	; 0xf626 <__vector_20+0x76>
    //IF CONFIRMATION IS "ok", LORDYLINK SENDS NEXT RECORD AFTER CONTROLLER HAS WRITTEN DATA SECTION INTO THE SRAM
    //IF CONFIRMATION IS "er", LORDYLINK SENDS CURRENT RECORD AGAIN, EVALUATION STARTS FROM THE TOP
    //IF CONFIRMATION MESSAGE ISN'T RECOGNIZED BY LORDYLINK, CHECKSUM STATUS WILL BE RE-EVALUATED AND CONFIRMATION MESSAGE IS TRANSMITTED AGAIN.
    
    else if(header == usart_hexfile_message){   //if message is hexfile....
            ++record_ctr;  //keep track...
    f672:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <record_ctr>
    f676:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <record_ctr+0x1>
    f67a:	a0 91 bb 02 	lds	r26, 0x02BB	; 0x8002bb <record_ctr+0x2>
    f67e:	b0 91 bc 02 	lds	r27, 0x02BC	; 0x8002bc <record_ctr+0x3>
    f682:	01 96       	adiw	r24, 0x01	; 1
    f684:	a1 1d       	adc	r26, r1
    f686:	b1 1d       	adc	r27, r1
    f688:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <record_ctr>
    f68c:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <record_ctr+0x1>
    f690:	a0 93 bb 02 	sts	0x02BB, r26	; 0x8002bb <record_ctr+0x2>
    f694:	b0 93 bc 02 	sts	0x02BC, r27	; 0x8002bc <record_ctr+0x3>
}


uint8_t USART_receive_byte(void)
{
    while (!(UCSR0A & (1<<RXC0)))
    f698:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
    f69c:	87 ff       	sbrs	r24, 7
    f69e:	fc cf       	rjmp	.-8      	; 0xf698 <__vector_20+0xe8>
    ;   
    
    return UDR0;												
    f6a0:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
    else if(header == usart_hexfile_message){   //if message is hexfile....
            ++record_ctr;  //keep track...
            //PARSE INCOMING MESSAGE
    
            uint8_t data_section_size = USART_receive_byte();    //this is the amount of databytes that will be written into the SRAM
            uint8_t hex_record_size = data_section_size + 5;    // add start bytes and checksum to data section length for total size of message
    f6a4:	85 e0       	ldi	r24, 0x05	; 5
    f6a6:	81 0f       	add	r24, r17
        
            hex_buffer_array[0] = data_section_size;            //buffer starts with data_section_size, header ':' will be discarded
    f6a8:	10 93 c3 02 	sts	0x02C3, r17	; 0x8002c3 <hex_buffer_array>
        
            for(int i = 1; i < hex_record_size ; ++i )          // get rest of message data
    f6ac:	c8 2f       	mov	r28, r24
    f6ae:	d0 e0       	ldi	r29, 0x00	; 0
    f6b0:	82 30       	cpi	r24, 0x02	; 2
    f6b2:	88 f0       	brcs	.+34     	; 0xf6d6 <__vector_20+0x126>
    f6b4:	21 e0       	ldi	r18, 0x01	; 1
    f6b6:	30 e0       	ldi	r19, 0x00	; 0
}


uint8_t USART_receive_byte(void)
{
    while (!(UCSR0A & (1<<RXC0)))
    f6b8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
    f6bc:	87 ff       	sbrs	r24, 7
    f6be:	fc cf       	rjmp	.-8      	; 0xf6b8 <__vector_20+0x108>
    ;   
    
    return UDR0;												
    f6c0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
            uint8_t hex_record_size = data_section_size + 5;    // add start bytes and checksum to data section length for total size of message
        
            hex_buffer_array[0] = data_section_size;            //buffer starts with data_section_size, header ':' will be discarded
        
            for(int i = 1; i < hex_record_size ; ++i )          // get rest of message data
                hex_buffer_array[ i ] = USART_receive_byte();
    f6c4:	f9 01       	movw	r30, r18
    f6c6:	ed 53       	subi	r30, 0x3D	; 61
    f6c8:	fd 4f       	sbci	r31, 0xFD	; 253
    f6ca:	80 83       	st	Z, r24
            uint8_t data_section_size = USART_receive_byte();    //this is the amount of databytes that will be written into the SRAM
            uint8_t hex_record_size = data_section_size + 5;    // add start bytes and checksum to data section length for total size of message
        
            hex_buffer_array[0] = data_section_size;            //buffer starts with data_section_size, header ':' will be discarded
        
            for(int i = 1; i < hex_record_size ; ++i )          // get rest of message data
    f6cc:	2f 5f       	subi	r18, 0xFF	; 255
    f6ce:	3f 4f       	sbci	r19, 0xFF	; 255
    f6d0:	c2 17       	cp	r28, r18
    f6d2:	d3 07       	cpc	r29, r19
    f6d4:	89 f7       	brne	.-30     	; 0xf6b8 <__vector_20+0x108>
                hex_buffer_array[ i ] = USART_receive_byte();
            
            //TRANSMISSION IS NOW COMPLETED AND STORED IN BUFFER
             switch(animation_ctr){	// display animation, tells user all is going well
    f6d6:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <animation_ctr>
    f6da:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <animation_ctr+0x1>
    f6de:	a0 91 bf 02 	lds	r26, 0x02BF	; 0x8002bf <animation_ctr+0x2>
    f6e2:	b0 91 c0 02 	lds	r27, 0x02C0	; 0x8002c0 <animation_ctr+0x3>
    f6e6:	88 3c       	cpi	r24, 0xC8	; 200
    f6e8:	91 05       	cpc	r25, r1
    f6ea:	a1 05       	cpc	r26, r1
    f6ec:	b1 05       	cpc	r27, r1
    f6ee:	09 f4       	brne	.+2      	; 0xf6f2 <__vector_20+0x142>
    f6f0:	ea c0       	rjmp	.+468    	; 0xf8c6 <__vector_20+0x316>
    f6f2:	08 f4       	brcc	.+2      	; 0xf6f6 <__vector_20+0x146>
    f6f4:	bd c0       	rjmp	.+378    	; 0xf870 <__vector_20+0x2c0>
    f6f6:	80 39       	cpi	r24, 0x90	; 144
    f6f8:	21 e0       	ldi	r18, 0x01	; 1
    f6fa:	92 07       	cpc	r25, r18
    f6fc:	a1 05       	cpc	r26, r1
    f6fe:	b1 05       	cpc	r27, r1
    f700:	09 f4       	brne	.+2      	; 0xf704 <__vector_20+0x154>
    f702:	23 c1       	rjmp	.+582    	; 0xf94a <__vector_20+0x39a>
    f704:	84 3f       	cpi	r24, 0xF4	; 244
    f706:	21 e0       	ldi	r18, 0x01	; 1
    f708:	92 07       	cpc	r25, r18
    f70a:	a1 05       	cpc	r26, r1
    f70c:	b1 05       	cpc	r27, r1
    f70e:	09 f4       	brne	.+2      	; 0xf712 <__vector_20+0x162>
    f710:	fd c0       	rjmp	.+506    	; 0xf90c <__vector_20+0x35c>
    f712:	8c 32       	cpi	r24, 0x2C	; 44
    f714:	21 e0       	ldi	r18, 0x01	; 1
    f716:	92 07       	cpc	r25, r18
    f718:	a1 05       	cpc	r26, r1
    f71a:	b1 05       	cpc	r27, r1
    f71c:	09 f4       	brne	.+2      	; 0xf720 <__vector_20+0x170>
    f71e:	e6 c0       	rjmp	.+460    	; 0xf8ec <__vector_20+0x33c>
    f720:	01 96       	adiw	r24, 0x01	; 1
    f722:	a1 1d       	adc	r26, r1
    f724:	b1 1d       	adc	r27, r1
                 case 500:
                 animation_ctr = 0;
                 break;
             }//end switch
         
             animation_ctr++;
    f726:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <animation_ctr>
    f72a:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <animation_ctr+0x1>
    f72e:	a0 93 bf 02 	sts	0x02BF, r26	; 0x8002bf <animation_ctr+0x2>
    f732:	b0 93 c0 02 	sts	0x02C0, r27	; 0x8002c0 <animation_ctr+0x3>
            //THIS PART CALCULATES CHECKSUM FROM MESSAGE
            //AND COMPARES IT TO THE CHECKSUM IN THE HEX-RECORD
            
            uint16_t vec_sum = 0;                                               //local helper variable for checksum calculation
            uint8_t checksum_from_file = hex_buffer_array[hex_record_size-1];   //read checksum from file
    f736:	9e 01       	movw	r18, r28
    f738:	21 50       	subi	r18, 0x01	; 1
    f73a:	31 09       	sbc	r19, r1
    f73c:	f9 01       	movw	r30, r18
    f73e:	ed 53       	subi	r30, 0x3D	; 61
    f740:	fd 4f       	sbci	r31, 0xFD	; 253
    f742:	70 81       	ld	r23, Z
        
            for(int i = 0; i < hex_record_size - 1; ++i){                       // accumulate record for checksum calculation
    f744:	12 16       	cp	r1, r18
    f746:	13 06       	cpc	r1, r19
    f748:	0c f0       	brlt	.+2      	; 0xf74c <__vector_20+0x19c>
    f74a:	48 c1       	rjmp	.+656    	; 0xf9dc <__vector_20+0x42c>
    f74c:	80 e0       	ldi	r24, 0x00	; 0
    f74e:	90 e0       	ldi	r25, 0x00	; 0
    f750:	40 e0       	ldi	r20, 0x00	; 0
    f752:	50 e0       	ldi	r21, 0x00	; 0
                vec_sum += hex_buffer_array[ i ];
    f754:	fc 01       	movw	r30, r24
    f756:	ed 53       	subi	r30, 0x3D	; 61
    f758:	fd 4f       	sbci	r31, 0xFD	; 253
    f75a:	60 81       	ld	r22, Z
    f75c:	46 0f       	add	r20, r22
    f75e:	51 1d       	adc	r21, r1
            //AND COMPARES IT TO THE CHECKSUM IN THE HEX-RECORD
            
            uint16_t vec_sum = 0;                                               //local helper variable for checksum calculation
            uint8_t checksum_from_file = hex_buffer_array[hex_record_size-1];   //read checksum from file
        
            for(int i = 0; i < hex_record_size - 1; ++i){                       // accumulate record for checksum calculation
    f760:	01 96       	adiw	r24, 0x01	; 1
    f762:	28 17       	cp	r18, r24
    f764:	39 07       	cpc	r19, r25
    f766:	b1 f7       	brne	.-20     	; 0xf754 <__vector_20+0x1a4>
    f768:	41 95       	neg	r20
                vec_sum += hex_buffer_array[ i ];
                
            }            
            uint8_t checksum_calculated =  ~(vec_sum & 0x00ff ) + 0x01;	        // actual checksum calculation
        
            if(checksum_calculated == checksum_from_file ){	                    // compare checksums
    f76a:	74 17       	cp	r23, r20
    f76c:	e9 f1       	breq	.+122    	; 0xf7e8 <__vector_20+0x238>
                                                            // "er" => current record will be sent again. if neither "ok" nor "er" is detected by lordylink, rx_error_header will be sent
                                                            //to reevaluate checksum via flag variable "checksum_status"
            }//end if(checksum calculated....	
            
            else if( checksum_calculated != checksum_from_file){
            checksum_status = is_error;	                                      // error, same record will be sent again
    f76e:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <checksum_status>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    f772:	80 e8       	ldi	r24, 0x80	; 128
    f774:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    
    LCD_Print(str);
    f778:	86 e2       	ldi	r24, 0x26	; 38
    f77a:	92 e0       	ldi	r25, 0x02	; 2
    f77c:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    f780:	80 ec       	ldi	r24, 0xC0	; 192
    f782:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    
    LCD_Print(str);
    f786:	8c e3       	ldi	r24, 0x3C	; 60
    f788:	92 e0       	ldi	r25, 0x02	; 2
    f78a:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
    f78e:	9f e7       	ldi	r25, 0x7F	; 127
    f790:	2a e1       	ldi	r18, 0x1A	; 26
    f792:	86 e0       	ldi	r24, 0x06	; 6
    f794:	91 50       	subi	r25, 0x01	; 1
    f796:	20 40       	sbci	r18, 0x00	; 0
    f798:	80 40       	sbci	r24, 0x00	; 0
    f79a:	e1 f7       	brne	.-8      	; 0xf794 <__vector_20+0x1e4>
    f79c:	00 c0       	rjmp	.+0      	; 0xf79e <__vector_20+0x1ee>
    f79e:	00 00       	nop
                LCD_Printpos(0,0,"checksum error!      ");                    //LCD user feedback
                LCD_Printpos(1,0,"trying again......  ");
                
                _delay_ms(100);
                
                animation_ctr  = 0;
    f7a0:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <animation_ctr>
    f7a4:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <animation_ctr+0x1>
    f7a8:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <animation_ctr+0x2>
    f7ac:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <animation_ctr+0x3>
                USART_transmit_string("er");                                        
    f7b0:	81 e5       	ldi	r24, 0x51	; 81
    f7b2:	92 e0       	ldi	r25, 0x02	; 2
    f7b4:	0e 94 55 79 	call	0xf2aa	; 0xf2aa <USART_transmit_string>
    f7b8:	36 cf       	rjmp	.-404    	; 0xf626 <__vector_20+0x76>
    
    //THIS MESSAGE HEADER INDICATES THAT HEXFILE CONFIRMATION MESSAGE WASN'T RECOGNIZED BY LORDYLINK
    
    else if(header == usart_rx_error_hexrecord){                                    //lordylink didn't "understand" last confirmation	
        
        if(checksum_status == is_ok)                                                // evaluating last checksum again...
    f7ba:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <checksum_status>
    f7be:	81 11       	cpse	r24, r1
    f7c0:	52 c0       	rjmp	.+164    	; 0xf866 <__vector_20+0x2b6>
            USART_transmit_string("ok");	
            
        else                                                                        // if error => record will be sent again, otherwise SRAM entry is correct
            USART_transmit_string("er");
    f7c2:	81 e5       	ldi	r24, 0x51	; 81
    f7c4:	92 e0       	ldi	r25, 0x02	; 2
    f7c6:	0e 94 55 79 	call	0xf2aa	; 0xf2aa <USART_transmit_string>
    f7ca:	2d cf       	rjmp	.-422    	; 0xf626 <__vector_20+0x76>
    f7cc:	e3 e0       	ldi	r30, 0x03	; 3
    f7ce:	f3 e0       	ldi	r31, 0x03	; 3
}


uint8_t USART_receive_byte(void)
{
    while (!(UCSR0A & (1<<RXC0)))
    f7d0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f00c0>
    f7d4:	87 ff       	sbrs	r24, 7
    f7d6:	fc cf       	rjmp	.-8      	; 0xf7d0 <__vector_20+0x220>
    ;   
    
    return UDR0;												
    f7d8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f00c6>
            //start();
    }    
    
    else if (header == usart_update_message){  // if incoming data is an update handshake 
        for(int i = 0; i < 5; ++i)
            update_array[i] = USART_receive_byte();  //read handshake call, if correct: response will be sent from main loop
    f7dc:	81 93       	st	Z+, r24
            
            //start();
    }    
    
    else if (header == usart_update_message){  // if incoming data is an update handshake 
        for(int i = 0; i < 5; ++i)
    f7de:	83 e0       	ldi	r24, 0x03	; 3
    f7e0:	e8 30       	cpi	r30, 0x08	; 8
    f7e2:	f8 07       	cpc	r31, r24
    f7e4:	a9 f7       	brne	.-22     	; 0xf7d0 <__vector_20+0x220>
    f7e6:	1f cf       	rjmp	.-450    	; 0xf626 <__vector_20+0x76>
                
            }            
            uint8_t checksum_calculated =  ~(vec_sum & 0x00ff ) + 0x01;	        // actual checksum calculation
        
            if(checksum_calculated == checksum_from_file ){	                    // compare checksums
                checksum_status = is_ok;                                        // set boolean flag for error handling
    f7e8:	81 e0       	ldi	r24, 0x01	; 1
    f7ea:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <checksum_status>
                
                for(int i = 0; i < data_section_size; ++i){	                    //if checksum is ok, write data-section to SRAM
    f7ee:	11 23       	and	r17, r17
    f7f0:	d1 f1       	breq	.+116    	; 0xf866 <__vector_20+0x2b6>
    f7f2:	e1 2e       	mov	r14, r17
    f7f4:	f1 2c       	mov	r15, r1
    f7f6:	84 e0       	ldi	r24, 0x04	; 4
    f7f8:	e8 0e       	add	r14, r24
    f7fa:	f1 1c       	adc	r15, r1
    f7fc:	04 e0       	ldi	r16, 0x04	; 4
    f7fe:	10 e0       	ldi	r17, 0x00	; 0
    f800:	e8 01       	movw	r28, r16
    f802:	cd 53       	subi	r28, 0x3D	; 61
    f804:	dd 4f       	sbci	r29, 0xFD	; 253
                    
                    do{
                        SPI_SRAM_ByteWrite(address, hex_buffer_array[ i + 4 ]);	
    f806:	48 81       	ld	r20, Y
    f808:	60 91 1a 03 	lds	r22, 0x031A	; 0x80031a <address>
    f80c:	70 91 1b 03 	lds	r23, 0x031B	; 0x80031b <address+0x1>
    f810:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <address+0x2>
    f814:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <address+0x3>
    f818:	0e 94 df 78 	call	0xf1be	; 0xf1be <SPI_SRAM_ByteWrite>
                    
                    }while(SPI_SRAM_ByteRead(address) !=  hex_buffer_array[ i + 4 ]);  //additional safety-guard: write to address and read content back. if this doesn't work, sram is probably broken
    f81c:	60 91 1a 03 	lds	r22, 0x031A	; 0x80031a <address>
    f820:	70 91 1b 03 	lds	r23, 0x031B	; 0x80031b <address+0x1>
    f824:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <address+0x2>
    f828:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <address+0x3>
    f82c:	0e 94 0a 79 	call	0xf214	; 0xf214 <SPI_SRAM_ByteRead>
    f830:	98 81       	ld	r25, Y
    f832:	89 13       	cpse	r24, r25
    f834:	e8 cf       	rjmp	.-48     	; 0xf806 <__vector_20+0x256>
                
                    ++address;	
    f836:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <address>
    f83a:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <address+0x1>
    f83e:	a0 91 1c 03 	lds	r26, 0x031C	; 0x80031c <address+0x2>
    f842:	b0 91 1d 03 	lds	r27, 0x031D	; 0x80031d <address+0x3>
    f846:	01 96       	adiw	r24, 0x01	; 1
    f848:	a1 1d       	adc	r26, r1
    f84a:	b1 1d       	adc	r27, r1
    f84c:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <address>
    f850:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <address+0x1>
    f854:	a0 93 1c 03 	sts	0x031C, r26	; 0x80031c <address+0x2>
    f858:	b0 93 1d 03 	sts	0x031D, r27	; 0x80031d <address+0x3>
    f85c:	0f 5f       	subi	r16, 0xFF	; 255
    f85e:	1f 4f       	sbci	r17, 0xFF	; 255
            uint8_t checksum_calculated =  ~(vec_sum & 0x00ff ) + 0x01;	        // actual checksum calculation
        
            if(checksum_calculated == checksum_from_file ){	                    // compare checksums
                checksum_status = is_ok;                                        // set boolean flag for error handling
                
                for(int i = 0; i < data_section_size; ++i){	                    //if checksum is ok, write data-section to SRAM
    f860:	e0 16       	cp	r14, r16
    f862:	f1 06       	cpc	r15, r17
    f864:	69 f6       	brne	.-102    	; 0xf800 <__vector_20+0x250>
                    }while(SPI_SRAM_ByteRead(address) !=  hex_buffer_array[ i + 4 ]);  //additional safety-guard: write to address and read content back. if this doesn't work, sram is probably broken
                
                    ++address;	
                        
                }//end for
                USART_transmit_string("ok");                // confirm transmission: lordylink thread blocks until confirmation is either "ok" or "er". checksum "ok" => SRAM will be written, next record will be sent
    f866:	83 e2       	ldi	r24, 0x23	; 35
    f868:	92 e0       	ldi	r25, 0x02	; 2
    f86a:	0e 94 55 79 	call	0xf2aa	; 0xf2aa <USART_transmit_string>
    f86e:	db ce       	rjmp	.-586    	; 0xf626 <__vector_20+0x76>
        
            for(int i = 1; i < hex_record_size ; ++i )          // get rest of message data
                hex_buffer_array[ i ] = USART_receive_byte();
            
            //TRANSMISSION IS NOW COMPLETED AND STORED IN BUFFER
             switch(animation_ctr){	// display animation, tells user all is going well
    f870:	81 30       	cpi	r24, 0x01	; 1
    f872:	91 05       	cpc	r25, r1
    f874:	a1 05       	cpc	r26, r1
    f876:	b1 05       	cpc	r27, r1
    f878:	09 f4       	brne	.+2      	; 0xf87c <__vector_20+0x2cc>
    f87a:	4d c0       	rjmp	.+154    	; 0xf916 <__vector_20+0x366>
    f87c:	84 36       	cpi	r24, 0x64	; 100
    f87e:	91 05       	cpc	r25, r1
    f880:	a1 05       	cpc	r26, r1
    f882:	b1 05       	cpc	r27, r1
    f884:	09 f0       	breq	.+2      	; 0xf888 <__vector_20+0x2d8>
    f886:	4c cf       	rjmp	.-360    	; 0xf720 <__vector_20+0x170>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    f888:	80 ec       	ldi	r24, 0xC0	; 192
    f88a:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    
    LCD_Print(str);
    f88e:	81 ec       	ldi	r24, 0xC1	; 193
    f890:	91 e0       	ldi	r25, 0x01	; 1
    f892:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
    f896:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <animation_ctr>
    f89a:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <animation_ctr+0x1>
    f89e:	a0 91 bf 02 	lds	r26, 0x02BF	; 0x8002bf <animation_ctr+0x2>
    f8a2:	b0 91 c0 02 	lds	r27, 0x02C0	; 0x8002c0 <animation_ctr+0x3>
    f8a6:	01 96       	adiw	r24, 0x01	; 1
    f8a8:	a1 1d       	adc	r26, r1
    f8aa:	b1 1d       	adc	r27, r1
    f8ac:	3c cf       	rjmp	.-392    	; 0xf726 <__vector_20+0x176>
        else                                                                        // if error => record will be sent again, otherwise SRAM entry is correct
            USART_transmit_string("er");
    }
    else if(header == usart_request_data_dump){
        
            sram_address = 0;
    f8ae:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <sram_address>
    f8b2:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <sram_address+0x1>
    f8b6:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <sram_address+0x2>
    f8ba:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <sram_address+0x3>
            send_sram_flag = 1;
    f8be:	81 e0       	ldi	r24, 0x01	; 1
    f8c0:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <send_sram_flag>
    f8c4:	b0 ce       	rjmp	.-672    	; 0xf626 <__vector_20+0x76>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    f8c6:	80 ec       	ldi	r24, 0xC0	; 192
    f8c8:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    
    LCD_Print(str);
    f8cc:	89 ed       	ldi	r24, 0xD9	; 217
    f8ce:	91 e0       	ldi	r25, 0x01	; 1
    f8d0:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
    f8d4:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <animation_ctr>
    f8d8:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <animation_ctr+0x1>
    f8dc:	a0 91 bf 02 	lds	r26, 0x02BF	; 0x8002bf <animation_ctr+0x2>
    f8e0:	b0 91 c0 02 	lds	r27, 0x02C0	; 0x8002c0 <animation_ctr+0x3>
    f8e4:	01 96       	adiw	r24, 0x01	; 1
    f8e6:	a1 1d       	adc	r26, r1
    f8e8:	b1 1d       	adc	r27, r1
    f8ea:	1d cf       	rjmp	.-454    	; 0xf726 <__vector_20+0x176>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    f8ec:	80 ec       	ldi	r24, 0xC0	; 192
    f8ee:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    
    LCD_Print(str);
    f8f2:	80 ef       	ldi	r24, 0xF0	; 240
    f8f4:	91 e0       	ldi	r25, 0x01	; 1
    f8f6:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
    f8fa:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <animation_ctr>
    f8fe:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <animation_ctr+0x1>
    f902:	a0 91 bf 02 	lds	r26, 0x02BF	; 0x8002bf <animation_ctr+0x2>
    f906:	b0 91 c0 02 	lds	r27, 0x02C0	; 0x8002c0 <animation_ctr+0x3>
    f90a:	0a cf       	rjmp	.-492    	; 0xf720 <__vector_20+0x170>
        
            for(int i = 1; i < hex_record_size ; ++i )          // get rest of message data
                hex_buffer_array[ i ] = USART_receive_byte();
            
            //TRANSMISSION IS NOW COMPLETED AND STORED IN BUFFER
             switch(animation_ctr){	// display animation, tells user all is going well
    f90c:	81 e0       	ldi	r24, 0x01	; 1
    f90e:	90 e0       	ldi	r25, 0x00	; 0
    f910:	a0 e0       	ldi	r26, 0x00	; 0
    f912:	b0 e0       	ldi	r27, 0x00	; 0
    f914:	08 cf       	rjmp	.-496    	; 0xf726 <__vector_20+0x176>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    f916:	80 e8       	ldi	r24, 0x80	; 128
    f918:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    
    LCD_Print(str);
    f91c:	86 e9       	ldi	r24, 0x96	; 150
    f91e:	91 e0       	ldi	r25, 0x01	; 1
    f920:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    f924:	80 ec       	ldi	r24, 0xC0	; 192
    f926:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    
    LCD_Print(str);
    f92a:	8a ea       	ldi	r24, 0xAA	; 170
    f92c:	91 e0       	ldi	r25, 0x01	; 1
    f92e:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
    f932:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <animation_ctr>
    f936:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <animation_ctr+0x1>
    f93a:	a0 91 bf 02 	lds	r26, 0x02BF	; 0x8002bf <animation_ctr+0x2>
    f93e:	b0 91 c0 02 	lds	r27, 0x02C0	; 0x8002c0 <animation_ctr+0x3>
    f942:	01 96       	adiw	r24, 0x01	; 1
    f944:	a1 1d       	adc	r26, r1
    f946:	b1 1d       	adc	r27, r1
    f948:	ee ce       	rjmp	.-548    	; 0xf726 <__vector_20+0x176>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    f94a:	80 ec       	ldi	r24, 0xC0	; 192
    f94c:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    
    LCD_Print(str);
    f950:	89 e0       	ldi	r24, 0x09	; 9
    f952:	92 e0       	ldi	r25, 0x02	; 2
    f954:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
    f958:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <animation_ctr>
    f95c:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <animation_ctr+0x1>
    f960:	a0 91 bf 02 	lds	r26, 0x02BF	; 0x8002bf <animation_ctr+0x2>
    f964:	b0 91 c0 02 	lds	r27, 0x02C0	; 0x8002c0 <animation_ctr+0x3>
    f968:	01 96       	adiw	r24, 0x01	; 1
    f96a:	a1 1d       	adc	r26, r1
    f96c:	b1 1d       	adc	r27, r1
    f96e:	db ce       	rjmp	.-586    	; 0xf726 <__vector_20+0x176>
    _delay_ms(2);
}

void LCD_Clear()
{
    LCD_Action (0x01);		//Clear LCD
    f970:	81 e0       	ldi	r24, 0x01	; 1
    f972:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    f976:	95 e8       	ldi	r25, 0x85	; 133
    f978:	9a 95       	dec	r25
    f97a:	f1 f7       	brne	.-4      	; 0xf978 <__vector_20+0x3c8>
    f97c:	00 00       	nop
    _delay_us(20);
    LCD_Action (0x80);		//Move to Position Line 1, Position 1
    f97e:	80 e8       	ldi	r24, 0x80	; 128
    f980:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    f984:	80 e8       	ldi	r24, 0x80	; 128
    f986:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    
    LCD_Print(str);
    f98a:	84 e5       	ldi	r24, 0x54	; 84
    f98c:	92 e0       	ldi	r25, 0x02	; 2
    f98e:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    f992:	2f e7       	ldi	r18, 0x7F	; 127
    f994:	89 eb       	ldi	r24, 0xB9	; 185
    f996:	9a e2       	ldi	r25, 0x2A	; 42
    f998:	21 50       	subi	r18, 0x01	; 1
    f99a:	80 40       	sbci	r24, 0x00	; 0
    f99c:	90 40       	sbci	r25, 0x00	; 0
    f99e:	e1 f7       	brne	.-8      	; 0xf998 <__vector_20+0x3e8>
    f9a0:	00 c0       	rjmp	.+0      	; 0xf9a2 <__vector_20+0x3f2>
    f9a2:	00 00       	nop
    _delay_ms(2);
}

void LCD_Clear()
{
    LCD_Action (0x01);		//Clear LCD
    f9a4:	81 e0       	ldi	r24, 0x01	; 1
    f9a6:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    f9aa:	25 e8       	ldi	r18, 0x85	; 133
    f9ac:	2a 95       	dec	r18
    f9ae:	f1 f7       	brne	.-4      	; 0xf9ac <__vector_20+0x3fc>
    f9b0:	00 00       	nop
    _delay_us(20);
    LCD_Action (0x80);		//Move to Position Line 1, Position 1
    f9b2:	80 e8       	ldi	r24, 0x80	; 128
    f9b4:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>


void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    f9b8:	80 e8       	ldi	r24, 0x80	; 128
    f9ba:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    
    LCD_Print(str);
    f9be:	8b e6       	ldi	r24, 0x6B	; 107
    f9c0:	92 e0       	ldi	r25, 0x02	; 2
    f9c2:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
void LCD_Printpos (char row, char pos, char *str)  //Write on a specific location
{
    if (row == 0 && pos<16)
        LCD_Action((pos & 0x0F)|0x80);
    else if (row == 1 && pos<16)
        LCD_Action((pos & 0x0F)|0xC0);
    f9c6:	80 ec       	ldi	r24, 0xC0	; 192
    f9c8:	0e 94 5d 78 	call	0xf0ba	; 0xf0ba <LCD_Action>
    
    LCD_Print(str);
    f9cc:	83 e8       	ldi	r24, 0x83	; 131
    f9ce:	92 e0       	ldi	r25, 0x02	; 2
    f9d0:	0e 94 a2 78 	call	0xf144	; 0xf144 <LCD_Print>
            _delay_ms(700);
            
            LCD_Clear();
            LCD_Printpos(0,0, "writing firmware       ");
            LCD_Printpos(1,0, "don't turn off       ");
            flash_flag = 1;
    f9d4:	81 e0       	ldi	r24, 0x01	; 1
    f9d6:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <flash_flag>
    f9da:	25 ce       	rjmp	.-950    	; 0xf626 <__vector_20+0x76>
            //AND COMPARES IT TO THE CHECKSUM IN THE HEX-RECORD
            
            uint16_t vec_sum = 0;                                               //local helper variable for checksum calculation
            uint8_t checksum_from_file = hex_buffer_array[hex_record_size-1];   //read checksum from file
        
            for(int i = 0; i < hex_record_size - 1; ++i){                       // accumulate record for checksum calculation
    f9dc:	40 e0       	ldi	r20, 0x00	; 0
    f9de:	c5 ce       	rjmp	.-630    	; 0xf76a <__vector_20+0x1ba>

0000f9e0 <strcmp>:
    f9e0:	fb 01       	movw	r30, r22
    f9e2:	dc 01       	movw	r26, r24
    f9e4:	8d 91       	ld	r24, X+
    f9e6:	01 90       	ld	r0, Z+
    f9e8:	80 19       	sub	r24, r0
    f9ea:	01 10       	cpse	r0, r1
    f9ec:	d9 f3       	breq	.-10     	; 0xf9e4 <strcmp+0x4>
    f9ee:	99 0b       	sbc	r25, r25
    f9f0:	08 95       	ret

0000f9f2 <_exit>:
    f9f2:	f8 94       	cli

0000f9f4 <__stop_program>:
    f9f4:	ff cf       	rjmp	.-2      	; 0xf9f4 <__stop_program>
